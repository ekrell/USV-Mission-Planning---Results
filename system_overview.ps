%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: system_overview
%%CreationDate: Sun Nov 25 04:26:39 2018
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 313 399
%%DocumentFonts: NimbusRomNo9L-Regu NimbusRomNo9L-ReguItal
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -T
%+ 11.033437502980233cm,14.060000002980232cm system_overview -o
%+ /media/krell/Kiki/patchysLibrary/Documents/Thesis/system_overview.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.11.24:2226
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585E9EEC4FBBE9CE6AE8532B2CD4
101F1E68B19CC8756AD1987CCFF2302525BA8389489E8AD29C974C5A18DA8F05
5671EBB8954C3A90EE42B2AFCC9D2F52165A0DF06D6A365FB88544455AA87281
8C323EC616CEC04738328542CDE8B0B5BF7C93F1B7E133F3A0518EF8DE086451
334163D1D60B17DA2A733E28DB0DFF1CC06FCE2B0B6A6F13323FAE6EAAC2E140
289A9902475E6CE9C732FFD0344F1C8772BE74E0705D0904CE66DDE2A0FBDFFA
E7A5D02207DB3B8714CCD8900F91C87934A7E178004DDA6D91FC094A714F4A8B
27AB4787F38B78A41FDB756A5F2415403C8F7A99A825C8A6F37CE009152A0248
5C3A78D7E3649E597C9A8068828C2B964EB7976BDB0BA9541C3D806BFA4FB77C
5EBDD889F9D80B15A0764CB951D16524B621E0A4FA9D6F6F4C619646B14A25BB
40D57C2B958845B8788B60E408B6BD71BFC42CC17B0608329D093E1F9990481A
E419883FF01BB562BF7A8CD1C6CD40BBB35A568667C04C5536562FFF26C1CB5F
D8E91869E0A83A55638A573D81F89504703150AD673C8CF43B1D23ED27CD5E59
41D6326BFD00F8E2C46B4C975ACACB7A8A5A254A978CA100066CDE17ED245D82
EBD6D8A0E6E054359B579CD2E0064E5832E860F937F033783A442321927A1A8C
787CD363A398058AD4ED21814D5132E07D93C5A9B27F2B44615B72C93110F533
73C50E14657ED09FB27A350233112B0A339366B7373CE058456E0E1786B34190
AC06A6ED10305E09ADDC767335712B4542DA438A8FBC0A878608407B9211298D
B6C4B86449F9B3FA083CB2173152213DF47E7D07C329EF198E85BA6F03702324
345F9FAC6FA427A9DBF37C658288DD57DFF41A774A876ADAD1BD31E35F8B6C2E
FB81CA292E7C5BA6FB7CDDDA4209003976BE52A03A79C34EBF5CB4B9CEB57DEF
5C10691790826E35AB391A694D529730BAA8F75C5FDA4DBABD057D3F46466673
C2C816A836D1E36B99D07D17819B9F91B8D7347DA871E40063D57C1CAA5CFD90
04575AA9F1AB91191B962D64D82CD86F6AF3F1381F095C0379AF1AECE95D2547
CB2DD44ED0CFD23B1E1537ED3C83D34C8902ECE3FA1653EC33E4D50EE9329A8A
AF407145849ADD29773753BB577FEC7C1760D468320A79C6A1C23A69A87B4E59
3E92607A46259CE64EF5F3106A9747916C0BC2C46B83F574F370790FF793AC7D
7C48D9037EF31940A9C87DC01D4A88DE2D7515B5B6390EFA31A44589BE79A66E
6C292CFDE3ED8833DB255B8FF933A3F8EDEACADDE0FDB24B9AF2504EEFF2FBAA
DB48EF0D4FBBD2A0B5F8D89AAB7B971CC89C5334AD9996D31DF10C07AD641F24
AB4E8D98CA9421505EA0116A0876149EE60107620A89C9A3C8D1BEE4113428DE
0D55B98FA88D7CC258386B3D492717B438C0C74ACBC372F470DF8F35D6E5763B
312979604965F45E22266F569977FA7D7C2E62D9318B033223A9BC848420D62E
3111B09675FE9EC168A340DFDEDBADC1EA404EFAAF8B6194BBAFA142922EB643
DDEDEEF71A8C3865120E0C94D45E979D8392C29DD551188112A6AE98DB8CC966
2BEA42B9B6B8BD5ACAA54BD90BBD4607A2EFE01AF44913B89B791C0705FBF788
CC8A140549F78FC39DDD5FDD4700A56CE71FAACA472DD4C414087CAC63717C03
A3BD2215FE1427DE6E2BD8CF609735E847BAA0635F39A4BBC987172D1787E014
981A78A952644F5EBCC01A305C08EA4625C11416445E836DA7A3DE9A5C9CDE1B
9D487602DA79C4E845D5BE3CA6FDC088B462575052983010A2EC593B475F94A0
EC13432AD104E1E588A434ED028A2F301EC9B98B537DA47285A073A818373257
7DE94ADB70CEB5E6713AB137AD851808FA65D21C48BD9202CE0D5356AF6C40EA
820653A500302F0411B5ABF7644D03E17F39733E90B60F0DB14DC64C38FB8A97
C0BD6AB5AE1B5FAF5BEFB6A168497DD3E1C0933826D1472CCA9CAC4FA61042BF
B953C5AA0EA645772F1E38F523455AD0219F22C6E5E6975D49BABDB8EC50A3D0
6D3366B8A9C7D5BBCD5ACBD7B86D7E1BC311C99F108D54FCBE543CF02200BB9E
6F1B1B21FF80E30DCEA5F40F504468056D96AE7E0191A21742CFA51BC826BE28
4AD55D76AAB3B0B477436A6CE794BFF0ED77A7847F7CF4256ED2C90961ABCB4F
B89BE2D0D207C80CFC47E1922206029590608C6420183612DA9CC6598BAAC380
D6BB40A876D2BB649A5C2137F736756DED63CDAF5D281C0B5F2BE9E890D51816
AC91DE8D6D8F93A35D8AA2145E0598557707267CB6E58F6D9CA6F5B88EF3EE14
0C0F8E398980C7C6DCED448D1588FD8922A47AD1FA0D16BC1371BF8A5B0B825D
B940B2125C16F982248B458F7333632DF0689F1A97B9D3262AC9D1AED22C2EAB
6245270887C0AC4B0630AAD1FC0B5E43AC491292E89853DA1134B7EF26D10EE0
5685EA4B31E5396C4284C3376A9F2841845CB62FDF58F84CEF83450F3CF96D95
D7E8418BBACFC660D888697296B7CC6581024CE279915338141E9AB69F495A99
B90D08BB5BB166C8B086B68DDE13F0F9671B2E7E4B03C30FD2970B441E2BE97B
E3301FB1AB1AE471287800936B812CBED8EC490A0D20DAF926714CDAA4F27033
991B1F87394EFCA8091087CD690D714452D9A6EF9AC68D884E15ACA3BEA31177
47BF9CCB78F9F8A3F5D44459BF81997F9E7C9B316042736A73C196D8618F85AB
3F011E787205B801D84B9F59B2A77880F18FED5C4E78B78C342CDA372202C181
3970A7E19198772CD7C7A92D563D6907D533D00EB43868F0D44776877DA0811C
984A305222EE66549EF7BD5AEFFA0EBAE16F81D80234B6EECC77D191C3C09960
1BBBD682D51D0838C466E73296A0548B21B6BB072D55A210FCB74F1B7D6284C2
77024DC2BFF8844E9ACD1C35AF77C14BFA6F8B83D213999FE54A61C3AAC2B72E
7199B4A92C3BE28A0225793D513846E0400A228CB316B5C4BB49FFF43D613B5D
9DBF54F71803CEE547D55689E826FBDD0635BF791A385D013B48C0AFC4A608C8
B08880A91FA09571A15F21678B7D56F0DBB90CBBB03F41478BE64A71E535D031
4DC2612E8333FEE7C6D85B60D3EBB8A2EB7CAF33E18A42C47DD0FA1E1177B191
7550FC91161001435EE659058620D20B5976B0AF94709221D78BA685F95A6166
C98FE650E4E6956EC2C4FAFBB7188C0766F4F7E83A7D159DDAB8844290677B66
FB12774FA5A9A2EC14FCE5028569816D28087D01D85D20B0F2CD2815C6A4B4F9
08E99762D92DBC331280AD1408F020FE6DBE4B43B5A71F98CD5267FC5DA356DF
F2988DE783AFEB208CF5B4829882B7D2658E78CC8BBECCC5367148B27C6E4EE5
0A02374B9A163B5AE6F5A8472B7EEDC0BF6D53845922F9B159C8F3FE482D3BF6
6A2A0B1A6F3459ED64A2A435FD040E0E10CCB06E1574257C2D0D4A2FFE2725E3
4FB9AC11347CDB1654EE86DD86F21B3B56B4823725FBF2C530448ECF58063563
D86812E0ABDD84D6D553FA1443DCA2384672BD5CBDA9560EA3878B1E2C81D2B7
4AAD2BDE2DC38F7C818553BB45C8C12B5802A9392058736D607CA8EB562EDC8A
BB5D6C02C561986338ECAA35374EC47A70CB070853165C61C1EE74FF041EC330
9EB885CF0BD48D1CC0DDB015D9A513FB2A74A23866F8DD7DCFEF07F933662F87
16FC472F98542094C2DD780BAD637C4D758402344DD5CE328AD81BFB68162BFF
528C7436BB8C1275990A35DAE29DED3940EAF7CE9474E40A3AD6042E6A932AB3
2F3AD434294D73BBA048A43E668A42D1EA187F4910CB1F805B923A72B2C728BB
0FB43F50BFFCF8346F67ADCABD02AD4126F724976A78C97BB968AC34B6EBD834
70905482FE174288EC9F9541B87578732DC39BE1302FEBB6C5A7E2509195211F
F1A494D77191DF335D0DA4FFDB85EB2013C9C2682963466334F25AB8B31CFC2A
E1E6AF5D192BADC37E4B8A714A26884BD10DC21408FCEA6D747C1997953D2DE0
551410F1C398648560D837FB67D3FBCA7A93A80A32481524AA0EF3397CFDC94C
CC44A38C2CE2AC5E22AB57C488C483E6D211546E24F0D8870B6957EA599F3043
84CB58D4A94CDFF088FE4860F33482293044719077552FCCC81CECA3DEBEB081
964C6150ABBD5B3A4B88B8F211FA714B61218B4D73F8A9777879C585B192D0F6
BFDFDAF815AF894B558561839D7F33962AA01C1302C92BB6F28ABCB8DC46F0BD
3A5958BDC5C101D2D3A73E0FD03A1EB01E5FE9A95138859A819D9081BA682381
245DC37D8E95CA0E9169461D52E5D68E6646ECEC4B91C16CA2CB3BFD9A164C36
9C237DD28F4EEAE82A5CC1050953DB494E90817A74BFFE30C47C6991618BBFE3
A012DD5577815EA7CC43C349C669B2DF25603E4E215538A240672BC77027D8A3
C0A06A48CD96F66CBAF0FAEC075F416796F9A5A5F7B27948FA90E747549D692B
74E2FB400AC93B60580DE4DD3D3BF9A106E9D92F36A5CB8EA97518BE3A540B37
2891EC27E9DD7F965D21C6BF6DA5090A99A3C2372F473E243A1A81A4290B309D
6C9C1AFE0708567D78FDC1695C14D9E8A349A197999D774FC81DDFA6BC845DAE
6EBFEA6AACF49945531512F594E28A52FC070877AFD7F68E5C88B1579F6990D3
D04011DF9A76A2CC009DEC7E7FDD4960259D44CE016452878BA0919DEF1D3F44
3A32A724A003C23DE44D0A19EB10C4838A45A08EA3FEC1B88AE0F6576384D456
AC3468909178D9A544430CFF9BCFB9246472A47BDB5F1340B2DCFEF2FF7909D0
6D055FA464D3C8B1E65884BE3C5F36ED01D8955E11C53CA69AFD141242589D0C
2D06C917030391A98B0AB95050D0A9A469DE86BD09EEFE85CEF7B9E5F653AD3F
D76A70C5B35A2390E5D8DE22D9907BF8DB416935BF25534EF2624694FA3894A3
6CA2E5957BCA0EE326B90C882E7CA0051D10AE40355633D7AE561EA78C8C5CF8
BC3CEB46314C6D526840317366D9ADA698082680809E2BB7409C559024FF1069
1DA4ECED7ED682C4F25565C1413FD1BF8681693FFA3E58651B2FA8827ABE229B
A994FB4A0185E38DE5F9B83AB19D7A795E2BE005DB42E46653449EE97FB256EC
609961DC9A0978B33CC28427A451103E26FAAF2E31E489463D4C939967DC46ED
ECD2123FABEF33D1211F5EEA4D59F98C4B03FB77685A0AD426DC91479072E3E1
4AF5EB38CBA85B58C47B56EF8238FE3F5C88DD745FC816D85B6FD047603E302D
3DA325847B15895FCF6035209D77440AA4F02E63AA288302E3E0F9E09AAE0792
951A2B54B0B3EB147820C67F4C54F36763232EA3EB0BB2AD4A24BD4DC335D75B
9A9024DAEE4E289A32747AF2AAADC5368701E5ED2AA4635E11BC8D4CC111B4EA
0E5B1ECAF0A75CC2721FCAFF066103F105A841FAD15C24E79ECBF15A7BC5C52B
2FB301628AAE6F318BA2C364A97378970F1B4646D12CBCD0A3335CCD7758BB7A
D06843E35E0103F819AE2EFDC3C36287440EF3943DB85CE0A917FAA2886CDA54
7AF0DD1BD89ED0918F99342104B649AD3C256865A4837F6D2B0479832F5E6643
CEDC7849A487E0CAA5383EB5F62305F3360B1158C25846965098B269CC42EE98
88770A047285827DE545B19BC5FF404A966BFBD511EC154FF80CC5F1B41649E9
EE12A1A9640C9E3F6298FAC3D3453893F382F3B4A4A4E0E3900D22FA8BFCB5B2
8694AC97D5EF1838D200284490DADEE5B9FEE4077CC0C49937B7D98F84664993
901FB2969C4996A0D326D478B7783A3B3EF292A9E582B78DD2BBE4BABAC7DD27
7FC23AA4863C2FC35A66A35557DAF14A4F247368D518AD728D9597C93B8BB65B
115E46DCD4C5BC874A83A417BD2D7204CB6E89EF2285D58567532E593420DE31
9C40681128BCC45B12744D74BA817AAC3C80A5D553BBFD7D46155D6347F3ECB1
D84594E5E18E91B0A33957A15130CA1DDEF2B658D4CCB565F8352250F47CE4F5
2E0E0DA072D967D89DA9DB6277C97EB092E8B1764E93CBD317817EDCC1726036
E156CDC649D036DA388CFD75059D9B8A4E33ED8CE8ECCA98AA70F870988E26EF
84272FA2D7D9D23656462F21F693C3322FCA93F905BA1D959BF559D2BDECF927
3FBED1837918E4FE0D105233A1249B2E04F544614AC1F4EFD23DC9000A2C152E
A7F2BF55994D1665E7EAE1586A8D3217914C359CBAD826C2AA503BFF3DFC23C0
1309954A0411061BA578A882A48F879E606549A75B701335E101EBAF09964B6A
94D2184944B8B86C5A23581A2E3C78881AA06B4364AB824E4305DDCAB980E26D
814306CE036C4DA73D8FCF9D35C651DC505CBFE774BE97CF0BE22189DFE75A97
2EAE77644774F006CB0F8054CBF4050584360FD0FB3CF2028F7F30ED58B82B8A
84C39FDC64DA7F8217DEAEB6DB447D2E15188694E645D7CFA19CEBBC9D242B8A
C479EEEBB609E8C111E7FBC75362064CBC02FE63B7840E7374C5EA086AD4529E
38A3CE8A943EB455322A87C1634074EBEC25F49D87C91CFFB79D7910F0397368
5DD97F036BD60D4E370745E9F89A96ACB55A77DF4812594057F924269A5AE766
518F978EC7378DBAE44B5F421F35EB45FBB2E2C3741867CA296A48B690414A2F
B63CDA8ABEED117155DD46AE53CC594C3BF41B610A64FB2A906CF19FD69A3FCA
2C2046C106EFF795F4E6DED831F05972B55C2F1258BC51E25FDEDE60709776D9
524071B07EDA6DC5EE16121FC9C5F2A4948ABB0C6DFC63E6F6A8EAE43C63EB7D
E06F81422553CE82A1710527C4DB197496F521FAC436CFA451C9E8ECFBB0D81B
5E4FDC9E3F4145D236959F44198A1CABAF2A25EFA52AD1EA5C079D073118BDEE
6EA8D4056DCE2E651374B441D43F4B2E7B7457FF901EAAC5838391D6462D71EB
F5C01E9AB4465A85FC68ABB33945A5367089B1F1DEB7D0752ED2E819C55185B4
4B554A616022B192B62FCDFA7E78A87F78062708C3461D139FCD64DFEC115BCD
A35945A2BD1F0117B648E8B4C2D4A1605ED6E55022606761F1175370DE8F115D
C92B9F6509CE0A1179F151B5A436BD67281E037465D05177EE2C2803DD6ECA46
8A39D558FD83A3B8E481D021FDA0A79FDB522AD75EBABA754AEB972F9E84370E
B8986950B0F25BD659CA9E620276D9F763A6A9B4BF512FFFA020C06D2EBCD7AD
3050E68BAF1880EA2CA7F0923B3A04BDB59FC4EFF8586E5AA9260C049EFF2033
61CFCB76EC25AFBB99B363623002FD5CE80F3316284EA27BDD2523DA73FD135D
8D58DD764CC28182634AE143A1C35EF065ECF6881A3812AF80C0573BE54B34F7
EAE7975F68B6803DC9CF1475EB17953E5C2A1D63C2C70E6672ADB0105D834449
8021970202744504D9D5EF893FC514308BEBFA42B1E6248D3096CDE6212DB6AC
7F7DE678CDCE5A5EB4F952025879F07A7B91FD8CF51F531777BBF0A87A298094
1CAB9B13E62E040FC34C9BB7F1AE794EA774CAD2ECA4589B84D7D355D099E076
A04DB98D0AF9852614143071EB73620C0F58C98B264925D3BE49BD27B515EBE9
6EF40F4B3B0496B7CC6581024CE764F5AE7AA3CEF75C69FE6A4B6EE2E93C0887
02F3E8489B6C01D1D0312C1EDD77508D5BD4D43854EE40DD5740C700CB330D50
42E725B2EA40DB7DFC773511D9B91839911A284BA75757D5388335AEE2AAB0E8
683E4DC2280CD2B8F8AC465D8BFE4155B94BC7AFA7BC79B2828D8CF376ACE953
B18ACA30FDC8AEE4A4F9B728D0CE91D2A6DD9C07A0D19542222B577E78FF579F
4154305BC072B6210CE7C4C6AD5F0077F602B5762C0C056932425A503524577F
10B401C9A2671A7CA769C0D3B776E5E469A0E168DFB6AEF318B1F51BA2DBCB20
3A5342F4A0C6AC4E4E15345A4CDCD565D40CF5A164ACAD7D02D559CB82CE0E04
016C3AE50698C63E30C9DD74B6297EC0220C91F8BB9AFE742FA96456E1317D40
140741C251373FA21A6B31A131C0B7A7B585674562EF15E5CDED325D4DD939DD
B00630FFFC449253111FAA691D7EDF3193DAF1B8120F0F2A432A086DFF8B3E14
46FE390D35319E2C674C07B0C87EA3885BC505BB0A5E98538AA191179AB5368F
F41481D64BFD220B87A9B19A39FB42B6865478898C645295B6B0B2ADB70A6708
A1C2E809B70094445A35CC53CA4595D4815A05DF3AC5CD3117B29101F0B3CAB4
BD2BE24421CDF6F1ABA4F5DCBFD2A1C0EA4FAC845E16F48DB31DF454BD990127
749D46C19F038D0ED98EF86764E7D81956AEFA9839004AF83DDE30F01CD01313
34A1FF546D7360CE2099273F16224DC0CA873D5A21A9A0EABF677D3177E94BAA
ADA5DAD0D9BDEA790CB57377E6C1C8EE708144249F3F9B2399C70B9A3C1B9563
734398150F6CB65BB04B1AADAA180E3AF8BA2EE50398F1A7CFC0838C8F8F0627
79FAA15A6697A6EB716171BC1FDDF6B618BEDCBACCD9025E239588CDB6C36D6E
90FF8BD7498DA3D214AE275934376D4ECFA31379FDA9F7BFA82EAF5927981992
1638C666E45CED430997D856D7FC49C8E9F398EED43BC2160F6EEC81730B2C2B
9E60DBDE83C466E94BE7508566A0C57A57F21B3F433A7EA8B5FF5EC57A09851E
D3C07D8B7E7C35005BBC40E7604D5833C849E0AF7AB8C13947AFA716D923F69E
F1685CB3751BCC706CA2894D7F88C1774B567A0FCD508B8233DEBE2A78C72E40
A39F4BC375BBBAD2172BF16702EA2B39D47CEEFB37F2D7BB7F2409078F61DF43
64EDCB9A58788515333439569D3C8C08E32A8D368D104CF7730F25FA2E54560F
DE34E4A3EB631CF279206DF52D9449178F8021AE3D518F6B664F203BE5B87827
224E7C446FD993C8F6E1763488BAA1B0178DD640FB9AD88EF914A45E4357E835
971895EFA61463E35B3F60391D13C26A4958DA417B670404E541771CDC2F9007
4DF334845B23E3DC8103D9F7D940CE902674C6EFD6500084FD75CB36F23C8116
747A63540C454A156CA582811CDA7DEB05BDF5CC46547ABD8222985FAED73CC7
A8CE59B1FB4622C0F6D4ADD162DEA2677D46D52A649283DE10D2A09145627E07
F0225D2C4DAF3137FEC837285AE9629E2F0BD043DB07E68CE7F78DDB940917FF
7675278B3B77A840F348FBB3E5D447023D643350EC13D1F64A722C0564484086
5A1EF007F035075DC001C762878FD22DD8B4B018DD2C655B4F6F8C7DAA6A1BE9
EF33DC7E197662518FABF5086DCF9C354C5DB878C95AD137CA443E1912756456
94BB7510CA689FAD0B30B3E6C4F568DDE3F96D426DB9EE53C69A28D70C1272C0
83BBD1D61E00A3026E58E2F07FB46338A0DFC1B8C2EE1671ED6A1156110505BF
29411E0A908DB4E1BCAEF75C34B1C0A49E171848133C2DD1CD525F4943E97917
C37315BF6F952EB5EDD19238374D5BC908EF978DCEBEEE833C9CEA85B27C5000
8CD4AA408450023097EE50444E0B88E5C5DEF5D033444B5E65208DFF0C80ABF3
8F11752819E7534BF5FE81DDF21D0AC29ECFD3CA100435C0E7991917E77F7F4A
183E15CAF1EBFFBBB52092F8D7ABA7623F97187175476746809C06C71E651C6C
0CE34D7AA02D526CDCC5AA26ADCF5F9CF228228DF69916AD6133D5DE126E4C42
AA2A3D4B66495540330622A5C9571D72DE95E66A07372DA2C60B51DDAAB1A4AF
6826D32D4BDEE7F9FA579F7ED64524CDC4DFD912571D40FD4EDC533A575B32E6
A9A58F94065724341F907E30E8F609047DB5AB1D11EF4A587E569A48CB419390
4CD01D5FCFC898D707553AA90560AA32BFC1FB1353D8E1DE115F78A56D706B19
396BFBA6BCAAF617825376C975A17DE62FE21E860D87F717B64823D752D183A0
31142AE2D83B5B32E6F3D5BEEB8A2D7BF5E58BBB72495C099A119CE52AF793A4
937CFC9E9ACC236CE307310AA50B88F495BA43C39DF8A664335F67B9DDE36DBA
793EC77E5EB41C1FEA217581860729E94F85E4BCFEFB4002EA3DD1472C5BD0C2
D2AE64840D9C42E15EC96FDA3AD6350EBB5431B88DDEA6D3A49A83886DB26006
5E423B426EFCA88006DE2BEA26EE8E974027A8027D3F4EC6373B30B200BBC8CD
94D505A649104701909913270E0060FE23E1DF831B3FA3C5588A14412A264B82
7C6050DCCE777B796C1AC60A3DAB44FBAFA8A975DBB3644ADB1037620E73A806
27ED5C68257D75A455702A4E56A3BE26B08264533C932566497EE0559C01123E
97FC1B226867131D1A1D20E52A41A9C7D9852BAE98DAC79BC09EBAF05F77D58A
9539041A53960BECFF594A7B27E37B5873ED0F473050462AC1FB753A41247A31
F182534C827B8A694D33A0A54BE5B9D3F253C0B613B9B633EBE0F523F174D1B8
7F8E5A06CB2F03B396D8F5210D8390592C909431AACCECB4A68860482B626C62
849BBD3E6E70DC12DE90730DADE2A1F8A6FBAFE03DA190129FCD113AA4E475B8
D83F6BAC2D60811DE69271977AF449CBF5B2093E36A61F89CC3B6C73ED2387A1
E63212A4F87EFFAF8782C30F4FBCD5010D94DDA30568C75286B8EDD0831960C3
DD7B0774DDACAD3CE68D323BA915C10F78721C7732F29E2B36E8CFC932AF2DDA
28D631C559BF0ECD351CD3A742CA7070AAE1C43E988AF2C9E373342D1CEB6266
8F8D8A3F36DCBB5352490FACD6E9EF0C8681CF47FC6E2627C754B79F4601DE1B
6FC0D6DB7692A308913A5C930C245C7C4B18D30A7046A27AA007D54F2A1B2D18
28A9EF2072B2957D98A12B7D4072EDD342E3811E08EC61A7B479D57D905123FC
2354A1173BF5ABBA2D5A2D8EF6130648F0E1DD9EA79A3AA765C18E0477DEC817
0187CDF780CAF45A8E0C2D394A26B50F8BE2ED8759EF4E332E781289C284BD86
889E71325BC1E577A35B6EADC1B3FB81DC7D3C71D21D6792B3A02A09751D51CE
190D8229D6A944C8E6F9C2718FD66945EFFF30F322AF9B88E1494C26E1932438
8BFEAD35BC2E9C405F8360ED1CCF938347B6BC83A6078DDF4BE3CEC6AA68EC3C
5832338D909737C248BD67BEBCE6E1284CD362B55E72BF69173843DD3126C2C1
36176ECC1145CC3BC61DDA6C89E780F1B6393068FA9D4ADB75BEA4DF343AD303
44E6B4C7F83E24D2E6728CB0B554648DE5126DFE050330418FA93079DC062BDD
E741CAD677367993F1B4E7756DBC96D8A861F2C219E8EDF5D67770223229186D
86186C4086912C0F65FF9C92443E6BA71C5D4237AA1345B070AEF0927B030872
0AF8BD9EA83F3B85CF7154CB1AA0BFB965C82A6769748D7FBF253EFACB7155F8
11C65C1530D5FB02EF017DEEEB99B6A1051D63F6C9E5D895CDEBC01DA4A4B300
51CC87458DFC388530D1873C9C260071AB6AD58C78EDF6C2650CC6543F670E67
B8FE790851B16E71241433FEA5650A385A5EFC3569911E100A036EF590EE09FF
D84314D9394D5D0544C5C6C83A858307703A6F79AC6ED05FAAC5784FEA083D8B
7306E4DCA49805DD8D20731DB26C86ABBABBA7DCC731D0F06699DA05CFABBCE8
EED734C62EDED4AB1A26F1173793087399AE2CD42EA3950E8C685E163310EE01
87848E6766CC8D703B64341ADC30B47F91282EDC51F87D68D16395D93479B3BD
866A4BF33913DEB54B4D030F181C883DF60990A47DA285D767E651964E43988F
11795D19AE386456AD8C5D6D789015B2CC356F4041920B2187CDE8DB8724D14D
4DA223CDD16E6515EF0693628FA4DBAEFF30348287C9C3FA8B34A76654DD7AD6
9277F325136570B4C3191D8A4E83102B81DC22CDD8965A3B300C1EF90AF10E1D
1EBE111BC6D134930242730DFD14BE896D578FDAE49D71676C77EBE2D09016E1
AB71D7CD7489C54173C79BF6BCBA6948FF68CB570A58E13807D66ABC40B5D162
1919428C0FFA4B5028811DEAEF191471D7CC48547764A8300771669A9F010238
E407DD2FF177498C43B5E3EB0A305EDDEFD72E74121CCD46C28388CCE21E808D
04BA88BA1EB4268B7AFB245DE6EE93098A5EEB54AA5AA6A848C51377AED1F174
69E197E9D984422D4282002EB143C45E7D314337C7105D9CBEF7BF068F134775
88C7F70BCD0AEE3C4C5E4E3EE6B4946836E4A6110158402C6FD6A921E3F54FBB
8EA3200E3F69312BAA6E86D6D02EFD2C661E690B651DEF03A9D83FB8759D7DEA
6A5634D86424E1933D513A636211F565D3EC8ED02902925D9E9FEF4F35816A39
E65B836D8AFF64A97748D3761C1FF4D276A6E17B6601C4461FA444491570EBF1
B3352AE2E618A1E722B94C294EAA90DC88990CCB18C76CDD0A89F5C055CB679C
F5380C1313626D06EB8205D8F4E36D125CE32C5F071ECBAEF147390839EEB8B7
800DFBC2B7FF9E721AB448A8CB0DDB1CC8530B8D240A9F3A3EA141DA8A7427AF
9443BCECCE33E4B361771E15B236B1E3F1AEF366D68E27843ABC5A9C7C4F6B00
8DD69E25CB2C0BB3B059A766C4B102BBD76F6FE3B99483ADD4B664493418F76D
2326A913F567104262F97C97E6765F77934A7F2595FFFD8D177FF270224694CF
929D6B5F2237E1842E5DC8AF6583A7A255A2BE0F4FBEDD195737E8783709D96D
0FFDCE5BEABE0C47842F89A90535AC02DF762C597BBB6DA2EA66F4161CE89B25
A7E9B3A9951E16820B6EF528DFAEBDFAD662ED663746353C24AD19CFB6A5FD61
65828D60CC8C0C1792592ACA50424FAE48FF5080800103F08F8FD1B8EDC07A4D
0500600EF9547209188740CEBC9D7A5D2BCFDB5E31DE61F5256FB0A3F69D55E2
8F1C35B0674F5C51795688571F4F008BE817DCF2D246BF75DCD19E66F93DBC8E
9CA5E8F760AFEF0B12BB26D0759A7D11FD99B669554599206F516DDCC897953D
2376927C0ED05D53D076BB129306978DBE5541F241404234E8407F164F7B54CE
0B0E20E64F2A3FC13D0DC9505CE51628271B367FEFBD4DEFEECCE0D2029EC745
A33A0C3B5F36CDB69D15FD971FB7F55761E9AF3C9B374D734E72A793EB624D8B
CDAD3F2A60C7001686A06808DA93306FF87344532D0397CB8A814811885AF315
8FA78355FE051C21689C5A2B96FA1924FD6FA39B37936F0F922F18A9D12A18C0
AAC8D04C866172B75107F08D564E58F935785D162FC3ABB51F2602D4EDD3ABE2
B825904A4C22EDAACC881DCA2545010A78108E310BD2F8B4C4934BF0E00C1878
F6D4275107F953C247805CEF8C112326BF468EB4B7F07DC8211712564BA047E0
264112DFC328C00F40A3FFAB37B26BA43270D33451FEBCD2997089606700A607
823F1C4060AE68490AC4A06D62431B28C49A08659B95D6CEF8E65BECA03C9469
0AA9CEA49B656D83139769F56BD25B294EC13E71E1FDDF17CD0EB27667C9785B
55CB3E6EE6CC42BC10127723AE37D3EB08143F3F460A4A4FA5E1656079B2A14E
82324ECA269E00C81B2E130B69C4E634FB7E508CDD51D6649C56CF9CAB734FD2
FDFB42B23F8A77613E52277CF3575EEBBBAA4B305F1A70BF75CED2B3A47A1372
541A1DBE598AA09E444D0FDBA8678A764A1E44AEEA1C3A99A9480A00F03DA125
D36AE5990C233DFE8180D5910536B0E2F3E4A1ACEE9FC1213387B199BC7B27BA
3C217768CA9D1E86903FBC5AF2E5E727D40915E311B5547C6B0D38756B14CF98
AEC06770A333FA6C72956BDBC650A4D47DEC46B9B18DE1D7CAC8B2988ADCFCF1
3362FE89731905FF0E70D73E2FD1FF33C8D9CE6CE0D80CA68B69D965C3ABC3BB
0B26B9E4B79D7D5E9FCE984AB979C5195AA97BB94BE8821EA40AB8DECD862892
EA5EEEF7D8EA540E398578997817B3D0B394CBD4BD84373D5FD5B43B2883FA71
3C628E1623B310BBF6522C836B46600105B4C97201AA80AFBCF28440D20CB011
25CA5028995058645B8A2C2139F3ECADD92A5676670D5F71CB4506927728C190
32F0B5B3995D3F9BEA922DE271E9DD24C9F60CA93239C8282CA19A33F4F11EF6
ADE15F3BED5B0F06762CB3FACE764BED7169FF009AF0DB34732D1EA6B3B77675
2B9CAA41B75BFB12CDDAB3B268267124302289AAB38510916FB1C6590DDB709F
95067376BD949042077A9CDF0782B0295DC70EB23A5A3F1EB7A9B03A7B0CF3BB
F9BF48E05C7C937825F05C485894EDB30B870CBEC62BAA6C5868786E02CCDEFE
C8499FBBBE27347B4ABB9E2084CF812DACDED9952E424A1336267BF2065EF851
893930CA980E49F54A716059A76EDC4F120DD71A95804ED3659C3C4888B3B389
4B11DC9889130EDBA86045450F34393BB4EAA5B04A440347015F48251697B17C
3BDA48401E74C2756E82743EB7DFB0EFA9317F9A0BFD83334BC2034527CA6053
B89A259DDBC2A96610D95AF6BFA7627F5C6744FAFE533587EC959177C02AD0BA
BDB49950E95CB1BE74CE9522C0CB438BE5557DFBC20AC47B0369B333FD52DDEB
F2181355926DE1BFDDEE486EDAA316E204F138C26915499A95B029C7BF4E1546
762F6BD60B94EE42F5E1E1B30F7551FE9A08A2DACC4986057B8F1D0D85ED332F
A63102DBBC6E096F472CBE71AF939BE655D406C1B9CD05E6E0874D6BA68EF85A
3A2679306F5D85B697B6724D0B4DFE602187F3E2013D0453EACD06CA07991A4F
3996F79796E34FFAA415AA7AF0A0CA95D6EA15BFF6E9A19CF9D23E04E8B1AC1D
5A7E9CE28FAB3B100E712ED46D21B92C06955BD2549C29A4C85E58ACCD1F01F6
E01E8E0A942582AFA205633F87343B957221C99F44AA3B5D11BF9B0200929864
960DA8F1B3117E0A4BD60BA52E0ECBAF7B2DB7E7C4ECC52E835E4A07FD64C544
CEEBC136FF1E8223E9024F1DEB2079BEF01D60BF9163B050544A22C6A247232E
62562B42BD75EF6BB25857D35B51868423270BF2EF902E315FAF427B524F8EE6
09F9A486E10296CE26A4E1ED05E7B174E2C5BF3351AECD182D2779F78F8E722A
5DDF1B30A710FDA8E19C233A33A4D6F5F3E9A8A77D4E2A597B0329CE79F16EB8
8D84CB50410BDBEDF24E3FC95C87244DD4ECB85FEE0B292236010E256D67DF14
DB4CBFDCBAAA5E39F23E4F3908630424D8B3C7085BD4E4DC837D84E7F4B10AC5
9BAFB953188F9C9B88B720105D659A9668C47D724D5E17EEF661C9F5F847E340
D2A0F58FF6ADA8BC17F2F794FE8A3F849ABA093A1D596AD62BD811F1AEB8F1CF
3A8A10082BDCB02CCC6ED27636E7EB39B312EB2E315315C1484F8460C6813245
7EEC853A980A515BBE586BEBCAC0260944F86B9D57B5B4ADB59941C3830FC93E
614C2C4E81DBEE2C3441201C33E0C2B53AB4D604E30F0606E5A7E5797B07D780
BBA1ABACD6CECF140DCCD01DEC9497A9196A8830DB960E7773C0054EF005EE50
64B6E90B2CDD75A441F083AB7352A3561C16307DC5826CBEC26DFC5FB1DE5FDF
20C696DD0D2C0C159BA4516FDA1D0A7CF923C476A16012452DA146CF940C2154
D7584F7BCEAEABCC0536350D1F1250D26902BE6C204E2E7E725C1B1B8F9E96AE
84DAEDCF4152A6ECFA8219E55FDB21D31943639BA2D3B942E68F21A0ED6D0A92
C08E4B796FC6606F121E15FA9EB07B88B7D6E94009C0292C7A7DC1B5BE02528A
C8921976DEAF575874E4AC3F7DCD930A5AF1C5AD03710894870F7E4353FC4908
82874DC3F2FC8EF15CB4E4D160F43457A650DB14DC4A277C17DFADEF3BD4A4CC
C9B595B10E0FF1C4E07F465E9C98F2B366DFB497439A95BA9C65866EE2564EA0
579535D4134B6E42E35C31B6CF796E755D7D633CCB552CCF50849A115D553335
27AAF4D8A74A65DAE70971E800A96A5F3EF9A928038457DF524B5B5AF4761317
68BCDE805DAF06BF48EFEB9364F40668A8CCCC9DB2CFC1FA79295684320BE9A4
E50D7613DA1CE54B6E349013F62BDB30517FF93411F08B5FFB65C1B4018E7439
648A180799CF56455B5500F2525153C5804C059CC23601A36D346900A3D9148B
D9B6BDAD6F5AA721069D0FE36502F43247C3CC4F04188B2FF512FE51E99E036A
8E4F3F24C70A816A5B641918C8856A7DFCD8C6584F1EE3989877D7825045742C
B30FADE05555C3A3E1FBB6262209C0755700601BDFF77731902D5575CDBDF9DE
7FC35952FF972E3EAA976E9406AAA51EB10B8C277B48A7C5B0357A1A2CFF0460
C423CCE96E6795D320452D66E5043612B0D884514926501209AFC847156F96D9
1A80259468C3817FFCF77B22A58117101EC65DDC62F1983226FABE60A67F4742
7DC7BDB6FDA4DBC1CB95EDE2929F2004641A5DD22D63072BBC30AD996E6F44F4
1E89415A006ECA953D993914EF447D7E09A12C3573E8920C088B374B121142F5
7EF23E5A6A5BF31C8716FF2AE30BC2C8E91417198C91C52292A9E8E1660137F9
E8BED46A7B457265EE4CAB37F13E0693F8592A07E10B6EC21AD9CB40340B0A88
9643202FE3AD35E9EB462D796168CBBF9620CD94127775162D043804545D2C27
1AC2B26BDA655548E442FE786FA810D2CD17915AEDB3EE7DFA41EF0559EC777E
C9E2ABFC18FAFAC56DCBFDFF2DE1956B02633395B67AC330F3737BE422AD58A1
0CFBCC38CE59612FEF4BE0A2E95B90CD2F43138E630845154E799D1FF4F60133
30B3600D5AB991
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-ReguItal
%!PS-AdobeFont-1.0: NimbusRomNo9L-ReguItal 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B74377CB02190B5A90769F2EDD5437EE
E3C7FCED238E4B22800705E9E86CA9BA63F869EF383BDBBF27066BF33164BFD7
E0747745A81F5C730A244D4424C26B9F11A27790A7847F88919FCAF40749ABC8
880521FF3C1151214C2C204D8D0EC8AB2AB23D244FB5AEF277024F7A0FA4261B
86B52275052894C31DF82C7A1CC9C44A0C50B7C0BDD46EF192F5D04FA9657469
889322F2522FD90E62D6F5DCD7D38BB69FDBCF51CC425442ED8BEE9D7B743FDA
020769A7CFAE41D4422177AAE1B084EBB0A48DDDBD08573A7C2AC88C93CB85A9
CFE8238AFB3C9527A225329E8310C7A91FBC8FD1A54780002F16BDDDCF16C58E
B3567E133D1CCEAF43758D9ED90DCDBD7CBBF0BF03BE50426089EC7071143F51
726DDD1273580D1BEC9E882B2F7A1A617781BBE5ED828392F3978EFB0530AA22
39903E4B3F8196C3A20942C46A7199C7510F9B2A10DCE4F979767770FC0CC2C3
FAAC13F915F25CD37A9CC3103B3D14CA282CC67044E94F863AE060C15384AA3B
971E94EE6C587528653AAF9CC951A3385396491BE6C582C7FA09872A638A62E7
8DCDA3D406E10B619A2FF165209606EDB80E5AFB3DBCAB07A8F9A07FB3455B1C
E6936AF27B3F61C5AA3D8E7009B621DAB35992D9A0152EF4B01165E5EA6F0EB0
525FE1A4F802F0B55F44A7564C18D44C6798F739D55E1AB926E5F1230538D96A
B2484EA11931596193BA5C06EFAEA6313E62E70EC9BEF8C4560D03F2C4113755
D38F0B959DD34D98A0D0401AD3156A3D9ABB496936E2D1390EE9BB7953614354
E1D423DC846A26CDF8AD1DFB826B01DB939659AF92E9606475C02D8624E1FCA5
4BB577F401B4D232A8BA6A0A6500F0CC4C007DB73015E52332A3685589F3ADE5
4C2F3669DEB42D646CFEDAA09CC251C84A48B5AB27BBC9E6231C05A302074933
9681BE57B4CD50903AE045907164562E59FC6D52EC845BE486ACE592F718017C
D2E1597AAFF1AAB5EB6BBB58BE6AD339C572D0B9CB60F48F4039B3D9446D6F27
C2CEBD637401A381FAE7F3035D3BAEC3D0709579EBAE534FCAD68EF2CFF05B06
6ACF25D34DEB46C4AD0D21BFC3A9A11405B0873D4E94DA503C52AA8A07127BE1
AA3359A90834F4A5C6383DA8355DC4DC23DCE672B0B37D0C8F4E9E27D5F96365
F47B1F35B8C1DF5D27D2ED7271F16CE4826618615A13AFE270E9035F12399AE9
E99E066688884DBEA2F644645C55EE47DE4AA52ABD988594A7EC882C32556460
38AFDAFBEF79999598E57413F82DAB60C06FD2E47EF014766A31E060AE4E594B
5B052F3F4219582DB5BF9715D54C191ED48DFB419D16354DAC256073FEFC617A
5E75462DE71B24E2ECA5A856A3F316CBD732729671E6E36E44D3F989633188B2
1E71002C40973506EE99FF657CBFE572C23C6D9A7A8F1520ABE93BAFD9993446
580244DF4B7AA12F89F9E47F9A818A4B7A5EB73654788F786ED03DBD1FCF0F48
08BBC4AEA4881748C0A2F1F9A03CCD801AE59A4878ED27E515FED0D26FEEE696
02B2BD58D1451688884D5B37EDC8DEF2EACD9C3985BA9ACAC69EE0EFCCB514DA
6DE060318DA4875AA4D5D876DC1E45FDD2E51854B1DF79823A500DFAC8646CB7
E1197EE9C8C55E2E9EEDCA3C0660DF163D77424DEED1730C6F864C86EDD12921
90B89BE95B39D349823953338420449974F4CD1D1DD33C6ED004D673F5A44C82
D37A0C5D77607237A6987F2863DD55ABDB4CE6BE4B5F9768D626C2E72BF46915
5A27490B923F23E2D4D65D76CA2174D9BDDFA15EB9A0C9F781B114C3CE4C9A88
7F06F054121AFFDC58A6E2299828A2D99040838788BBA5FBECF89528C09B6ABE
9DAC01E1BCF7166C6752792B6E2F63B7AC2BA096B544AAE38049FB306B9C440D
64FA0925FAF935570F078823B1E26F603D2C0887CE239131FCD8325B1F911253
87793EAA8860CA66D6E5E778E35251A2A6FEF1D8D37856765A2E398174F2AAE4
0B06DA1BFCBC00ECC3E237DEA8C9802509E687E8B93EABBD24983CAA7C21FD1E
44B7C3DB3493902ACF4EB2C17357D4E115CF13487F83C49AD96E100F88F9D927
61A5396B67E8C921751FFBD0822E7A0ACEC2BDDF196C16595542D8F32E962D41
213E6B67A64E45112EB2514544F9411401FEF77C14FA64B9665733EFA7F4B85C
04D8BBB173F3A1285DEE9D690E225B397596DD9C1EAE6D72382D60A1A753062A
05C1F137E144F9AF47CA876366076CA0FDF190DBC4237103634162D7C134995A
4B13980A32F58BBF3BF5FAA2C6D758C8CC20403BCD3BC892094A5128E251260C
8CEE4FE3C0946B845F3F2D5F0BF62B6497F6781F32893D644FE4C03D01CF167B
0D7BBBC53023A12C5B3581D8F538DCE23EE53F5EB857A86592A78771A5BE4135
42F002A5B3C378E9541ABA5A75104641BA7E32CCDC0E9E18CCAC6C165A39EB14
8B25F23459D2996A7896CB24A0BBBEBB8F6F9C08B63E2A5E7428FC3CA0C1BB2B
FCD8A7936C63159C32943F0F6EF80078F62FB1E0286A8BE6C59DE68C21B92724
5A00D291625C3A2F0CA3130E229B74A345AD6E483114A35CAA9A2047078057D5
5EA0878075EFF02E3CF25222317FA3E400257E55A353DAB1F7D7E623808F4B3E
81F0A9B8A4A7FE30F063F003357F525D7332C9CCBBF8EBD006901B2349DFCB73
F5B1D361F3A1AE883B6CC3C546F1856EDDD2A87FCB9F965AB3E54CE90D0965A7
F857CFDECFC898F901F4D1D2AAF14AA6C2EA413E61BF7B00D1A696AD0425EA09
7B1061CD100EA4A26566A87860626C4B1BFCD51FCBAB5E7B4BD95859C349FE2D
7D91D9B03BB4D49F26CB502819A5C9BE80327706B6CC1E0FD09A241F4B8C1A6B
409A145E5A533A5CD2D6B8E0532BFF1B1DCBE64808E61A415A085D4DEDA1E64E
8F09431633C3E5A1C1BACFFEA2F581AA672B92965E2EBA4725344BD3C039A064
EC44F59B4564DA6C51C3F01A4B69B445B57A6554BD75D50B215C01EA61946012
C986D17A147289DD4C38A0289EC04E63E90381E3A52638877B18EC6582059C06
F759DFEB9F2CD9452CF89BA16E5EC1E16F206873FFBB88EAF0AB4A3166F740E4
82F0965F920B26577B79D9E73A94C82A96520B00323D1EEF4DC861F9E8D0E4EE
C91A7FE5AC5F81A314DC0521630E4728D08DDD753E410989B6F51BB7DDD2AC5E
0C3B0637D4B3683E1426821321C287925BF53DB2C28B55AAF8797624292DA802
5AAD3ED6BA7F318D51CE670573B51F646692261DD548E83258BA5211AF692F13
ADA5048B28F82A7BE652007805470CF8FD960389A736A651C8E9877DF996BAF2
FABE7C94EDB0AA8E432CC2BDE47A570DB691F97E4EF5E27BC07F49CFE7A8E40C
CF6CFE964A70E5582479AF6E3ECB544654C43CA7BEA5B305B1BCA2FF7AA9CEE6
02E9075C5E509FBABC9016E62D7D5AC2A4549F4D60FBC4C2709D6B1A188777C0
EF5D2616577A0DFFC7B4CDCBB6A5CE017AA860B96CA41C168548C95D37EE7475
CE269618C727B596C3C119E92E26231D0BA5B00ADA8E33534A2FD470E8459380
D70B0A4908769ACF79E494464447C416FC35CA59D535567B2F7984E48446027A
7574E504F98DB9D52D84304ED277310F85125D4777602F732DCCDAB71EB262B8
A87DFD91AAD87EBE42566A29879B74C2373223236E809ABE99A944F4BBB849BA
89F2AE5877339D1F2ACE6E53FF0FBE5B802AD9C375C5FA13ECA1E1D50867E197
19863592ADB850F5CC48BF97B97292A18CC459722324D4E3873D2DD75BF9FDD3
EF4E89B05E56B43FAA98324715A56B8FA22BFBD2963A8A15C75818471BE4D349
B02BD760C8E1328EB11ACBB7587D27A1D622D6A1EF598D361219182E7F154488
A6F508C7EB0A6092341761B6D040FDC46915B53A8E00A86BC5BBC90E3E7D0F85
B93CF5618D139605D06B8EF066B8FDFF0A4DF053660BA69E43AC6F9F7AD6B6E5
A8D11CC16BD9831BA07C7E4B5CC62ABDA8D41DDDA26C3F353C32C254D88F5BC4
5BA813F109B8CEE651FFCE139E58A4B143A1198F85DFDC379E6DB0FA89FE4781
5BB13E1ACD034C5B8314ED4592591D74C8C3675A673E6E65A4FB8428968D9DB3
824B726F384A4A011EBDF0257EF73E3E6BDE7A10B32CE40D33355D52E9E75BA3
97998E519B8048A7A63F7FBFE3CFE5C0B0BC7450172D3F1663697898B7CA7732
A29F37A088B74968E1D77ED867AA5466D555150A834F9FD2017F25AFD6AE1BFE
0932CEEB652DD69A3AB7E5BA8281ADF7CB2CBC7E39536BA1113A0FB930703296
F60AADA552F283572BC0EE7BB8D3FEEC8840D3D316F9E3A42C478B51E338E4E0
698986CA6AF124EA991F09C6CD6E410F593F85ADEC07A4AF1B1DC81E2E6B48EE
CCB1D61D1F5A91958038B66551FE200B953194E2CABF38D0C25834A951BB6953
7257F43ABCFC060324985BFE620756273238BFC5604A4AE4606F278171A56F95
8CDF3E277FDF7FECF6FB6CD81EE90AD7375B0CACCDF3E627E24051070189B968
FED244A4B1594C0FCBB2A22BCD502E0F5BF0D86E0DC7B68D408A39D9B043D922
DD870F06852257AA441D84DB6F430C8394FCEC5A6398F275C832B0315453DAB1
80934BD11BA084DC5DEAF638C0B24087CD6504E6961B63F20E5352A1BA96AD79
41AE16EF07E5A87B456CB369CDA25FFA4F3241FE1B8364D5B6599B3B16D7D737
DD02CE71393F002A75E84DCB1C1E0057B83529A37B33541B940D20F7B4A5DB54
DC8FCDD930476AF0E49BFA2737020465008A97113F333A0735FAD82050B471EF
2B907C7F980464BC0AC9F32CE219AAA9D0A48AA1AF941BD0A2B80DF3E5B7E6EF
DA4CCEAAAB761F4F0E5A02E35F5FFE281D8CE195C090E86101192F6DFF6156B8
DFF94B755EFBD4BD12FD99B3697F30F8E770092F2FEC1DCAB169642006207028
CDBE88CB226873087C016B4990CFB9B733D3758787D21410362F7563B2C2DE4B
757895A22D92357AFBD09C2C2FB22529A38153955DD8A924EDDC08D7A385BD91
21D27B1B1BB23733111D89D62943CE2272A12B9FFC70B08EF04DC1DC394DF7F3
E87C2CD0F0352B4B84F22CEE0E2A22A480A33C77B2A156147B43B91E2406E4C5
53CF32C9B31F6D2AC29F794518772A94C129D2DE86D0C754DAE63DD51926952E
A6F82153BE6CC06B53539D9B41550BC6BCBE299CE16C1A9656CFD44DB1AB1B9A
4409054A5C7C6C176B84820FDF982B147D2293FDB26752C1DEFCF6B67A066C20
7D6AE294EBE956BA769E89AD1C695C17F2D783A0838DB4F9F0EFEFB7C378E954
1ABA5A75E0D4499DA0DB83D1A74EA1842F637D95DA91629D9ED3DAC4D8772711
80073A31A1E2A89D12EACA035C4CAB0E9DFD015FE49EC8B14E5539731F9301F3
6C95160E9D3C11E3FC799F373E0F7CF813FFC9FBA8B7F9D8DEC207A9C6BC4488
88ECF646A49B2C58E9A830E17A51ED76C47F7CA6F9A2565C497B973A31131FAC
25006B8A7855C804F0C7E353FB1785CF9CB6FC70C47581A19F4342910E368705
2DBA1D123EFE53AAE3DFC6405AD735200020798B790F0E889506AD1A0321E833
2FC121B0F9DD2750234AF8FFDBCBDF8F6510E18444577C6C61866A66ADE04896
F2911F1A32B2096F6A0C77E73D5D01B08B296933D7B7B7569B24794C6C55455A
987E274BE1FE9BF5E21A2A5B70003040E0D8F4DA1AEDEC773D5C0063A1A7489D
D69AA1D69095381475136DFC97D2CD09230ED6B92B62F1651CB61E066DA67D19
09D5833FAB8DED06EAB4A3AD75EB62BEE595872C66F4FCA4923CBDE129902492
8EBC44E16C267512E5FCF8C4753C1E7751DCBD3437D07B519551C9B0CE312EAA
2E6B2B97BEC19164512C805AD9E6367DD336933A9E007672D0AA283054AA61D4
0A0E14CA9929C1525F5AF5CEB41549C0E64B88F5884F1DCC517E0EBC0B27B7D0
555D6C317FCF92DB58285F0803898B50C4C594708DDFB924EE49AA7D8C4D5379
8B407F3F12DED17C620A9C22CA775EC53097D35478FB61734A7438CDE4C4F9B5
F9C06804C88854F88C5BB08071BEDE3AA439D9B9390106ADA10155B01678434F
6E17B03D2FDF1D03F12AE778A85183336992DFA8AA47E2C2EE7EFE4E3EDFC476
B8F151B681100A7AABBF9CEA249B918E8AE8B2EF2E39529212B65E7565AC5AF0
203744EE95C6D014EC3759591AAF10950F96B8CEE45354B847B6EE1479E3BD6F
9E518DF1788EE038A491C913AA4017ACF99F88A5F8C0B5BCC3258D717BBBFB35
DEAEBBD5368827AE1320106A0B589C3699CCBE81B4D4D95F3BB7DB1599A05349
54B004BCAE3582AA2FA6BB246AF1B8EB189B58333410D4734980AE78921281A1
AB6BBFDE55111F555156449C633D8A9DACF150DE2391E5AA81CB3DE0F664F06C
7E9E34A634CD2D2206519D5363ED9BCDE4C21DC38FF3185F188A9FF4DACA0B03
B5A6589FEDC8320DDD37D9C6536E994A514E901CB127121DB6765D86F4EA099D
EB23705057F3432A3182127E10F30EFE896C9A921E1EB964A1CD7D38DF599991
D07DCC82036E6972D78922C2D185B80B47D1BA176878E6B356645955FFED7FAF
6022B2978B14D36ADE69AA795E35F4E6F5D957497E113EB0B729B5059C447090
F6590608CAC411E2DA37B0B0561FD1CACEC2493B8DC6D39789FB8FC953D3BCD0
6BD1E4BD169299786683C9B8512F5C983661B93604C75CAC7905A472730F25A1
107373EC896A308FF39B5B4B4FB94951A09AAF4DD32BB7953BED1F5869306B28
60ED0F55A1C59F7CA915347F0E7BE0B89403C814DB2C7F9B363F4B77BB6F51CC
29D9B922183085F788B2E841F0256A9256BD86698A98A8011D6928A19FC88236
38FECE540863F53215FF48319CBD7181676C32E14E5FAD27CA460E25D0B996E0
623E1EE00E87B979028E490235CC69A0826FE71D6CD3AE00077F140040935AB4
8F323384B9BE1B4D22042FEEAC87B7AEF47F056A2B887526599115106DC412EB
5E255E0435E065C5B111E9381927C31132D1EEB794CBFBA3BCD4165EBEA3FA3D
767A73FEB807D892420C74144755F0EFF569D2DFE0667AE08CD68FE09D92DC52
E6B676AE17FD5D92428FAB48DADE8EA9C23C6128D8BEB8C89890C9156F425402
ECDF9FC54B9A5A99B7EC77213D5BEFDBE6A4F71EC05F7AA64B7AF93493EFBD71
2F5F7FB08352FBFD79C35CCEDEF16C8D4DBAC07B7D22E74DE44ECDB3E60CEE56
913334C7751990C3B2F7E23DF3632554820DFC1EFD9D258C157421600223CCE0
6D5AD5B7A297ED907BC5FAFBAA741794BDBF98AD31C7BE6DF676BD713EE0B63B
4462E5490313BFC7599FDCDB3F68A81D26628655298B48358A6313E162F27E8B
B285A2222275102ECAFC6ED0CEA2FEDEE74F4712280F621BEB516CEC00E8A41B
3E29D6D60714F18E517ADBC839B9CDC5544FE9ECADB5FFB22DDABF1C1146A2D5
824CCDC61C31FC0F3A1D7AC0D9A9002EE58903E9BA1A82FCA180A0D5D3CA36A1
0DE835D0CB6B67199F06C39F5C398052E1FA7182341FC731226A5054F65D8F3A
ACF8FB6EE16D983AAB11E681C5664C272DC546DE03B89172981A48C1799276AC
5A5FDA1B27FC8897B021365967699EAA10383DDA6350F2A0C986F451FE5DF7C4
1213344375A4121161E30B678DA959F7463CCEC2E99CECBCCCE4FC2E3CF25222
317FA3FD7EFDEBA4AAC8D346A84B6C58E4D6F1341E02EF460DF79D405791E7A1
701924C803ADD6318F2EE1B3D43B0C604BE4AAE3122174634E68A60B90AAFBEB
464212D5FED4BFE297E11199F6AFFE661A21029BE234AE8E0DBEBB45ED454DF0
20BD96B553FF9B11D4D1580D2945BDC1A62242333D55E0C6B153BA55F194E923
1E291EFC5AF056B9581740202723B3E1BD23BD72EA586D76D66694E3DFCCDDF4
B4C08E8025235271F3965DDD67CBAEBB5B66294D9DBEE183FC994070DFCB8299
9BF49D0A7EFB410D17951B1AE86523D634212D95937BC4AAE9E986968D48DF5C
068F2A7D0EC4EC9D9C2805AC636EC7B8823F35CCD4C2B1F9480EC8FE9463DCB5
2AD696886ECCDDC4F6D76F8DF9AFE71F14403FB8D772ED80CE6E47FBD36C57AC
F8FC794021271979FC47606A839FE8E12D7578D822753582E38C1C4A996D5063
4CF2FE4C1CD5AB0F7B3A0929E777BD02BF5138CA96CB93C0E9DA88A8E1E3E6FE
36024153E537F590D3D4774C21750D736597A6FD6D4C3F66F484289AFB3253DC
D2611A59D0A66A8DB0AB706D4885627968C5FD18DD86C48FEFC216DECC298420
C5F319B6D486AC9BEEB18F4AAD3E8CB42BBEEB366E687A13033213155F4D67D3
ED89D4C006EA20D03ED2B5394E26612528990D20A698E6903AB8A7C66AA76A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 20573760 26217401 1000 600 600 (system_overview)
@start /Fa 134[33 1[48 1[33 18 26 22 33 33 33 33 1[18
2[18 33 33 22 29 33 29 1[29 38[18 13[17 44[{
 TeXBase1Encoding ReEncodeFont }21 66.4176 /NimbusRomNo9L-Regu
rf /Fb 134[44 2[44 50 28 39 39 2[50 50 1[28 2[28 1[50
1[44 3[50 13[50 4[66 12[61 65[{ TeXBase1Encoding ReEncodeFont }16
99.6264 /NimbusRomNo9L-ReguItal rf /Fc 133[33 37 37 54
37 37 21 29 25 37 37 37 37 58 21 37 1[21 37 37 25 33
37 33 37 33 25[54 1[46 54 50 1[54 62[42 2[{
 TeXBase1Encoding ReEncodeFont }31 74.7198 /NimbusRomNo9L-Regu
rf /Fd 136[60 1[42 23 32 28 2[42 42 65 23 2[23 1[42 1[37
42 37 1[37 10[60 1[51 46 55 1[46 2[74 3[28 7[60 65[{
 TeXBase1Encoding ReEncodeFont }23 83.022 /NimbusRomNo9L-Regu
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -595 2698 a
 currentpoint currentpoint translate 1 1 scale neg exch neg exch translate
 -595 2698 a -568 1061 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 79.66776 30.44464
0.0 -49.22311 .5 Frame  gsave 0.87058 0.98823 0.89019  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 79.66776 172.70836
0.0 93.04059 .5 Frame  gsave 0.87058 0.98823 0.89019  setrgbcolor 
1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 79.66776 -60.60448
0.0 -140.2718 .5 Frame  gsave 0.87058 0.98823 0.89019  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 302.16798 197.17729
105.84424 7.68236 .5 Frame  gsave 1 0.88235 0.91764  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 290.78706 174.41545
117.79433 131.73633 .5 Frame  gsave 0.88235 0.92941 1  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-568 1061 a
tx@Dict begin { 203.49034 164.3144 } PutCoor PutBegin  end
 -568 1061 a -923 1080 a Fd(Process)21 b(Aerial)f(Image)-568
1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 202.8326 152.93349 } PutCoor PutBegin  end
 -568 1061 a -1174 1078
a Fc(Assign)f(discrete)h(classi\002cations)e(of)h(entities)-568
1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 202.46356 142.1213 } PutCoor PutBegin  end
 -568 1061 a -1082 1078
a Fc(to)g(cells)f(in)h(grid)g(across)h(en)m(vironment)-568
1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 290.78706 117.50996
117.79433 74.83084 .5 Frame  gsave 0.88235 0.92941 1  setrgbcolor 
1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 1061 a
tx@Dict begin { 203.78816 107.40892 } PutCoor PutBegin  end
 -568 1061 a -942 1080 a Fd(Assign)g(Re)n(w)o(ard)g(V)-9
b(alues)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 204.02391 96.59718 } PutCoor PutBegin  end
 -568 1061
a -1178 1078 a Fc(Each)19 b(cell)f(is)h(gi)n(v)o(en)h(re)n(w)o(ard)f
(based)h(on)f(entity)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061
a
tx@Dict begin { 204.1394 85.21582 } PutCoor PutBegin  end
 -568 1061 a -1031 1078 a Fc(presence)h(and)g(historical)f(acti)n
(vity)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 291.35625 59.46613
118.36351 16.787 .5 Frame  gsave 0.88235 0.92941 1  setrgbcolor  1.
.setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial -568 1061 a
tx@Dict begin { 202.37022 49.36552 } PutCoor PutBegin  end
 -568 1061 a -930 1080 a Fd(Select)i(T)-7
b(ar)o(get)19 b(Re)o(gions)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568
1061 a
tx@Dict begin { 202.71233 37.98459 } PutCoor PutBegin  end
 -568 1061 a -1105 1078 a Fc(Di)n(vide)g(space)h(into)f(re)o
(gions)h(and)f(select)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061
a
tx@Dict begin { 200.54721 27.17241 } PutCoor PutBegin  end
 -568 1061 a -991 1078 a Fc(top)g(k)g(highest)g(re)n(w)o(ard)h(re)o
(gions)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 203.90408 184.94283 } PutCoor PutBegin  end
 -568 1061
a -717 1084 a Fb(Analyst)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 302.73717 -26.46083
106.4134 -111.81906 .5 Frame  gsave 1 0.88235 0.91764  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 291.35625 -49.22311
118.36351 -101.00732 .5 Frame  gsave 0.88235 0.92941 1  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-568 1061 a
tx@Dict begin { 202.97456 -59.8929 } PutCoor PutBegin  end
 -568 1061 a -860 1080 a Fd(Mission)h(Planning)-568
1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 203.28584 -70.70508 } PutCoor PutBegin  end
 -568 1061 a -1188 1078
a Fc(Generate)e(sequence)i(of)e(Goto)g(and)g(Co)o(v)o(erage)-568
1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 204.32608 -80.94809 } PutCoor PutBegin  end
 -568 1061 a -1197 1078
a Fc(path)g(planning)h(se)o(gments)g(that)f(maximize)g(the)-568
1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 204.50409 -38.69574 } PutCoor PutBegin  end
 -568 1061 a -746 1084
a Fb(Surve)m(yor)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 205.09975 -91.19109 } PutCoor PutBegin  end

-568 1061 a -1144 1078 a Fc(tar)o(get)f(re)o(gion)i(re)n(w)o(ard)f
(within)g(constraints)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   204.85966 -168.1558
2 copy moveto 29.02191 .5 CLW mul round sub dup 0 rmoveto 0 360 arc
closepath  gsave 1 0.93333 0.88235  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.56917 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 1061 a
tx@Dict begin { 205.37978 -158.90875 } PutCoor PutBegin  end
 -568 1061 a -611
1087 a Fd(T)-7 b(o)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061
a
tx@Dict begin { 205.57558 -169.57854 } PutCoor PutBegin  end
 -568 1061 a -770 1083 a Fb(Navigator)-568 1061 y
tx@Dict begin  PutEnd  end
 -568
1061 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 131.45152 -49.7923 130.88278
-49.22311 130.88278 -49.22311   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.79666
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
130.88278 -49.22311 130.88278 -9.38945 204.85966 -9.38945 204.85966
7.68236   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 6.06036 2.0  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.79666 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.79666
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
204.85966 -140.2718 204.85966 -111.81906   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 6.06036 2.0  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.79666 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-568 1061 a
tx@Dict begin { 39.83366 -3.69899 } PutCoor PutBegin  end
 -568 1061 a -801 1294 a @beginspecial 0 @llx
0 @lly 56 @urx 56 @ury 560 @rwi @setspecial
%%BeginDocument: /media/krell/Kiki/patchysLibrary/Documents/Thesis/so_current.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: jlibeps 0.1, https://sourceforge.net/projects/jlibeps/
%%Title: LaTeXDrawPicture
%%CreationDate: Sat Nov 24 22:12:54 CST 2018
%%BoundingBox: 0 0 56 56
%%DocumentData: Clean7Bit
%%DocumentProcessColors: Black
%%ColorUsage: Color
%%Origin: 0 0
%%Pages: 1
%%Page: 1 1
%%EndComments

gsave
-0.0 56.0 translate
1.0 setlinewidth
10.0 setmiterlimit
0 setlinejoin
2 setlinecap
[ ] 0 setdash
gsave
100 100 8 [1.7638888888888888 0.0 0.0 -1.7638888888888888 0.0 0.0]
1.0 1.0 1.0 setrgbcolor
newpath
0.0 -0.0 moveto
56.692913 -0.0 lineto
56.692913 -56.692913 lineto
0.0 -56.692913 lineto
0.0 -0.0 lineto
closepath
fill
newpath
0.0 0.0 0.0 setrgbcolor
{currentfile 3 100 mul string readhexstring pop} bind
false 3 colorimage
99b3cc99b3cc99b3cc9ab4cc8fa5cd9bb4cf99b3cc99b3cc99b3cc99b3cc99b3cc
99b4cc97afd098afd39ab4cc99b3cc99b3cc99b3cc99b3cc99b4cc9bb5cd95abcf
96aecd99b4cc99b3cc99b3cc99b3cc99b3cc9ab5cb95add297add499b4cc99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cd98aed499b3ce99b3cc99b3cc99b3cc99b3cc
99b3cc9bb5cd97afce91a7ce9ab4cc99b3cc99b3cc99b3cc99b3cc9bb5cc97b0cd
90a5cf98b2cc99b3cc99b3cc99b3cc99b3cc9ab5cc9ab4cc90a5ce98b0ce99b4cc
99b3cc99b3cc99b3cc9bb6cd9ab4cd94accd889dce9eb8ce9ab5cc9ab4cc9cb6cd
9bb5cd96b0cc95adcd7d8fcc95adcd9ab4cc99b3cc99b3cc9bb3ce404ac4798aca
9cb5ce92a9ce98b2cc8ea4cd99b3cd9ab4cc99b3cc99b3cc9bb5cc91a8cd9bb2cf
9ab4cc99b3cc9ab4cc9db7ce7386c96370c99bb3cf99b3cc99b3cc99b3cc99b3cc
99b3cc9bb6cb6b7ae48498dc9cb6cb99b3cc99b3cc99b3cc9ab4cc99b4cc7587ca
525dc790a8cc9ab5cc99b3cc99b3cc99b3cc9cb7ca849bd7434cec869bda9bb5cb
99b3cc99b3cc99b3cc99b3cc9bb6cb859ada6a79e69ab3ce99b4cc99b3cc99b3cc
9ab4cc9cb7cd7f94ca4d57c78196ca9bb6cd99b3cc99b3cc9ab4cc9cb6cd8fa6cd
4e5ac56b7cca98b2cc99b4cc99b3cc99b4cc9bb6cc94accd6a7ac86370c995aece
9cb6cc9bb5cd9bb5cc9bb5ce859bca6676c8535ec77685cb8497cd9bb4ce93aacd
7c91c9798bca454fc55865c76c7dc892aacc9ab5cc99b3cc99b4cc99b1cd5a67c7
96afce6e80c97485ca9bb6cc9ab5cc99b3cc99b3cc9ab4cc9eb8ce7f94ca5561c7
96acd09cb5cf9bb5cc98b1ce7181ca6573c898b0ce99b4cc99b3cc99b3cc99b3cc
99b3cc9ab5cb8da4d55865e995aed19ab4cc99b3cc99b3cc9ab4cc9ab4cd6677c6
4d58c78ba2cb9bb6cd99b3cc99b3cc99b3cc9db7cb859bd94d57eb8195db99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cc98b0cf5662ea899ed89bb5cb99b3cc99b3cc
9ab5cc98b1cd788aca5661c7869ccc9bb5cd99b4cc9ab4cc9bb5cc9ab3cd6d7fc8
4f5ac6859acb99b3cd9ab4cc9ab4cc9ab4cc9ab4cd869bcb505ac76d7fc89bb4ce
94accd7687cc8ea5cc788cca5b67c75663c67f92cb8295cd5d6ac82a31c35764c6
6371c84f5dc57c8ecc8ca4cb93abcc9db7cd9ab4cc99b3cc99b3cc99b3cc98b2cc
95aecc8ba1cb535ec694accd9ab4cc99b3cc99b3cc9ab5cc97b0cd7788cb5f6dc7
91a6cf6776c97484cc8da5cb5460c76172c69ab4cd9ab5cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab4cc6878e47b8edf9cb6cb99b3cc9bb6cd9bb5cc9cb5ce6777c7
6a79c997afcd9bb5cc99b3cc9ab5cc9bb5cb9cb6cc869adb5460ea91a7d69cb6cb
99b4cc99b3cc99b3cc99b3cc99b3cc9cb7cb6e80e16b7ae49bb5cc9ab4cc99b3cd
9cb6cd90a8cb5360c75c6bc699b1cd9bb6cd9ab5cc98afce96aece889ecb5864c7
6a7ac892aacd9cb6cd9ab4cc9ab3ce96adcf96afcd6474c8505cc68ea4cc9eb9cd
93a9ce515dc62a31c3333ac46b7cc8889ecb95aecc7383ca4650c63942c4333ac4
5c69c799b1ce9bb6cd9bb5cd9bb5cd9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b4cc9cb6ce525fc67f93cb9cb7cd99b4cc9bb5cd9db7cd93accc5360c65462c5
899ecd5460c71f26c2272ec34e59c67182c999b3cc9ab4cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab5cb8da4d5545fea96afd09ab4cc9bb5cd899fcc8ea3ce6573c8
7182c99cb6ce9ab4cc99b3cc9ab5cc91a9d38ca2d67d8fdf535fea94acd39bb6cb
99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb91a9d34d58eb8da5d49bb6cb99b2cd
6978c97989cc5764c67f93cc99b3cc9ab4cc9ab4cc96afcd5965c74a54c65562c6
8095cb9bb5cd9ab5cc99b3cc9cb6cd7485ca3f49c54753c57788ca97b0cd9ab4cc
7c90ca4750c5242ac2272dc36372c99cb6cd9bb6cc99b3cd8da2ce92a7cf8fa3cf
879ace8ea5cd9bb5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9bb6cd778aca6775c899b3cc99b4cc99b3cd8193cd8195cb5a67c67d8fcb
8298ca515bc7636fc96673ca6b78cb899ccd9cb6cd9ab4cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab4cb9bb6cb6776e57a8dde9cb6cb9bb5cc92a8cd434cc53b42c5
6e80c89cb6cd99b4cc99b3cc99b4cc9bb4ce6573e63940ee5460e993abd19bb5cb
99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cc9eb8cb6a7ae57486e09cb7cb9db7cd
7e91cc2c32c3191fc28397cb9db8cd99b4cc99b3cc9bb5ce6e7dca282fc31f24c3
7a8ccb9eb9cd99b3cc99b3cc9cb6cd8194cc3239c41e25c2616ec99bb5cd9ab4cc
98b2cc8193cd899dcd90a6cd8ea5cc8fa8cc9ab4cc99b3cc99b3cc9ab4cc9ab4cc
9ab5cc9bb5cc9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9cb6ce94accd4c57c68ea5cc9bb5cd9cb6cd899ecd3239c41a1ec28195cb
9eb8cd96b0cc95adcd9bb4ce9bb4ce9bb5ce92a7ce9ab5cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab5cc91a8d48395dd5461ea99b2ce99b4cc9ab4cd6674c81d24c2
353dc48297cb9cb6cd99b3cc99b3cc9bb6cb8498db2b32ee252aef6978e59ab4cc
99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc8da1d96576e45e6be898b1cf9bb5cc
879ccb373fc43a43c45662c891a7cf9ab4cc99b3cc9bb4ce7b8ccb3840c45965c8
7d8ecc8ca3cc9ab5cc99b3cc9ab5cc869acd4751c64954c67585cb879ccb98b2cc
99b3cc99b3cc9bb5cd9bb5cd9bb5cd9bb5cd9ab5cc99b3cc99b3cc99b3cc9bb6cc
9bb6cd9cb6cd9cb7cd9bb5cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9bb4ce7b8ccb4c59c5788acb9cb7cd9ab4cc97aece4e59c62930c33b44c4
8fa4ce9cb7cd8ea6cc6d80c8869acd8da1ce92a7cf99b3cd99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc9cb6cc798ae22b31ef5763e995add19cb6cc8296cb3b42c5
6776c9879ccd99b2cd99b4cc99b3cc9ab4cc96aed24f5aeb525deb7789e095acd3
99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cb6271e6161af05965ea98b0d1
97b1cc6877c96e7fc893a9ce98b2cd9ab4cd99b3cc99b3cc9bb4cd7f93cb93a9ce
98b1cd9cb6cd9bb5cd99b3cc99b3cc9ab5cc879ccd869bcb98b2cd9bb4cd9cb6cd
99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9ab4cc99b3cc99b3cc99b4cc97b1cd
8399cb8298ca8197ca7f94c98ca3cb9cb6cd99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9ab5cc90a7cd454dc62025c27787cc9cb6ce99b4cd6776c95965c77a8ccb
95acce99b3cc9ab4cc93abcd6a79c9363dc53c45c4383fc499b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b4cc9ab3ce6d7ce51f26ef5866e998b0d19bb6cc788bca
8da2cd9bb5ce9bb5cc99b3cc99b3cc99b3cc9bb5cb8ba2d67a8cdf97b0d09cb7cb
9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9db6ce535fe9272eef6f7fe4
99b2cf9ab4cc9ab3ce9bb5cd9ab4cc99b4cc99b3cc99b3cc99b3cc99b3cc9bb5cc
9ab4cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cc9bb5cc99b4cc99b3cc
99b3cc99b3cc99b3cc99b4cc9ab5cc9db7cd9ab3ce95adcd9ab4cd9ab4cc9ab5cc
97b0cd6977ca3b43c5262cc31c20c25c6cc690a9cc9ab4ce9cb7cd9ab5cc99b4cc
99b4cc99b3cc9cb6cd859bcb2227c34a55c58da2cd9bb5cd99b4cc90a7cc9ab2cf
9eb8ce9ab5cc9ab4cc99b4cc9ab4cc9cb6cd7d90cb3e47c5373fc499b3cc99b3cc
99b3cc9ab4cc9cb6cd99b4cc9ab4cc95aecf4954eb5562ea97aed29ab5cb9bb5cc
9bb6cd9bb5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9cb6cc9cb6cb9ab4cc
99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb9bb5cb9ab5cb8ea4d64049ed7587e1
9db6cd99b4cc99b4cc9bb6cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
9bb5cd9bb5cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9cb6cd99b3cc
99b3cc99b3cc99b3cc9ab4cc94abce879bce7284c86471c96b79cb97afcd96b0cc
96b0cc96b0cc9ab3cd8da2ce5b68c8333bc34651c5414bc46b7aca687ac7859acc
97b1cc98b2cc9ab4cc9ab4cd6c7bca4e5ac694abce9ab4cc97b0cc91a7cf7588ca
6e7dcb8ea5cd97b1cc97b0cc98b1cd99b2cd9ab4cd9db7cd8ba0cd899dce99b3cc
99b3cc9bb6cd94aecc8398cb99b1ce9ab5cb93aad3525ceb95acd39bb6cb9bb6cd
8aa0cc92a9cd9ab4cd99b3cc99b3cc99b3cc99b3cc99b3cc9cb6cd8399ca92aacc
9ab4cc99b3cc99b3cc99b3cc99b3cc9cb6cb90a7d48da3d69bb6cb869bd97688e1
9cb6cc99b3cc9ab4cc99b2cd8aa0cc99b3cd99b3cc99b3cc99b3cc99b3cc99b3cc
9cb7cd89a0ca8aa0cb9bb5cd99b3cc99b3cc99b3cc99b3cc9bb6cd97afcd8095ca
98b2cc99b3cc99b3cc99b3cc9bb5cc879ccb5d69c92126c3232ac23139c33c46c4
3d47c43c47c43e48c4515cc76b7acb7d8dcd7e90cc94accc96b0cc8ba0cd6678c7
6b7bc94853c55763c698b0ce9ab4cc7083c891a9cca0bbcd889fcb3f48c43a42c4
262bc3252dc23741c33d47c3444fc6535fc8616eca6e7ccb7888cc95adce9cb6cd
9ab4cc9ab4cc8fa5cd5c6ac75b69c799b1cd99b4cc98b1ce93acd19bb5cc9bb6cd
768bc83f48c5889ecb9bb6cd99b3cc99b3cc99b3cc99b4cc9db6ce788bc95f6bc8
96aecd9ab4cc99b3cc99b3cc99b3cc9bb6cb91a7d6525eea8ca1d89ab5cb9bb4cd
9db6cc99b3cc9ab4cc9bb4ce6a79c97485c99bb5cd99b3cc99b3cc99b3cc9ab4cc
9cb5cd869bcc4f59c68599cc9bb5cc99b3cc99b3cc99b4cc9bb6cd879dcc5864c7
7687ca9ab4cd99b3cc99b3cc9ab5cc99b3cc8ea4cd5965c85c6ac76372c86e7dc9
8da3cb8aa2ca8aa2ca8aa2ca89a1ca89a0ca8fa5cc9cb6cd9ab4cc9ab4cc9ab5cc
9cb7cd9cb5cd8fa7cc8aa0cb7f90cd869ccc93accc8da3cc6373c85461c65663c6
5967c65b6ac75863c88599cc8ba3ca8aa1ca89a1ca89a0ca8aa1ca8ca1cd96aecd
99b4cc99b3cd7688c93a43c57f94ca9cb6cd99b4cc99b3cc99b3cc9ab5cb9db7cd
7689c8525dc78aa0cc9bb5cc99b3cc99b3cc99b3cc9ab5cc9ab3ce7585cb5f6ec7
9ab2ce9ab5cc99b3cc99b3cc99b3cc9cb6cb8fa4d8515ceb8ba1d89cb6cb99b3cc
99b3cc99b3cc99b4cc9cb4cf6978c96d7ec89cb6cd99b3cc99b3cc99b3cc9bb5cc
97b0cc6675c8515dc693aacc9bb6cd99b3cc99b4cc9ab5cc9ab3cd7b8eca4c56c6
7f94ca9db7cd9ab4cc9cb6cd9cb7cd94accd6b7bc83e48c58499cb9bb5cd9cb6cd
9cb5ce9bb6cd9bb5cd9bb5cd9bb5cd9bb5cd9bb5cd9bb5cc99b3cc99b3cc99b3cc
99b3cc99b3cc9bb5cd95acce6b7ac92f36c34b56c63d47c4616ec87c90c9859acb
9cb5ce9bb5cc9cb6cd98afcf9cb5ce9bb5cc9bb5cd9bb5cd9bb5cd9bb5cd9cb7cc
9ab5cc99b3cc4753c56474c896aecd9ab5cc99b3cc99b3cc9ab5cc9bb5cc9cb6ce
7788ca616ec898afce9bb5cc99b3cc99b3cc9ab5cc9cb6cd93abcc6270c95e6ec6
9ab3cd9ab4cc99b3cc9ab4cc9bb5cb9bb6cb899dda4f5aeb8aa0d79cb7cb99b3cc
99b3cc9ab4cc9ab5cc9bb4ce6876c86c7ec89cb6cd99b4cc99b3cc9cb5ce9db7ce
96adce5e6cc76877c993abcc9bb6cc9ab4cc99b1ce98b1ce93abcc515ec65c6bc7
97afce9bb5cd9bb5cd8ea3ce8093cc7e92ca515cc77283c998b1cd9bb5cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc9bb5cd7b8dcb3941c32c33c22b33c3343cc38fa7cb99b3cd9cb7cd
9bb5cc99b3cc9ab3cd98b1cf9bb6cb9bb5cb9ab4cc99b3cc99b3cc99b3cc9bb5cc
8ca4d595add29cb6cb869acc98b2cc9ab5cc99b3cc99b3cc9ab5cc8da2ce879ccd
6d7cca6171c69ab3ce9ab5cc99b3cc99b3cc9bb5cd8fa4ce889ecb4d59c66272c7
98b2cc9ab4cc99b3cc99b4cc97afd092a9d57e91dd4953ec889fd69cb7cb99b3cc
99b3cc99b3cc94accd98b0ce6978c96c7ec89bb5cd9ab4cc99b3cc9bb4cd7585cb
6372c94f5ac67c8fc99db7ce9ab4cc99b3cc9ab4cd6e7eca515dc65563c67e91cb
97b1cc9ab5cc9bb6cd93aace4c57c62026c24b57c58fa6cc9bb6cd9ab4cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb6cb99b4cc99b4cc
99b4cc99b3cc99b3cc9ab4cc8da5ca8096ce8398d193a8cd93a9cb9ab4cb99b4cc
99b3cc99b3cc9ab4cc90a7d55865e97889e190a6d697afcf9ab4cc99b3cc99b3cc
9cb7cc7b8ee04954ec7181e29db7ce9ab4cc99b3cc99b3cc9ab4cc98b1ce525ec7
2126c25b6ac599b3cc9ab5cc99b3cc99b3cc9ab5cc92a9ce434dc5292fc36f80ca
9ab4cd9ab4cc99b3cc99b3cc9cb6cc7688e12b31ef3b44ed89a0d59cb7cb99b3cc
99b3cc9ab4cc96aece4f5ac7535ec76d7fc89cb6cd99b4cc99b3cc9cb7cd8498cc
2d35c3191dc27889cb9db7cd99b3cc99b3cc9db7cd8699cd333ac30203c16e7ec9
9fbace9ab4cc9ab4cc92aacc4954c52a31c3353dc38092cc9db7cd99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc97afd17e92dd99b0d3
99b2d097b1cd99b3cd99b3cc99b3cc9db8cb7488df4a53ed7283e47588e08ea3d8
9ab4cd99b3cc99b3cc99b3cc9ab4cc7789df2a30ef2e35ee5f6ae993abd19ab4cb
99b3cc99b3cc9cb5cd6775e6242aef9ab4cd99b3cc99b3cc99b3cc9cb6cd7889cb
262cc3262cc37a8acc9cb6ce99b3cc99b3cc99b3cc9bb5cd6c7bca242ac22b31c3
7f92cc9cb7cd99b3cc99b3cc9ab5cb94abd34049ed262def4c57eb9cb5cf99b3cc
99b3cc99b3cc9db7cd788acb282fc31c22c2879bcc9cb6cd99b3cc9ab5cc92a9cd
4750c52c33c35d68c8879bcd9ab5cc99b3cc9bb5cc899fcb3841c44750c66877c9
859acc9cb6cd99b3cc9bb5cc6a79c96474c87b8ecb94a9cf98b1cd99b3cc99b3cc
99b3cc99b4cc9ab4cc9ab5cc9bb5cd99b4cc99b3cc99b3cc99b4cc97afd3606ee8
3d46ed444fec4d58ea93aad49bb6cb99b3cc99b4cc98b2cd7a8cdf282def1e23ef
6471e89db5ce9ab5cb99b3cc99b3cc99b4cc9cb6cd6e7de52127ef454ded8da3d7
9cb7ca99b3cc99b3cc9ab5cb92a9d44751ec99b3cc99b3cc99b3cc9ab5cc8a9fcd
4952c66270c88a9fcd96afcd9ab4cd99b3cc99b3cc9bb5cc7e92cb3c44c56573c8
8ba0cd96afcd99b4cc99b3cc99b4cc99b2ce6574e63e46ed6b7ae48ea5d69ab3cd
99b3cc99b3cc9ab5cc92a9cd4750c6454fc57485cb97aece9ab4cc99b4cc98b2cd
6a7ac96c7bca8ea4cd98b1ce9bb5cd99b3cc99b3cc9cb6cd7386c87e91cc92aacd
9db6ce9bb5cc99b3cc99b3cc99b3cc94adcd9cb6ce9bb6cc9ab4cc99b4cc99b3cc
99b3cc9bb4cd99b2ce97b0ce91a9cc8ea6ca97b1cc9ab4cc99b3cc99b3cc9ab4cb
99b2d06372e62830ef1f24f07b8de096afcf9cb6cb9ab4cc9ab4cc9ab4cd6f80e2
3036ee515dea6474e495add19bb5cb99b4cc99b3cc9ab5cb93abd26978e4798cdf
4d58eb788ddd9db6cc9ab4cc99b3cc9bb6cc8ca1d999b3cc99b3cc99b3cc9ab5cc
8399c98a9fcb9db6ce9bb5cd9ab4cc99b3cc99b3cc99b3cc9ab5cc869bcb8ba0cc
9cb6cd9bb5cc9ab4cc99b3cc99b3cc9ab5cb8fa7d36f7ee58fa6d59cb6cc9bb5cb
99b3cc99b3cc99b3cc9bb5cd7282cb6a7ac895acce9cb6cd9ab4cc99b3cc99b3cc
99b3cc9cb5ce9bb5cd9bb5cc9ab4cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb5cd
9ab5cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc99b3cc9ab4cc99b3cc99b3cc
99b3cc9bb5cc8398cb6470ca5a66c9434cc62f36c489a1ca99b3cc9bb5cd9cb6cd
9bb6cd9ab5cb9ab2cf6674e66e7ee36b7ce45661ea778adf95aed09bb6cb9bb6cb
98b1cf869bda90a8d37183e24e59eb7c8fde9ab3ce9cb6cb99b3cc9ab4cc9bb5cc
9cb6cb8ea5d55e6ce86776e590a9d19cb6cb99b3cc9ab5cb99b3cc99b3cc9ab4cc
9bb5cd9db8cd9bb5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cc9cb6cd
9bb5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9bb5cd9bb5cd9ab5cb99b3cc
99b3cc99b3cc99b3cc99b3cc9bb5cc95afcc99b3cd9ab5cc99b3cc99b3cc99b3cc
99b3cc9ab4cc9ab4cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9bb5cd
9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cc9bb5cc9cb5ce95acce9ab4cd
9bb5cc9bb5cc9bb6cd98b2cc8a9fcd5d6ac82a32c33139c43b45c44954c6798bcb
8095c98298ca98b0ce9cb6cc99b2ce9ab4cd9ab4cc8fa6d56a7ae4525deb7588df
91a9d29bb5cb9cb6cb9ab5cb9cb6cb90a7d46271e6515dea869cd998b2cd99b3cc
99b3cc99b3cc9bb5cb98b1ce6878e45460ea8ca2d799b3cc99b3cc9ab4cc9db7cd
95aecc889fcb6f7fca9ab2ce99b3cc99b3cc99b3cc99b3cc99b3cc9cb6cd899fcc
90a6ce9bb5cd99b3cc99b3cc99b3cc99b3cc9ab4cc99b3cd899cce91a9cd9ab4cc
99b3cc99b3cc99b3cc99b3cc9ab5cc8ba0cd91a6cf9ab4cc99b3cc99b3cc99b3cc
99b3cc9bb6cb90a8d38598dd9bb4cd99b3cc99b3cc99b3cc99b3cc9ab4cc99b4cc
869acc869acd9bb6cc99b3cc99b4cc9bb5cc9bb5cd90a8cb7f92cb5765c65964c9
879dcb8fa6cc8a9ecd788acc5e6dc75564c5616ec97888cd7283ca8ca3cb8aa1ca
8497cc5562c6505ec56673c97081c99cb6ce99b3cc99b3cc9ab5cb9cb6cc90a7d4
6b7be45b67e992a9d39ab5cb99b3cc99b3cc9bb5cb99b3cd849ada4e5aeb7c90dd
9bb5cb99b3cc99b3cc99b3cc9ab4cc9db7cb889ed85a65e994aad69ab4cb8ea5cc
6d7ec85863c7515dc58195ca9ab4cd99b3cc99b3cc99b3cc99b3cc9cb6cc849bc9
4f5ac692a8cd9ab5cc99b3cc99b3cc99b3cc9ab4cc99b3cd7283cb515ec693accc
9ab4cc99b3cc99b3cc99b3cc9cb6cd7e93ca3b42c68aa0cc9bb5cc99b3cc99b3cc
99b4cc9cb6cb91a7d6525eea879adc9bb5cc99b3cc99b3cc99b3cc9bb6cc95adcd
6a7ac8515cc789a0cb9ab2cf9bb6cd99b2cc869bcc6978c84049c5333ac42329c3
1f27c24f5ac76f7dcb7c8dcb7a8fc9788dc8778cc88095ca9cb5ce9cb6cd9bb5cd
9bb6cd9bb5cd9ab5cd9bb5cc95adce8da3cd9ab4cd99b3cc99b3cc99b3cc99b3cc
9bb5cb9bb6cb98afd298b1cf99b4cc99b3cc99b3cc99b3cc9ab4cc9bb5cb9bb4cf
97afd199b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cb99b1d09ab2d099b3cc
5c69c76a7cc890a7cd97b1cc9cb6cd99b3cc99b3cc99b3cc99b3cc9bb6cc879ecb
4049c5899dcd9bb6cd99b3cc99b3cc99b3cc9ab5cc98b2cd6a7bca4b57c591aacb
9bb5cd99b3cc99b3cc99b3cc9cb7cd7c91c93c44c68096ca9bb5cc99b3cc99b3cc
9ab4cc9ab4cc788bde4b56eb889fd89cb6cb99b3cc9bb5cc9bb5cc9ab4cd8499cb
4c57c67385c99bb3cf7586ca5764c77e90cc434ec46372c87385c997aece8a9ece
6d7fc96775c98fa6cc9bb5cd9cb6cd9cb7cd9cb6cd9cb6cd9bb6cd99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9ab5cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9bb5cb9ab5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb99b4cb
99b3cc95aecd9db7cd9ab4cc9ab4cc99b3cc99b3cc99b3cc99b3cc9ab5cc92a9cd
4953c6768aca9bb5cd99b3cc99b3cc9ab4cc9bb5cc97b1cc6372c84d59c592abcb
9bb5cd99b3cc99b3cc9ab4cc9cb6cd7a8fc93f48c58298cb9cb6cd99b3cc9bb4cc
9bb4cd9cb6cd6b7de24f5aeb89a0d59cb6cb99b4cc9bb4cd8295cc90a7cc6574c8
5662c78fa5cd91a8cd6472c9232bc21a21c26c7bca8ba2cb99b3cd9cb6cd9ab4cc
9ab5cc9cb7cd9db6cf9ab4cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc9bb5cc9db7cb9ab5cb99b4cc99b3cc99b3cc99b3cc99b3cc
99b3cc97b1cd8193dd92aad39cb6cd9bb6cb99b3cc99b3cc99b3cc98b2cd90a8d3
98b1cf9cb7cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9ab4cd99b1ce
5e6ac86d80c79bb6cd99b4cc99b3cc9ab4cc95acce90a7cc5b6bc65360c793accc
9bb6cd99b3cc99b3cc9ab3cd95accf7a8fc83b43c5849acc9cb7cd99b3cc9bb5cb
8a9fd96a7ae56575e66c7be599b2d09bb5cb99b3cc9cb6cd7a8ccb2c33c32b32c3
778aca99b2cd9fb7cf5a67c75661c86876cb6a78cb90a4ce9db8cd99b4cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9cb6cb9bb5cb9ab4cb99b3cc
99b3cc99b3cc99b3cc9ab4cc8da4d56f80e28ba0d89ab2d099b3cd9ab4cc99b3cc
99b3cc99b3cc9ab4cc6d7ee33f48ed6e7ee48599db9ab2cf99b3cc99b4cc9ab3ce
6a79e65b68e97789df99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cc93abcd616ec9
5e6bc87083c89bb5cd99b4cc99b3cc99b3cc9bb5ce616ec9363ec35865c795aecd
9bb5cc99b3cc99b3cc9cb6cd8296cc3f47c53b45c4859bcb9bb6cc99b3cc9ab4cb
98b1d05965e90a0ff0525fea9db6ce9ab4cb99b3cc9bb5cd8a9ecd3a41c42930c2
3840c593abcd9bb5cc99b3cd95aecc97b0cd99b2cd9ab3cd9ab4cd99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc91a9d28196da8aa1d696aed2
9cb5d09ab4cd99b3cc99b3cc99b4cc97b0d05b6ae7373eee4651eb6876e595add0
9ab4cc99b3cc99b3cc9ab4cc9ab2d05865e91e24ef3036ef8ea3d79cb6cb99b3cc
9ab4cc99b1d15561ea252bef99b3cc99b3cc99b3cc99b3cc99b3cc9bb6cd7f92cc
252bc2252cc290a5cf9bb5cc99b3cc99b3cc9bb6cd869bcc343cc41c21c27080ca
9bb5cd99b3cc99b3cc9ab4cc98b1cd5662c82128c2464fc597aece9ab4cc99b3cc
9bb5cc7586e11c22f04650ec6f7fe49cb5ce99b3cc9ab4cc95acce5763c75e6dc8
8698ce8da4cc98b1cd99b4cc99b3cc9ab4cc9ab4cc99b4cc99b4cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc
9cb6cd9db7cd9cb5cd9bb4ce9ab4cd99b3cc99b3cc9ab4cc94abd34c57eb3c44ee
545fea5965ea93aad39bb5cb99b3cc99b3cc9ab4cb9ab2d05f6ce82229ef393fee
889ed79db7ca99b3cc99b3cc99b3cc9bb5cb8da3d73e46ee404aed6a7be397b1ce
9ab5cb99b3cc9bb5cb8ba1d73b43ed99b3cc99b3cc99b3cc99b3cc99b3cc99b2ce
4d59c63239c46978ca93aace9ab4cc99b3cc9ab4cc96afcd545fc6434dc5798acb
94abcd9ab4cd99b3cc99b3cc9bb5cd788bca2c32c36270c9889dcc9ab4cd99b3cc
9bb5cb879dd8515ceb7c8fdf93aad49bb5cc99b3cc99b3cc99b4cc97b0cd8ea5cc
9cb6cd9bb5cd9bb5cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc
95acd37282e47080e4707fe56b78e695abd69db8ca9ab5cb99b3cc9ab5cb97afd0
6675e6242aef1e24ef6c7de398b0d09bb5cb9ab5cb99b3cc9bb5cb94abd45965e9
6e7ee34a55eb8195dc99b3cd9bb5cb99b3cc99b3cc9ab4cd8ba1d890a7d5606ee7
5a69e798b0d19bb6cb99b3cc9cb6cc889cdb9cb6cd9bb6cd9bb5cc9bb5cc9db8cd
798cc94953c68a9fcd9ab4cd9ab5cc99b3cc99b3cc9ab5cc8aa0cd7181ca95acce
9cb6cd9ab4cc99b3cc99b3cc9ab4cc95aecd6b7aca8297cc9ab3ce9bb6cd99b3cc
99b3cc99b4cc96afce96afd09cb6cb9ab4cb99b3cc99b3cc99b3cc99b3cc99b3cc
9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b4cc9ab5cc9bb5cc9cb7cd9ab4cc99b3cc99b4cc
9ab4cc9ab3ce8194dd4752ec1d23ef1c23ef6d7ce58197d990a8d39cb7cb9bb5cb
9cb6ca97b0cf7080e47788e16d7ee3535eeb7486e18fa7d39cb6cb9ab5cb99b4cc
98b1cf9bb5cc90a7d55a67e85f6de790a7d49bb6cb9ab4cc99b3cc9bb5cb9ab5cb
9bb4cd7b8edf5762ea869cd89bb6cb99b3cc9cb6cc5867c65f6ec78a9ecd8fa7cb
93accc93abcc92aacc9bb6cc99b3cc99b3cc99b3cc99b3cc9cb6cd9cb6cd9cb6cd
9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc9db7cd9cb5ce9bb5cc99b4cc99b3cc
99b3cc99b3cc99b3cc9bb6cb9cb6cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
9bb5cb9cb6cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9bb6cb9cb6cc
9ab4cc99b3cc99b4cc99b3cc9cb6cd9bb4ce93aacd8294cd6574c894abcd9bb5ce
9ab3ce99b2ce98b1cd9ab3cc94aad36d7ce56471e78295de4f5ce9606de85967e7
7384e28fa7d494adcf9bb4cd9cb6cd9bb6cb90a8d37384e25662ea6676e48fa7d3
98b2cd9ab4cc99b3cc9ab5cb9ab3ce7a8ede4d58eb7c8fde98b2ce99b3cc99b3cc
99b3cc99b4cc9db7cb7c92db454fec7a8edd9bb5cd99b3cc7b8fc9788cc87282cb
3a44c45864c79ab3cf9ab5cc99b3cc99b3cc99b3cc9bb5cc9ab3cd7486c990a6ce
9ab5cc99b3cc99b3cc99b3cc99b3cc9ab5cc9bb4ce7789c98fa7cc9ab5cc99b3cc
99b3cc99b3cc99b4cc9cb6cc879cda879bda9ab4cc99b3cc99b3cc99b3cc99b3cc
9bb6cb869cd88193df9ab3ce99b3cc99b3cc99b3cc99b3cc9cb6cb99b2cf7e91de
7c8eda90a6cd9bb5cd97b1cc99b2cd8194cb6471c9363dc4262dc22830c36774c9
707ecb6c7aca6a78ca6775ca626fc96b7aca96acce98b0d29cb6cb9bb5cb98b0d0
7d91db788ae04b55eb6270e79cb5cd99b3cc99b3cc9bb5cb9cb6cb95add27689e0
4751ec8ea5d59bb5cb99b3cc99b3cc9ab4cc9cb6cb93abd35967e87788e09bb6cb
99b3cc99b3cc99b3cc99b3cc9bb6cb94abd35f6de88fa5d89ab5cb9cb6cd9cb6cd
9bb5ce94accb93acca99b2cc99b3cb99b3cc9ab4cc9db8cd899fcb535ec76879c8
95adcd9ab4cc99b3cc99b3cc99b3cc9bb6cd90a7cd616ec86d7dc899b3cd99b4cc
99b3cc99b3cc9ab4cc9ab4cc7f91df505cea91a8d49ab4cc99b3cc99b3cc9ab4cc
9eb8cb7c90dd4751ec7c91dc9bb5cc99b4cc99b3cc9ab5cb9ab4cc889ed95765e5
333bda3037c85763c67585cb3f49c45460c76877c86172c66778c75d69c8363dc5
899dcc96adce95accd94accd94accc93abcb92abcb97b1cc9ab4cc99b3cc99b3cc
99b4cc9bb6cb9cb6cb95afcf94add099b3cd99b3cc99b3cc99b3cc99b3cc9ab4cc
9cb6cb93add098b1ce99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb97b1ce95aecf
99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cc98b1ce97b1ce99b3cc99b3ce
99b3ce99b3cd9eb6ce9bb3ca9ab3ca9bb5cb9cb7cb97b0cd6b7cc95562c68299cc
99b5cd9ab4cc99b3cc99b3cc99b3cc9db7cd869dca454fc66c7ec79bb5cd9ab4cc
99b3cc99b3cc9ab4cc97b1cd6979e34d59ea91a9d29bb5cb99b3cc99b4cc9bb5cb
94add07282e35e6ce893aad49bb5cb9ab4cc99b2ce9db7cb92aad36d7de53f47e0
252ac93138c2252cc23037c47a8dcb89a0ca8ea6cc9cb6ce9cb7cd9db7cd98b0ce
8ca3cb98b1cc9ab5cc9ab4cc9ab4cc9ab4cc9ab4cc9ab4cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cc9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc
9cb6cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9cb6cb9cb6cb99b3cc
99b3cc99b3cc96b0c99cb4cc9cb4cb96adcb8193cc8094ca5966c66b7bc991abcc
9bb8cd99b4cc99b3cc9ab4cc9ab3cd9cb6cd889ccc525dc6889ccd9bb5cd99b4cc
99b3cc9ab4cc9cb7cb97b1ce5867e75562e991aad19bb6cb99b3cc9ab3ce9ab2d0
92aad24b57ea5e6de697b1cf9bb5cb9bb6cb93a9d56471e77082e14f5aeb7587e1
8da4cc7a8fc77d92c97b8fc98293cc99b2ce9cb6cc9ab5cc99b3cc99b3cc99b3cc
9ab4cc9bb5cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cd99b3cd9cb6cb9bb5cb99b3cc99b3cc99b3cc99b3cc99b3cc
99b2ce7d9bdd97b2d19bb5cc9cb5cb99b3cc99b3cc99b3cc9bb5cc86a1da7c9add
9ab4cf98b2c898b2c898b2c997b0c79db4cb6e7cc92a32c2333bc37d92c99db7cd
99b5cc98b4cc98b4cc9ab4cc96afcd6371c86e7dcb5562c692a9cd9cb6cd99b3cc
99b3cc9bb5cb8ea3d88294de6171e56f7fe497b0cf9bb5cb99b3cc9cb6cc7586e1
535eea5460e98497dc9ab3cd9ab4cc9bb5cb96aed25460ea1b22ef3940ee8ea4d5
9bb6cb9ab5cc9cb6cd9cb6cd9db7cd9cb6cd9ab4cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9cb5cd9bb6cb9bb5cb9ab5cb99b4cc
99b3cc99b3cc99b4cc96abd4626fe78397dc8ca3d59bb4cf9ab4cc99b3cc99b3cc
99b3cc9ab4ce6082e7426fec7393e388a4d997b2cf9ab4cc99b3cc9bb5cb82a0d9
386bee4c76eaa1b7cbb0c5d9b6cce1a8bfd77182c71d23c2343bc35d6bc79cb4ce
99b4cc98b4cc98b4cc98b4cc9cb6cd7788cb282fc33139c38ca2cd9cb6cc99b3cc
99b3cc9ab4cc98b1cf5966e9141af06471e79bb4ce9ab4cc99b3cc9bb6cb8ca2d8
3c44ee171df05e6ce79fb9cb99b3cc9ab4cc90a8d24c59ea373eee4e59eb6877e5
97b0cf9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9ab2d06674e66778e38497dd91a6d8
98b0d099b4cc99b3cc99b3cc9bb4cd7a8ce02329ef3f48ed5f6be891aad29ab5cb
99b3cc99b3cc9ab4cb97b1d25179eb2460ef2d65ef8faad59bb5cb99b3cc99b3cc
9cb6cb7f9dde2d64efc9d8eabccadc9fafbea7b9e2414ac67b8cca859acb98b0cd
9ab4cc99b3cc98b4cc98b4cc9ab5cc8ca1cd343bc4373fc46573ca90a6cd9ab4cc
99b3cc99b3cc9cb6cb7e91de252aef343cee6978e59ab4cd99b3cc9ab4cc8fa7d3
4c57eb363eee6573e7859adb9bb5cd99b3cc9ab5cb879bdb7586e2879cd89ab1d2
9bb5cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb6cb
9cb6cb9cb6cb9cb6cb9ab4cc99b3cc99b3cc99b3cc9ab3cd8498db424aed2c33ee
292fef8ca0d99eb8ca99b3cc99b3cc99b4cc9cb5cd6d7ce42026ef383fee8a9fd9
9cb6cb9ab4cc99b3cc99b3cc9bb5cb86a4da376aee3166ee6c8ce19db6cc9bb4cb
99b3cc99b3cc9ab4ce6085e7a1a9ba9da5b45f6978b6cae49eb5d39cb4ca9cb7cb
99b3ca99b3cc99b3cc98b4cc98b4cc9bb5ce6876c96e7fca92a9ce99b3cd9bb5cd
99b3cc99b3cc9bb5cb8da5d43e46ed6676e58ca2d899b2ce99b3cc99b3cc9bb5cb
879cd96e7fe395acd499b2ce9cb6cb99b3cc99b3cc99b3cc9bb5cc9cb6cc9bb5cb
99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc92aad2
8298d8839ad8869bda8598de97afd09bb6cb9ab4cc99b3cc99b3cc9cb6cb8ba0d9
424bed343bee5562e98599da9bb4ce9bb5cb9ab4cc9ab4cb94acd16e7de57a8cdf
4e59ea6d7fe299b2cf9bb5cb99b3cc99b3cc9bb4cd8da9d991acd46a8be56687e7
8eaad39bb5cb99b3cc9ab4cc97b2d2afb5c6a9b0c199a2b3b7cbe19bb3ca97b0c8
9ab4cb98b2ca99b3cc99b3cc98b4cc98b4cc9ab5cd91a9cc9bb5cd9ab4cc99b4cc
99b3cc99b3cc99b3cc9ab4cc96aed08aa1d79cb6cd9ab5cb99b4cc99b3cc99b3cc
99b3cc9bb5cc9cb6cb9ab4cb99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb9cb7cb9ab4cc99b3cc99b4cc9bb5cb
899ed94c57eb292fef262def1a1ff08195dc90a9d193acd19cb6cc9cb7ca9bb5cb
9bb5cb8ea3d98ba0d9869cd85764e95966e8869bda99b2ce9cb6cb9ab4cc9cb6cd
9bb6cb93abd26c7ce4525eea889ed89cb6cc9ab4cc99b3cc9ab4cb9bb4cb9bb5cc
6c8de14774eb88a3d89db7cb99b3cc9ab4cc959fab98a2ad95a2afb1c5dd97afc9
98b1c99ab4cb99b3ca99b3cc99b3cc99b4cc9ab7cd98b4cc9ab4cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cc9ab4cc9bb5cb99b3cc99b3cc99b3cc99b3cc
99b3cc9ab4cc9ab4cc98b2cd99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb6cb
98b2cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cb9ab4cc98b2cd99b3cc
99b3cc99b3cc99b3cc9ab5cb9cb6cb9ab4cd8fa4d77b8ede97b0cf9ab4cc98b2cd
98b2cd99b3cd98b1d07b8ddf424aec525deb6d7ce63741ed515deb7384e26d80e0
859ada98b1cf9bb5cb9bb5cb9bb5cb9ab4cc8296da525fe95a68e88196db9bb5cd
99b3cc99b3cc9bb5cb9bb5cc869bda535fea6b7be495aed09ab4cc99b3cc99b3cc
99b3cc9bb5cb8eaad7547aea7293e296b1ce9ab4cca9b4dc9aa4ce717bbc5a64cf
5561c59cb3cd99b4ca99b3cb9ab4cc9bb5cd9ab5cd869ecb5968c7879ccb9cb6cd
99b3cc99b3cc99b3cc99b3cc9bb6cd91a9cb6a78ca90a7cd9ab5cc99b3cc99b3cc
99b3cc9bb5cb9ab3cf6e80e2889bdc9bb5cb99b3cc99b3cc99b3cc9bb5cb97b1cd
7e92dd7585e39cb5cd99b3cc99b3cc99b3cc9ab4cc9cb7cb8ea5d46272e57b8fdd
9db8ca9ab4cc9ab5cb9cb7ca8ea6d38194dd5662e93c45ed2e35ee6673e65c69e8
4551eb414cec424dec3f4aec5d6ae88fa3da8ba0d89cb5cd93acd094acd18092dd
5d6de56776e57686e39cb5ce99b3cc99b3cc99b3cc9cb6cb98b2ce7d91dc6270e7
93aad49ab5cb99b3cc99b3cc99b3cc9cb6cb94acd16f80e37e92dd9bb5cb99b3cc
99b3cc99b3cc99b3cc9cb5cb8faad26386e692add79ab4cb4653c65b69cb8ca0d6
889fcc8aa1ca9db6cd9cb6cd9bb6cc98b2cc869bcb5968c74f5bc68195cb95aecc
9ab4cc99b3cc99b3cc99b3cc9cb6cd92a9cd525ec67a8bcc98b2cd99b4cc99b3cc
99b4cc9db8cb889ed7505cea6c7de399b1d09ab4cc99b3cc99b4cc9ab5cb92aad3
6372e64f5bea8fa7d49bb5cc9bb5cb9ab4cc9bb6cb92aad26c7de34e59ea788bdf
8fa5d7869adb93acd08ea5d56575e5505cea4955ea4e5bea4851ec2b31ef7b90dc
879fd6869ed6879ed6879ed6869dd68ca4d49bb5cc9ab5cb99b3cc9ab4cc9ab4cc
9bb5cb9cb7ca9cb5cc99b1d099b4cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb6cb
9cb5cd99b3cd99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9cb6cc9bb4ce99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9db6cc9bb4cd9bb2c899b3cc9bb6cf
9bb6ce9bb6cd9eb8cd899ecc8598cc8297ca5865c64d59c57d91ca9ab4cd9bb6cd
9ab4cc99b3cc9ab4cc99b4cc9bb5cc8498cc505bc6889dcb9cb6cd9ab4cc9bb6cc
9cb6cb97b1cd7486e05661ea8195dc9ab4cc9ab5cb9ab4cc9bb6cb9bb4cd7d90dd
3840ed798cde9cb5cd9cb7ca94acd1869bd996aed17486e0505aeb7384e199b1d1
8da3d65561ea3f48ed4954eb5662ea7588df8ea5d69bb5cc9cb5ce93a9d57c90dc
96afcf9cb7ca9bb6cb9bb6cb9bb6cb9bb6cb9bb5cb99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb3c89bb3ca
9cb5cd9ab4cc9db7ce8a9ecd3b44c43038c35866c67d92ca98b1cc9cb7cd99b3cc
99b3cc99b3cc99b4cc97afce9db6ce6a7dc64752c6879dca9cb7cd99b3cc9ab4ce
8699dd889dd86271e65a67e88fa7d39db7cb99b4cc9ab3cd7485e18093de5462e8
5f6de793aad49ab4cb9bb5cb98b1cf6270e6353dee5460ea6e7ee393abd29ab3ce
7e90de343bee252cef191df07a8edf99b3ce9cb7cb9ab5cb99b3cc99b3cc9ab4cb
9cb6cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9ab5cb9bb5cb9ab5cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc98b3cf
9ab4cf9bb5cb9ab4cb9ab4cc99b3cc99b3cc99b3cc98b2ce99b4d09cb6cb99b5cc
9cb2c899b1c899b1c98497cc3239c42f36c43c44c58ca0ce9db8cd9ab4cc99b3cc
99b3cc99b3cc9ab5cc95acce5e6ac85b69c66a78c993aacd9bb6cc99b3cc9bb5cb
7d8fde2930ef2c33ef798bdf9db6cc9ab5cb99b3cc9cb6cb8194dd3239ee2228ef
7e91df98b1cd9bb5cb9ab4cc93acd16371e62228ef151af06e7de59eb8cc9ab5cb
98b0d07c8de0899cdc8a9edb8a9edb96add39ab5cb99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9bb5cb7d92db7d90de93abd296afcf9bb5cd9ab4cc99b3cc99b3cc9bb5cb
819edb547bea7595e091acd794afd099b4cd99b3cc9ab4cc94aed15f83e86e8fe2
8babdd9ab1c899b2c99ab2ce7686cb788bc88094cb8fa4ce99b2ce99b4cc99b3cc
99b3cc99b3cc99b3cc9bb5cd6c7cc91b21c2343bc490a6ce9bb6cc99b3cc9bb5cb
8fa5d73c44ee2d34ee424bed8da4d49bb6cb99b3cc9bb5cc899fda3941ee343cee
414aed93a8d89bb6cb99b3cc9db7cc6a7ae4535eea7a8ae2798cde8ca2d69bb5cc
99b3cc99b4cc9bb5cc9bb6cb9bb6cb9cb6cb9ab4cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b2ce98b2cd99b3cd99b3cc9ab4cc99b3cc
99b3cc99b3cc9bb5cb869cd74a53eb3139ee5863e97d8fe199b2ce99b4cc99b3cc
99b3cc9ab4cd6c8ce42561ef2b63ee6689e79db7ce99b3cc99b3cc9bb5cc86a2dc
3568ef2e66f098b1c998b2cc9ab5d09bb5cf9db7cd9cb6cd98b3ca9ab4cd99b3cc
99b3cc99b3cc99b3cc9bb6cd869acc2b31c34f59c76d7dca94abce9ab4cc99b3cc
9ab1d25d69ea616fe77d90de94abd497b1cd99b4cc9ab4cc96afcf6978e66f80e2
91a6d895aed199b3cd99b3cc99b3cc9ab4cc94aecf96afcf9cb6cc9cb7cb9ab5cb
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9ab5cb9ab5cb
9bb5cb9bb6cb9ab4cc99b3cc99b3cc9bb6cb7d91dd434eec5360e85d6be7798ae1
9ab3ce9ab5cb99b3cc99b3cc9cb6cb8da4d6454feb1b21ef515dea97aed39cb6ca
9ab4cc99b3cc9ab4cc9bb5cf6688e71b5df05178eb88a4d89cb6cb9ab4cb98b3cc
9bb5cb7898e02d64ef9bb3cb99b3cb99b3cd98b3cc9ab5ce99b3cc98b2cb99b3cc
99b3cc99b3cc99b3cc99b4cc9ab3ce6d7cc98093cb94acce9db7ce99b4cc99b3cc
99b3cc98b1ce8ea5d49db6cd9bb6cb9ab4cb99b4cc99b3cc99b3cc99b3cd9cb5ce
9cb6cb9ab5cb9ab4cc99b3cc99b3cc99b3cc99b3cc9ab4cc9ab4cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc94acd291a7d8
8ea2da8092de6f80e294add09bb6cb99b3cc9ab4cc98b1cf7c8fde3a42ed272fef
2e35ef869bda97b0cf9cb7cb9ab4cc99b3cc9cb7cb8a9fd95763ea6f7fe45561ea
7e92dd97b1ce9bb6cb99b3cc9ab4cb91add37b9ae07c9bdc4c76eb7796e197b1d1
9cb6cc99b3cb99b3cf7695e09cb2c89cb3c99ab1c89bb4cd9ab5ce98b2cb98b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb6cd9ab5cc99b3cc99b3cc
99b3cc99b3cc99b3cc9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc9ab5cb9bb6cb9ab4cc99b3cc99b3cc99b3cc9bb5cb899fd8
5965e9353eee2e36ee292fef6577e38da2d799b3ce98b3cd9bb6cb9fbac9899fd8
505beb7181e35a68e85864ea6f81e091a9d49bb5cc9bb6cb9bb5cc9db5d09cb6cb
8da3d65765e8505ce98ba0d79bb5cb9ab5cc9ab4cc9bb5cc9cb6cb97b1d16186e5
4f77ea8ca7d59ab4cb9ab4cc9ab2c7c1d2e3becfe1b9cbddabc3da9db7cf9ab4cc
99b3cc99b4cd99b3cc99b3cc99b3cc9bb5cc9bb5cd9ab3cd99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc9bb5cc9db6ce9ab3cd99b3cc99b3cc99b3cc99b3cc99b3cc
9ab4cb9cb6cc9bb4ce99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9bb6cb9cb5ce
99b3cd99b3cc99b3cc99b3cc99b3cc9ab4cc9bb5cb9db6cd9ab3cf99b4cc99b3cc
99b3cc9ab4cc9bb5cb9db7cc93abd38295dd6c7be496afd09db7cd9cb4cf98b0d1
96add28ca2d86f7de44953ec4751ec6171e56a7ae55461e94652eb7889e18399d8
8ca3d498afd29bb5cd97b1ce90a7d56474e55966e95e6be7859bd896b0ce99b4cc
99b3cc9bb5cb99b2cd8499db5662ea6e7ee492aad29ab4cc99b3cc99b3cc9ab4cc
9ab4cc87a3da4f79eb6c8de198b2ccabbcccb9c6d58995a2929faeb2c8e07a8ccc
95accf9ab5cd9ab4cd99b3cc9ab4cc9cb6cd8ba1cc6371c890a5cd9bb5cd99b3cc
99b3cc99b3cc9ab4cc9db7cd7f95ca616ec88fa7cc9ab5cc99b3cc99b3cc99b3cc
9cb6cb91a8d35e6ce7889cdb9ab5cb99b3cc99b3cc99b3cc9ab5cb9cb6cd6f82e0
7b8be29bb4ce99b4cc99b3cc99b3cc9cb6cb99b2ce879cd95a68e88599dc9bb5cd
9bb5cb9db7cb97b0cf8196db5c6ae7464fed2229ef323aee6271e66f7ee5707ee6
6c7ae66472e75866e86372e68ca1d892a8d69db7cb9cb5cd8da4d4859cd78397dc
5562e96271e69db6cd99b3cc9ab4cc9ab5cb9db7ca93abd18499db5260ea8fa7d6
9bb5cc99b3cc99b3cc9ab4cc9bb6cb97b0cf6e7fe27c8fde9ab6cd98b4cc9ab4cd
99b3cc99b3cb9db8cd93afd16f8de0a3b8dba8b3bb808898707786bdcad89db0d9
3f4bc49cb6cf9bb6cd9ab4cd9cb6cd91a8cb6a7ac8535fc77f94ca9bb4cd99b3cc
99b3cc99b3cc9cb7cd92abcc6c7cc95864c78095ca9ab4cc99b3cc99b3cc9ab5cb
9cb5cd778adf505beb798bdf95aecf9ab4cc99b3cc99b3cc9cb6cb8fa7d26674e6
6573e78fa7d39bb6cb9ab4cc9cb6cb9ab4cd8297db5d6ae85966e87f93dc7f91df
7383e3859ada7385e05965e94852ec7587e17687e2545fea353eee8296dc94abd5
98afd39ab3d099b3ce98b2cc99b3cc9ab4cc9bb5cb99b3cc99b3cc9bb5cb9bb6cb
9bb6cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cb9bb6cc96b5d0
96b4d099b3cd99b3cc9ab2ca9bb2ca9ab2ca9ab4cb9ab5cd97b3cf95b4d095b3cc
9ab5ce9bb3cb9bb4cb98b4cc9db8cdb1c1d0a6adb5a2b2bfafbac98591a1bac8d9
5862c47f94c99cb5cf8fa7cb9bb4ce7689ca4f5bc66b7dc896afcc9bb6cd99b3cc
9cb6cd9db6ce99b4cc859acc5864c76475c796afcc9cb6cd9ab4cc9cb5cf9eb8cb
8ba2d65764e96472e68fa6d49cb7cb99b4cc9ab5cb9bb5cb9cb6cc899fd94e58eb
6c7ee29ab4cd9eb9ca8398db7080e38397db5965e95f6ee7869bd992a8d46d7de4
2e35ee2c34ef5764e86b7be38fa6d595aecf9cb7cb9cb6cc96aecf95acd499b3cd
9ab4cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cd
97b4d097b4d099b3cd99b3cc9ab2ca9ab2ca9ab2ca99b3cd98b3ce98b3ce95b2cc
99b3cf9ab4cc97b3ca95b0c8a2b6ccb1c0cfa0adb7a8b5c2a7bbcdb9c9dba9baca
9fadd7525fc49bb3cf798acb444fc55c69c76877c88ea5cc9db7cd9ab4cc99b3cc
9bb5cd8398cc6e7dca6c7dc94853c5869cca9db7cd9ab4cc9bb5cb92a8d56370e8
6473e55662e98094dc9ab3cd9bb5cb99b3cc9bb5cb889dd98397da697ae3525eea
8ea4d79cb6cb9db7cb8599dc3a43ed2228ef5864e9899fd79bb5cc8da4d45d69e9
4a54ec4e59eb4851ec869cd89eb9c99ab5cb9ab4cc99b3cc99b3cc9ab4cc9ab4cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cd99b3cd99b3cc9ab2cb9ab2ca9ab2ca99b3cc98b3ce97b4cf98b3cd
9cb5cd99b2cb97b3cb95b1caa2b8ceb2becea4abb0afbac2a9bdd09ab4c9bad0e4
b1c7dc6976ca8396cc8497cd2329c21f25c2515ec79ab4cd9bb5cd99b3cc99b3cc
9bb5cc90a7ce464fc61920c2606dc89bb3ce9bb5cc99b3cc9bb6cb97afd15461ea
141af03d45ee91a8d59db7ca99b4cc99b3cc9bb5cb95acd34e58eb292fef616fe7
91aad19cb6ca99b3ce7e90df363eee353dee323aee798cdf9eb9ca99b4cc99b3ce
9ab1d29cb4d09bb3d19bb3d19ab3ce99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc98b2cd9ab3cb9cb5cb9db5ca9cb4c99ab2ca9ab3cb99b3cc98b2cf96aed6
9bb3cf9eb3c99ab5c797b2c8a4bbd2aebdcca1aab08e9ed291a4de99b1cf9bb5cc
9db6cb8ca2ca5461c5798acb434cc6616ec86475c78599cd9ab4cd99b3cc99b3cc
9ab4cc96adce5965c72329c3505bc77687cb99b3cc99b3cc9ab4cc91a9d15c6ae7
272def535eea7282e398b0d099b4cc99b3cc99b4cc99b2ce6270e62127ef2b31ef
7788e09cb7ca99b3cc9ab3ce7889e08b9fda95acd592abd196b0ce99b4cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cb9ab5cb9ab5cb9ab5cb9ab4cc99b3cc99b3cc
9ab4cc97b0cf6270e7616ee68190de889ada90a6d29bb5cb99b3cd99b4cb94aed1
5a67e94953ea6470e37d8ede9bafd8acbcc9a0aab5b1bdc895add84874ea4771eb
4c75ea7081c9444dc57185c78aa1ca8da4cc9cb4cf9db7cd9ab5cc99b3cc99b3cc
99b3cc9bb5cd7d8fcc7080ca899fcc94acce9cb6ce99b3cc99b3cc9bb6cb8196d9
6979e58aa0d795add19db6cd99b3cc99b3cc99b3cc9bb4cc7c8de04b56eb798ae1
8ba1d797afd099b4cc99b3cc99b3cc9bb5cb9ab5cb9ab4cb9ab4cc9ab4cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b4cc99b3cc99b3cc99b3cc99b3cd92a8d693a9d694aad692a7d896acd49ab4cc
99b3cc99b3cc9bb5cc90a7d5515ce9262dee2025ef6878e39eb8cc9cb7cd98b2cb
9cb5cc92a8d05763e7272dec3034f2868ed9a6b0b5b3bfcaa4b8ce9ab4c793aed4
4b73ea2560ee4855c5232bc2525ec897b0cd9bb6cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc9bb5cd9bb6cd9ab4cc99b3cc99b3cc99b3cc99b3cc
99b3cc9ab5cc9bb6cb9ab4cb99b3cc99b3cc99b3cc99b3cc9bb5cc8ea5d595add1
9bb6cb9bb6cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb5cc9ab4cc
9bb3cf9ab1d39bb5cc99b3cc99b4cc98b2ce7888e2373fee3037ee2b31ef6978e6
9db6cd9ab5cc9cb6cb9ab4cb9bb6cb95abd15762e8353dee3b44ed697ae48ea5d6
9cb4c99cb3c79cb2c498adce5e6aed5b5fe3494ae27d83e592a5d299b4c998b5ca
9eb7cb8fa8d6547be94b56c6434dc6889ece9ab5cd9ab5cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab4cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb
9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9ab4cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab4cc9ab5cc9ab4cb99b3cc99b3cc99b3cc9bb5cb8a9fd97685e2
5d6be74a56eb5661ea8ba1d79cb6ce9cb6cb9cb7ca9eb8cb8ca2d75865e92b32ef
5c68e94a56eb6f7fe3859bd893aad29cb7cb9db7ca92aad3899edb94add36e80e3
4e59eb606ee48ea0d0a6b8c7b0c3d29aa9c5a5afc6aeb9cf7380e04c5aea6274e4
8da5d39db6cd99b5cc96b1d1464ec7879dce9db8cf9ab4cd92aacc99b2cd99b3cc
99b3cc99b3cc99b3cc99b4cc9cb6cd92abcc97b0cc99b4cc99b3cc99b3cc99b3cc
99b3cc99b4cc9cb6cd93abcc96b0cc99b4cc99b3cc99b3cc99b3cc99b3cc9ab5cb
97b1ce94adcf99b4cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb5cc94add099b3cd
99b3cc99b3cc99b3cc99b3cc99b3cc9bb6cb95aecf93acd09ab4cc99b3cc99b3cc
99b3cc9ab4cc9db7cb95afcf91a9d295abd69cb6cc9cb7ca9db6cc98b1ce869cd8
6775e72b32ef2228ef353eee5d69e86e7de56171e55a6ae66070e58396dd91a5d9
7e90e095acd3889fd58094dd4a56ea5f6ce85e6de67a8edf99b4cf99b6ce98b5cf
9cb8cd93aad07686dc5159ea6d78e999a2c5b0b7bbafbecb9db4c89fb8cb94acd2
7687e04d59eb697be492aed399b5cf8499cb9eb9ce8aa0cc6575c74c57c599b1ce
99b4cc99b3cc99b4cc9bb6cd97b1cc798cca404ac5869bcc9cb6cd99b3cc99b3cc
99b3cc9cb6cd97b1cc7689c95964c792a9cd9ab4cc99b3cc99b3cc99b3cc9bb6cb
93aad35f6de88599dc9bb5cb99b3cc99b3cc99b3cc9cb7cb92abd06878e56f7fe4
9cb5cd99b3cc99b3cc99b3cc9bb5cb9bb5cb879dd8505cea7a8cde9db8cb9bb5cb
9bb6cb9bb5cc90a7d4788cde5561e9313aee434cec6d7fe17387de7889e1616de8
3e48ec3942ed5a67e87787e27c8ee09cb5ce95abd47d91dc7084df7285df7687e1
8092e09bb7cd99b5cb9bb6cc9bb5cc9ab4cd95aed2748add7585e394acd697b6d0
94b4cf97b4cc9db4c8aabcc9a9b7cd747dcf98a2d4adbbc69bb1c798b4cd98b4cd
9ab4ca9cb5ca94add27488e091aad799b4cd8ea4cc5f6dc7515ec67083c895aecc
9ab5cc9bb6cd9bb5cc9ab3cd8196ca5460c75d6cc78da3cc98b1cc9ab4cc9ab4cc
9ab4cc9db7cd899fcb606dc85a68c68ea5cb9bb5cd99b3cc99b3cc9ab4cc9eb8cb
7e93db444eec788cde9bb5cd99b4cc99b3cc9ab4cc9ab4cb8ba1d75966e96575e4
94adcf9ab4cc9ab4cb9ab4cc9db7cb90a8d36e7ee45561ea869bd993a9d68092de
8da4d48398db5561e95561ea2b30ef282eef2b32ef2931ef5462e9697ae38a9ddb
92a9d391aad191a9d196afcf9db6cc99b2ce99b4cc99b4cc9bb6cb9cb7ca9eb5cc
9eb6cd9bb6cc96b5ca97b4cc9bb5ce9ab1cd99b1cc9ab6ce99b7c99eb5cb99b1cc
97b5d196b5cf98b2c7a9bbcab0bec89facb3afbdc2a7bac999b3cc9ab4cd99b3cc
99b3cc99b3cc99b3cc99b4cc9cb7cb9ab4cc99b3cc525ec77c90ca94adcc9cb7cd
9cb6cc899fcd798cca8ba1cd5e6bc85f6cc7899ecb9cb6cd9ab5cc9ab4cc99b2ce
98afce93accc6c7cc9505cc67f94cb9db7ce9ab5cc99b3cc9cb6cc9cb6cb95aed0
7282e35c69e98da3d69bb5cb99b4cc9ab3cd9cb5cc9ab3ce7385e1444eec8399d9
9db8cb9ab4cb9ab4ce93a8d796afcf7486df4e5aeb6f82e09bb3cf889ed94d57eb
373fee4c57eb6270e7859bd990a8d389a0d6889ed7879add7382e396aed29db7ca
9ab5cb9ab4cc9ab5cc9ab5cc9ab4cc99b3cc99b4cc99b3cc99b3cc99b3cc99b3cc
9ab2ce9ab2ce98b4cc96b5ca98b4ca9cb3caa1b4cca2b6cc9db5c89cb6c89fb5c7
9fb5cc9eb4cf9db3cba9bbcbaab8c0a0acb3b0bfcba5b8cc9ab2cb9ab4cd99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc98b2cd9bb6cd9ab4cc
9cb6cc8ea4cd4d57c7282fc35561c78499cb9ab4cd9bb6cd99b3cc9ab4cc9ab4cd
6776c9515cc75b68c76e7ec996aecc9bb6cd99b3cc99b3cc99b3cd8093de869adb
5461e96170e696afd09cb6cb99b3cc9cb6cc7d8ee07283e25a68e86676e597afd1
9bb5cb99b3cc9db7cb7a8ddf3b43ee535fea6877e68ea6d49db7cd7789e0373eee
3239ee292fef8093de9db7cb9cb6cb9ab5cb9bb6cb9bb6cb9cb6cb9ab5cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9ab3ce99b3ce98b4cc97b4cb9ab4c99cb0c58291a48695a692a2b17d8e9b
7b8d9a90a2b18999ab8896a7a9b5c0a4aeb6b3bfc9a4b7c898b2cd98b4d199b3cd
99b3cc99b3cc98b2cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc99b3cc
99b4cc869ccb505ac71f25c2272dc38091ce9db7cd99b3cc99b3cc99b3cc9cb6cd
7486cb2b31c31b20c27687cb9db7ce9ab4cc99b3cc99b3cc9cb7cb879bdb3239ee
2f36ef7e90de9bb5cc9ab4cc99b3cc9cb7cb869adb323aee1a1ff07484e29ab4cc
9ab4cc99b3cc9bb5cb8194dc353cee2128ef5863ea9ab2cf9bb5cb9bb4ce7689e0
8ea2da91a6d893a8d898afd199b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3ce99b3ce98b4cd98b4cb9db4ca8698a89da6adafb5ba9da3a6
c9d1d5cdd3d99ca2a6adb4b7a4acb0848e97b3bfcea3b3c79cb2ca99b6d098b6cf
9ab4cc9ab4cc98b2cb98b2cb99b3cc99b4cc9ab5cb9ab4cc9ab4cc9ab4cc99b3cc
99b3cc99b3cc5261c57180ca8a9ecd879ecb96aecd9ab4cc99b3cc99b3cc9ab4cc
6b7cc9464ec64d5ac66f7ecb90a5ce9ab4cc99b3cc99b3cc9ab5cc8ea5d5434eec
282eef444dec8ba1d89cb6cb99b3cc99b3cc8ca2d6414aed3b43ed4a55eb869adb
9bb5cb99b3cc9bb6cb7c90dc4852ec515ee97687e28a9fda97b1ce99b4cc99b3cc
9bb5cb9ab5cb9ab5cb9ab5cb99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b4cd98b4cd97b4ce99b3cc9db2c67a8793e8eef0ffffff
f9fdfffcfffffffffffffffeffffffecf4f4828d979fb0c59cb0cc95abd594abd5
91aad092abd094add099b3cc99b3cc99b4cc97afd093a9d694acd292abd192abd0
99b3cc99b3cc99b3cc99b3cc9ab5cd9cb6cd9bb6cd9ab4cc99b3cc99b3cc99b3cc
99b3cc768bc88ea3cd9cb5cd9ab4cd9bb5cd99b3cc99b3cc99b3cc9bb5cd5360e9
5f6ce87d90dd95abd49ab4cd99b3cc99b4cc98b2ce6673e76c7de38a9fd89bb3d0
99b3cc99b3cc99b3cc9ab4cc91a7d48fa5d69ab4cd9bb5cc9bb6cb99b4cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc9ab4cc9bb7ca9ab7cc99b7ce9bb5cd9eb2c5868f98f1f4f4
d7d8d48586b09998ffb0aeec9a97d1aeade7eaeff788959e99afc79bb5cd7e92dd
3e45ed3239ee3a44ed4f5bea97b0cf9cb6cb9ab5cb91a9d25460ea2f36ee353eed
3e47ed99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc9cb6cd9ab5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cd
93abd298b1ce9cb7cb9ab4cc99b3cc99b3cc99b3cc99b3cc96afcf9bb5cc9bb5cb
99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9ab4cb99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc
9ab4cc99b3cc99b3cc9ab4cc96afce849cd6869fd6879fdc8192e19babd1849096
d2d3cffefef7a9a7a8c4c3fe4a49ea0908e03939dca5a7df7e8dafa1b8c799b6ca
9ab7cb91a5d65b65e92830ef2a30ef7080e28ba2d59bb5cd9db8ca96afcf7383e3
3037ee262eef99b3cc99b3cc99b3cc99b3cc9ab4cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b4cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9ab5cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cb99b4cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b4cc9ab4cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9cb7cb
99b2ce95afcf9ab4cc99b4cb9cb6ca90a9d14854ea3c46ec2932ef2830f05760e5
7b82ace9ebf5f6f5fbafadb0fffffddbdcf5797ae4706ece8d8cfc4f53cf616ee0
8198da93aed09cb7cb9ab2d06473e5768ade788bdf4b56eb6271e7798dde96afcf
9eb8cc7c8fdf6c7ce399b3cc9bb5cc9bb5cd9ab4cd90a6ce9ab3ce99b3cc99b3cc
99b3cc99b3cc9bb5cc9bb6cd96adce95adce9ab4cc99b3cc99b3cc99b3cc99b3cc
9ab4cc9bb5cc97afcf98b1cd99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb99b2cf
99b1d299b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc99b3cd97aed39ab4cd99b3cc
99b3cc99b3cc99b3cc99b3cc9bb5cb9ab3d094acd39ab4cc99b3cc99b3cc99b3cc
9bb5cb9bb6cb97b0cf91a8d59bb5cc99b4cc9ab4cc9bb6cb9bb6cb9ab5cc95add2
7b8fdd6573e76775e699b0d494aad58ca1d88196da788cdd535fe92d35ef3942ee
7481dd646ac07c7dff5454fd6361cfbebdff979ad7aaabc09c9ba7fdfefd9599ab
7582d66977e6414cee6c80e38ba3d49cb5cc9bb5cc9bb5cb99b2ce8297db6777e5
4750ec7384e199b1d19bb5cc9db7cd8ea6cb7b8eca535fc76d7dc99bb4ce9ab4cc
99b3cc9ab4cc9db7cd90a7cc6e7ec9525dc78fa5cc9bb5cd99b3cc99b3cc99b3cc
9bb5cc9ab3ce6f81c85a66c891a8cd9ab5cc99b3cc99b3cc99b3cc9cb6cb8ba3d4
4f5bea8599db9bb5cb99b3cc99b3cc99b3cc9ab5cb99b3cd6070e57888e29bb5cd
99b3cc99b3cc99b3cc9ab4cc9eb8cb8399d94b56eb8095dc9db7ca9ab4cc9ab5cb
9db7cb90a8d37487e04f5cea7482e48b9fda9bb4ce96aed1869dd68094dd505cea
424bed2025f0242bef3c44ed6a78e66f7ee56878e46171e55c6ce65a6ae66b7de4
8ea1d8a3b4c4848b8de4e4eef6f4ffdedeecc5c6ff9f9df8cbc8d6f6f7f4f0f6f8
7f8b959eb3c39ab3cc91abd27b8fde869bd99ab5cb99b3cc99b3cc99b3cc9bb6cb
9ab4cd92aad27c8edf95acd49ab4cc6777c84e59c56878c8899fcb99b3cd99b3cc
98b1cd9bb6cd93abcd6b7bc8505cc67082c990a8cc9bb5cc99b3cc99b3cc99b4cc
9db7cd8aa0cb5562c76978c892aacd9ab4cc99b3cc99b3cc99b3cc9cb7cb8ba2d6
4b56eb7789df97b1cd9ab4cc99b3cc99b3cc9ab5cb9ab3cf6473e6707fe496aed0
99b4cc99b4cc99b3cc9cb7cb94add06575e55a67e9869bd99ab3cf8ca2d897b0cf
8ba1d66878e55460ea6e7fe37f91e0606ce83037ee5e6de66472e7414cec7586e2
859bd8849bd88598dd5f6de76573e699b1d29db7cd9cb6cc9bb5cb9db7cc9cb6ca
9bb4c8a1b7caaebdcb8f979f969694e7e7e5fdffffffffffffffffffffffe8ecf0
939da68497a99cb4ca99b4cb9ab5cc9bb6ca9ab4cb99b3cc99b3cc99b3cc99b3cc
99b3cc99b4cc9ab5cc9bb5cb99b4cc99b3cc798cca95adcd9bb5cd9cb7cd9ab4cd
7384cb606fc87384c94953c67183c992abcc9bb6cd9ab5cc99b3cc9bb5cd9ab2cf
98b1cd7182c9535ec68195cb9ab4cd9bb5cc99b3cc9ab4cc9bb5cb9cb6cb8ba1d9
515deb8ca1d99cb6cb9ab4cc99b3cc9bb5cb9bb6cb92a9d35c69e97587e19db7cc
9ab4cc9bb5cc97afd29bb4cc8095db5864ea6b7be496afcf9eb7ce6a7ae5424bed
4f5aea5561ea7a8dde94add17688e1454eec2d34ee2c33ef616ee796aed299b3cc
9bb5cc9cb6cb9cb6cb9cb6cb9ab3cd9bb5ce99b4cc99b3cc99b3cc99b3cc9ab4cb
99b1c7a1b6caa7b9cb9aa8b7a4b0bb97a2ad737d889ba2a9bdc3c4c0c2c4a2a6ae
74808d8a9cad9db4c89ab3cb99b3cc99b3cc99b3cb99b3cb99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9cb7cd9ab4cc9ab4cc9bb4cd
7282ca2f37c31f25c26978c994accc9bb6cd9ab4cc99b3cc99b3cc9bb5cd7a8ccb
5560c75966c76776c991a9cc9cb7cd99b3cc99b3cc9ab4cc95add290a7d47e91de
4f5beb8fa6d59cb6cb99b3cc99b3cc9ab3cf92a9d58297d9444eec7488de9cb6cc
99b3cc9bb5cb8da3d6535eea5a67e85561e98298d99eb8cb8ca4d56371e72128ef
1c23ef6c7ae597b0d09db7ca98b2cd889cdb8ea2da899cdb7f91de93a8d69ab5cb
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
9ab1c7a2b6c8a8b8c899a7b49fadbbabbccda3b5c99dafc394a5b68f9dad8e9dae
91a2b49eb1c59fb5cb9ab5cc99b3cd99b4cc99b3cb9ab3ca9ab2cb99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cd
6675c8424ac64a55c54652c58da2ce9cb7cd99b3cc99b3cc99b3cc9cb6cd899ecd
3a42c41b21c25e6ac89db6ce9ab5cc99b3cc99b3cc99b4cc9ab4ce6472e63f46ed
4c57eb8ea6d39cb6cb99b3cc99b3cc9cb6cb7b8edf3f47ed4a53ec8196db9bb6cb
99b3cc9ab4cb99b1d15b68e92129ef2a30ef92a9d49cb7ca9ab5cc5968e75f6ce7
7c8de18395df8fa4d89ab4cc99b3cc99b3cc9ab5cb9ab5cb9bb5cb9bb5cb9ab4cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cd99b3cc
99b3cc9eb4c7a7b8c59aa6b2a0abb7aabac99cb2c899b4cf98b3ce9cb3cb9fb3c8
9cb2c99ab2cb99b2cc98b2cd99b5d098b3cf98b4cd99b3cc9ab3ca9ab2cb99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
9ab3cd7a8fca91a6cf9bb3cf99b3cd99b3cc99b3cc99b3cc99b3cc9ab4cc91a6ce
4c56c6373fc46875c97e92cb99b3cc99b3cc99b3cc99b3cc9cb6cb8599db2c33ef
2026ef6d7ce59bb5cc99b3cc99b3cc9bb5cb95acd34752ec191ff0535eeb99b1d0
9ab4cc99b4cc9ab3d06573e72c32ef5e6ae87586e196aed09ab4cc99b3cc98b2cd
99b3cc9bb5cc9cb6cc9bb5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cd98b2cb9ab4cd
9ab4cd98b2cba6b9cba3b0ba9da7b1adb9c5a1b2c498b3cc94b4d394b4d398b3cf
9bb2cb99b3cd97b4cf97b4cf96b4d096b4d098b3cf99b3ce9cb4cc9db5ca9cb5ca
9bb6cb9ab5cc99b3cc99b3cc99b3cc98b1cf9bb2d19db5cf9cb5ce9cb5ce99b3cc
99b3cc99b3cc9bb6cd9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cd
869acd7f92cb94accd99b2cd9cb6cd99b3cc99b3cc99b3cc9ab4cc95add34f5aeb
4e59eb7182e292a8d599b3cc99b3cc99b4cc97b0cf616fe6424bed6978e48ea3d8
98b2cd99b3cc9ab4cc96aed27587e193aad497b0cf9db7cc9ab4cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cd99b3cc
98b2cb9ab5ce9ab4cdacbdcd9ca6b0a7b2bea5b4c39cb1c697b3ce94b4d394b4d3
98b4cf9ab4cc9ab4ce9ab6cf99b5cf98b3d098b3cf98b3cf9ab4cd8da3d88b9eda
8b9fda899bdc92a7d89bb5cc9ab4cc9ab5cb8ea5d45661ea4c58eb505cea5764e9
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9ab4cc9bb5cc9ab5cc99b4cc99b3cc99b3cc99b3cc99b3cc9bb6cb8a9fd9
7385e198afd19cb6cb9ab4cb99b3cc99b3cc99b4cc96add26f80e391a8d49db7cc
9ab5cb99b3cc99b3cc99b3cc99b3cc9bb5cb9ab5cb9ab4cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
98b3cc9ab4cd98b2cc9cb6cea7b6c69ea5aeacb8c79db0c49bb3cc98b5d096b4cf
98b4cf93add095acd293a8d87d8fdf8b9fda9eb8cb9bb5cc99b3cd9bb6cb7e90de
3840ee2329f02228ef5e6ae991a9d297b1ce9cb7cb9db8cb8ba2d65e6ae8242bef
3037ee9bb5cd9bb5cd9bb5cd9bb5cd9bb5cd99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9ab4cc9bb6cd9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
9bb5cd9bb5cc9ab4cb99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cb9bb6cb9ab5cb
99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9bb5cb99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc9ab5cb9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
9ab4cc9bb6cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb6cb9ab4cc
98b3cc98b2cb9bb5ce97b2cb9eb8d1a2aebcabafb6aab7c79db3cc9bb7d09bb6ce
9bb6ca9fb9c86170e43740ed3b43ed3035ee5f69e87788dd8698d99ab0d09ab3cc
9cb6cc94acd46a7ae6323aee6471e7434dec5b68e8778adf8095db9cb5cd9bb4cf
6f7fe36573e67383cc7888cd7c8ccd7f90cd8699cd99b2cd99b4cc99b3cc9ab4cc
9ab5cc9db7cd94adcd869cca95adcd9ab4cc99b3cc99b3cc99b3cc99b3cc9ab4cc
9cb6cd8ba2cb94adcc9ab4cc99b3cc99b3cc99b3cc99b3cc9bb5cb94acd190a8d4
9ab4cc99b3cc99b3cc99b3cc99b3cc9ab4cb99b2ce90a6d599b3cd99b3cc99b3cc
99b3cc99b3cc99b4cc9cb7cb8fa7d38fa6d49ab4cc99b3cc99b3cc99b3cc9ab4cc
9bb6cb96aed0889fd798b2cd99b3cc99b3cc99b3cc9ab4cb9db7c995add1899fd7
98b0cf9db6cc9ab4cd98b4cd9cb6c9abbece97a0c1969dcb838de05561e9849ed9
879fd7879dd5889ed47f95d87081e23238ed272cee4a55e95967e56372e56c79e5
525ee94551eb6170e78ea3da8b9fd999b0d292abd08ea5d56879e45f6de75662e9
5c6ae794abd49ab3cd8297c98398ca8499cb8498cb889ccc98b0ce9bb5cd9cb7cd
97b1cc8da4cc6879c85b68c7525ec692a9ce9ab5cc99b3cc99b3cc99b3cc9bb5cc
95aecc7282ca5b68c794accd9ab4cc99b3cc99b3cc99b3cc9bb5cb95add35663ea
899dda9bb5cb99b3cc99b3cc99b3cc9bb5cb95add06876e67080e39bb5cd99b3cc
99b3cc99b3cc9ab5cb9ab3cd7f92dd4f5aeb8497db9bb5cb99b3cc99b3cc9bb6cb
99b2ce8398db5662ea7181e39cb6cc9ab4cc9bb5cb9ab4cc92aad07484df5a69e8
5764ea7a8bdf7c8de094afd487a0dc6372e37479e24648e31d22f02229ee3138ee
4a54eb4450ec414ded404cec515ee86f7ee38395de879bda94abd29db7ca9cb6cc
98b0d1879dd78197d98196d98ba2d69cb6cb99b4cc9ab5cc9ab5cb9bb6cb9cb6cc
8aa1d68298da95add29ab4cb9cb6cd9cb6cd9cb6cd9eb9cd9ab2cf6776c97182c9
778bc95661c75662c77386c98fa6cd9ab4cc9ab4cc99b3cc99b4cc99b3cc9cb6cd
94abcd5360c66270c895aecc9bb5cd99b3cc99b3cc99b3cc9bb6cb93a9d5545fea
8398db9cb6cc99b3cc99b3cc99b3cc9cb6cb8da5d34a55eb6273e499b3cd99b4cc
9ab5cb99b4cc9cb6cb92aad36473e65a66e98da4d59cb6cb9ab5cb9bb6cb9bb6cb
8ba1d65461e9525fe98aa0d79db7cc8397db98afd2889ed86777e44b54eb7382e1
8193df6675e72f36ee2c34ed3d48ed6c7de77887e17e85d27c85d47f8de06b77e2
4c55eb94aad898b3d097b2d097b2ce99b2cb9bb4ca9cb6cb9cb6cb9ab4cc99b3cc
99b3cc99b4cc9bb6cb9cb6cb9cb6cb9bb5cb99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9bb5cb9cb6cb9ab4cc99b3cc99b3cc99b3cc9cb5cd889dcc5560c7242bc2
353dc46170c78fa6cc95aecc9db7cd9ab4cc99b3cc99b3cc9bb5cd99b2ce9cb7cd
768ac94953c58498cb9bb5cd9ab4cc99b3cc99b4cc9ab4cc9bb6cb8ca1d8515ceb
8398d99db7cb99b3cc99b4cc9ab5cb9cb7cb8da4d54b56eb778adf99b3cc9ab4cc
9ab4cc93aad39bb3cf8196dc4e58eb7587e09ab3ce9bb5cb99b2cd7e90df869bda
7283e25460ea7f94dc98b2cd9db7cd7284e13037ee4e59eb5966e87487e096aed0
8c9fd8636fe95460eb4e57eb3b42ed859bd99bb5ccabc0cca4aeb3acbac2a4b9c7
9db2c993aacf9ab4d19ab4cf99b3ce99b4ce99b3cb99b3ca99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cc889dcb4953c64550c4
4651c45f6cc898b0ce9bb6cc9ab4cc99b3cc99b3cc99b3cc9bb5cc8ba1cd5f6cc8
6272c7606dc889a0cb9cb6cd99b4cc99b3cc99b4cc99b1d097afd27f93db444eec
8197d99db7ca99b3cc99b4cc97b0d08ba1d98da2d9525eea8b9fd99cb6cb9ab4cc
9bb6cb8fa5d74852ec5c69e95765e891a7d49bb6cb9ab4cb9cb5cc7c8ee03038ee
2e34ef6f80e297b0d09cb7ca98b0d16574e61e22f02a30ef505aec98afd29cb6ca
9ab4cc9bb2d098aed598b0d492a9d48ca2d599b1cd9db5c8a8bac9a0abb4abbbc9
9cb1c79eb4cb9ab2c99ab4cf9ab4cf99b3ce99b3ce99b3cc99b3ca99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc97afce9ab1cf
9bb3ce9ab3cd99b2cd99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cc99b2ce5a66c8
181ec2404ac49cb4ce9bb6cd99b3cc99b3cc99b3cc9cb6cc788ae0353dee3841ed
8299d89cb7cb99b3cc99b3cc9cb7cb7d8fdf3037ef4752ec8fa5d69cb7cb99b3cc
9ab4cb95add14f5bea2127ef1e23f08fa6d59cb7ca99b3cc9ab4cd8092df3137ef
2e36ee424bed98afd49ab5cb9bb5cb8da2d86e7fe37286df788cdd899ed99bb5ce
99b3cc99b3cd9ab2ce9ab3cf9ab3d09ab4ce9bb5cb9cb3c9a2b5c7a8b8c4a0acb7
a9bccb9bb2c89cb3cb99b1cb9ab3cd9ab3ce99b3ce99b3cd99b3cc99b3ca99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc
99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc97b1cc6676c8
2127c3525dc76b7bc89bb4ce99b3cc99b3cc99b3cc9ab5cb94abd3444dec262cef
4b57eb9cb5ce99b3cc99b3cc9ab5cb93aad4454eec1e25ef525ceb96aed19ab4cb
9ab4cc98b0cf5865e84a53ec5f6de77889e099b1d099b4cc9ab5cb92a9d35f6de7
7485e18fa3d992a9d398b2ce99b3cc99b3cc9ab4cd9db7cc9cb7cb9cb6cb9ab5cb
99b3cc99b3cc99b3cd9ab2ce9ab2ce99b3cf98b3cf99b3cc9bb0c5abbbc9a0aeb9
aab8c59fb6c899b3ca9ab2cb9ab2cc9ab2cc9ab2cd9ab3cd99b3cc99b3cc99b3cb
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb6cc9ab5cb
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb6cd879fca
5764c7869bcc96aece9cb7cd99b3cc99b3cc99b3cc99b3cc9ab4cd6979e5373eee
6574e6899ed99ab4cd99b3cc99b3cc9bb4ce6674e7414bec7687e28da3d69ab4cd
99b3cc99b4cc98b1d08296dc92a9d39db7cd9bb6cb99b3cc99b3cc99b3cc9ab3cd
9cb6cd9bb6cb9bb5cb9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc9ab2cb9bb2cb9ab3cd97b4d098b3cd9eb1c5b0bdc9
9daab4abbccb9ab3c898b4cd99b3cd99b3cc9ab2cc9ab2cc9ab2cc9ab3cc99b3cc
98b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9ab5cb9cb6cb9db7cc9cb6cc7283e2
8fa6d59bb6cb9bb6cb9bb5cb9bb5cc9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc9cb6cd9ab4cc99b3cc99b3cc99b3cc99b3cc9ab5cb8fa6d46c7ae6
8ea4d79bb5cd9bb6cb99b3cc99b3cc99b4cc96aed17c8fde96add29bb5cc9bb5cb
99b3cc99b3cc99b3cc99b3cc9cb6cb9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc9ab2ca9cb2ca9ab2cb97b4d096b2cda5b6ca
adb7c3a5afbca7b8ca99b3cb97b4ce98b3ce99b3cc9ab2cc9ab2cc9ab2cc9ab3cc
99b3cc98b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb5cd
9bb5cd9bb4cd99b4cc99b3cc99b3cc99b3cc95abd48da3d67e93da7b8de08599dc
7081e15c69e86371e6899fd88497dd5c69e790a5d89eb8cb9cb6cb9bb6cb9cb6cb
9cb6cb9cb7cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9bb5cc
9bb5cd9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cb9cb7ca9ab4cc99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cc9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc9ab4cb9ab5cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc
9bb5cb99b3cc99b3cc99b3cc99b3cc99b3cc9ab3c99db3c89cb5c997b4cf98b4cf
a8b9cba9b2bdabb4c3a4b6cb98b3ca98b5ce9ab5cd99b3cc9ab2cc9bb2cc9bb2cc
9ab2cc99b4cc99b5cc9bb6cd9bb6cc9ab4cc9ab4cc9ab4cc9ab4cc9bb5cd96aece
8da4cc8193cc5f6cc88fa5ce9eb8cd9cb6cc9bb5cd7687e3555fec2e35ef2128ef
3c45ed9cb7ca92a9d3444eec2f35ef2026ef2c33ee5c69e97081e36b7ce36778e3
6576e46273e45f6fe58ea5d69bb5cc99b3cc99b3cc99b3cc9ab5cb9bb5cc94add1
7a8cdf95add19ab4cc99b3cc99b3cc99b3cc99b3cc9bb5cb8ba2d691a6d79ab4cc
99b3cc99b3cc99b3cc99b3cc9ab5cb94add08a9eda9bb4cd99b3cc99b3cc99b3cc
99b3cc99b3cc9bb5cb92a8d5899fd89bb5cc99b3cc99b3cc99b3cc99b3cc9db7cb
90a8d28195dc98b2cd99b3cc99b3cc99b3cc99b5cc9db8cb99adcb7c8fde94add5
9fb3caafbbc9a0a9b1abc0d09eb6c898b2cd8aa2d7788ae09cb6ce99b3cc99b3cc
9bb4cc9db7cd96b0cc93abcd7284ca7486cb8ca3cc98b2cd93accb95aecc869bcb
4d56c72b30c42027c22c34c35e6bc87080c96a7bc86778c76979c74852d02a31e1
3a42ed7484e399b3cc99b4cc9ab2d18498db6b7ae53e47ed8193df90a5d7889cda
8194dc798cde7083e07082e093abd29cb6cb9ab4cc9bb5cb9bb6cb8fa6d57284e2
424bed7486e197b0d09ab4cc99b3cc99b3cc99b3cc9db8cb8297da4b55ec8ea4d7
9ab5cb99b3cc99b3cc99b3cc9bb5cb96afd05461e97e90e09bb5cc99b3cc99b3cc
99b3cc99b4cc9cb7cb7a8fdc464eec8196da9bb5cb99b3cc99b3cc9bb5cb99b3cd
7a8dde545feb7d8fdf9ab4cc9ab4cc9ab5cb9cb6cb94add2768ae0444cea7083e4
98b1d2a5b4c7b3bbc2a8b4b7a0b8d57c91dc5864e8505cea7f92de95abcf9ab3cd
9cb6cd8aa1cc798dca535fc63139c32d34c32b32c3606dc85c68c8343dc3444ec5
6a78ca6f82c87184c76877c9424bc68092cd8ea3ce869acd7f92cc778aca7185c7
7588c88ba0d697afd299b3cc99b3cc99b4cc9bb6cb9bb4cd92aad299b3ce9ab5cb
9ab5cb9bb5cb9bb6cb9cb6cb9cb7ca9cb6cc899dda93a9d489a0d66271e65b68e9
7183e191a9d29bb5cc9ab4cc99b3cc99b3cc9ab4cc9cb6cc8195dd5864e992a8d5
9ab4cc99b3cc99b3cc99b3cc9bb5cb97afd15966e87e90df9bb4cd99b3cc99b3cc
99b3cc9ab4cb9db6cd7689e05560ea879ed79bb6cb9bb6cb9bb5cb9db7cb8aa0d6
5b69e85b69e88ca3d59eb8cb90a7d599b1d191a9d37384e25562e96679e290a6d0
9db6cd90a5d8747de5969dcb7077df5662e96371e68aa0d895aed08497cb4a54c6
6876ca5361c65e6cc76574c86573c85863c7454ec62127c26370c98ea6cc8ea7cb
90a8cc9ab3ce9db7cd9db7cd9ab3ce93abcd9ab3cd9ab5cc9ab5cc9bb6cc9bb6cc
9cb6cd9cb6cc9ab5cb99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb99b3cc
99b3cc99b3cc99b3cc99b3cc9ab4cc9db6cc7a8ddf333bee525deb4f5bea8094dd
96aed19cb6cb9ab5cb99b3cc99b3cc9ab4cc9db7cb95afcf6e7ee45664e996aed1
9bb6cb99b3cc99b3cc9bb5cb9bb5cb96add35763ea8295dd9db7cc99b3cc99b3cc
9ab4cd9cb6cb93abd16a78e66271e699b1d19bb6cb9ab4cc7b8edd859bd96879e4
5662ea8094dc9cb5cc9db8ca879cd9444dec5e6be95561ea7384e18fa7d29ab8c7
9cb6c9899adb4851ed2d31f14a4de68693dc8fa3d19fb9cb97afcc6373c7262bc3
151bc25461c6869bcb98b1cd9bb6cc9cb5ce9ab2cf8da4cd8398ca91a8ce9bb6cd
9bb5cc9ab5cc99b4cc99b3cc99b3cc99b4cc9ab5cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b4cc97afd07283e2292fef2b33ee4a53ec92a9d4
9db7ca9ab4cc99b3cc99b3cc99b3cc9bb5cc8fa4d88094dc5563e75866e894add0
9bb5cb99b3cc99b3cc98b2cd899fd790a6d75561ea8196db9db7cb99b3cc99b3cc
9cb6cc8396de7789e04d5aea6576e499b3cd9ab5cb9cb6cb8397dc363eee3841ee
6a79e493abd19cb7cb9bb5cc7f93dc3b43ed262def363cee889ed79cb7cb9ab5c9
97b3c96f81e23438ef2d34ee363bee7a83dcaec2cd9eb4c79bb5cb7e91cb6d7bc9
7383ca7181ca8496cd9db7ce99b4cc99b3cc99b3cc99b4cc9bb5cc9cb6cd9bb5cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc9ab4cc9ab4cc
9ab4cc9ab4cc99b3cc99b3cc99b3cc9bb5cb859ad95867e77385e18597dd8fa4d9
99b2ce99b3cc99b3cc99b3cc99b3cc9ab4cc96aed14e5aeb1c21f06f7de599b2ce
9ab5cb99b3cc99b3cc9bb6cb899eda3e46ed4851ec8196db9db7cb99b3cc99b3cc
9bb5cb8fa5d63e47ed181cf07080e39ab4cc9ab4cc9ab4cc8ca0d93e46ed2128ef
474fed92a7d79bb5cb9bb5cb8aa0d65a66e95a6ae76979e38294de98b0d099b4cc
99b4ca97b4ca8ea5db95a4d39babd09cabcaa7b6caa1b8cc9cb1c999b3ca97b2cc
9db6ce9db7ce9db7ce9cb6cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b4cc97b0ce95aecf
96b0ce96afcf97b0ce99b3cc99b3cc99b3cc99b3cc9ab4cc9bb6cb9bb6cb9bb5cb
9ab5cb99b4cc99b3cc99b3cc99b3cc99b3cc9bb5cc7384e22026ef3840ee7585e2
9ab5cc99b3cc99b3cc9ab4cc9ab3cf5c69e81a20ef424aed8fa6d59bb5cb99b3cc
99b3cc9ab3cf5f6ce82a30ef434dec7a8cdf9bb6cb9ab5cb91a9d2525dea7585e3
8599db8da3d59ab3ce99b3cc99b3cc99b2ce9bb3d09cb6cb9bb6cb9bb5cb99b4cc
99b3cc99b4ca97b4c897b3cea1b2c9b2c0cca0b1b5afc3cd9ab3c99bb0c99ab3cc
9ab5cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9cb6cc9fb9ca7b8de0
3a43ed5460e94b57ea6c7be59eb7ce9bb6cb9ab4cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cb8599da343bee6d7de48ca1d8
99b3ce99b3cc99b3cc99b3cc9bb5cc7587e02f35ef6876e6889dda9ab3ce99b3cc
99b3cc9cb7cb7e91df5561ea7e91dd98afd29ab4cd99b3cc99b3cc98b2cd97b0ce
9bb5cc9cb6cb9bb5cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b4ca95b2c698b3d2a4b4cfb0bac6a3b3b7a7bfcb98b1c99cb0cc
9ab4cd9ab5cd99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc5f6de7879cd8
92aad28397dd3f49ed282fef3037ee7283e38aa1d594add19db7cb9bb5cb9ab4cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc93aad48da3d69cb6cc
9bb5cb99b3cc99b3cc99b3cc99b3cc9ab4cc6879e3869bd99bb5cd9bb6cb99b3cc
99b3cc99b3cc9ab4cc94add097afcf9cb7cb99b4cc99b3cc99b3cc99b3cc99b3cc
99b4cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3ca98b4c898b1d1a8b8d4adb5bfa9b9bb9db8c69ab1ca
9cb0cd9ab4cd99b4cb99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc8398db
5965ea5866e97a8ede8ca1d95e6be8798ce07e92dd4853eb5e6be86677e48498db
96afcf98b2cd99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cb9cb6cb9db7cb9cb6cb
99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9bb5cc9db7cb9bb5cb99b4cc99b3cc
99b3cc99b3cc99b3cc99b4cc9cb7cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9bb5cb9bb5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab5cb9cb6cc
99b3cc99b3cc99b3cc99b3cc99b4ca99b5ca9ab2d1abbbd6a5adb6acbcc09ab6c8
9bb3ce99afcd9ab2cb99b3cb9bb6cb9cb6cc99b3cc99b3cc99b3cc99b3cc99b3cc
99b3cc9bb5cb9cb7cb9ab4cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cb9cb7cb
9bb5cc99b3cc99b3cc99b3cc99b3cc99b3cc99b3cc9ab4cc9cb6cd9ab4cc99b3cc
9cb6cd9ab3d0859adc6171e75562e99bb2d39cb6cc9cb6cb98b2cd92aad37183e0
6978e5434cec8ca2d89fb8ce9bb6cc9bb5cb9bb5cb9bb4ce8399d9778bdd7a8be2
93abd29ab4cc99b3cc99b3cc99b3cc99b3cc9cb6cb8fa5d78aa0d99ab4cc99b3cc
99b3cc99b3cc99b3cc9ab4cb98b0d1899cdc99b2ce99b3cc99b3cc99b3cc99b3cc
99b3cc9cb7cb859cd8889ed99bb5cc99b3cc99b3cc99b3cc9ab4cc9cb6cb8da3d6
7d90df98b1ce99b3cc99b3cc99b3cc99b4ce9ab5d09cb3c9aebece9dabb7abbdcd
99b3cc98b3d299b4ce9cb6c89bb4ca8095da8194de9cb5ce99b3cc99b3cc99b4cc
9bb5cb9cb7cb89a0d67789e094acd29bb5cb99b3cc9ab4cc9bb6cb9bb6cb8ea5d4
798bdf889cda9ab5cb99b3cc99b3cc99b3cc9ab5cc9cb6cd94accd7c8fca98aed0
9cb6cd
grestore
grestore
showpage

%%EOF

%%EndDocument
 @endspecial -568 1061 a
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 39.83366 138.56471 } PutCoor PutBegin  end
 -568
1061 a -801 1294 a @beginspecial 0 @llx 0 @lly 56 @urx
56 @ury 560 @rwi @setspecial
%%BeginDocument: /media/krell/Kiki/patchysLibrary/Documents/Thesis/so_seagrassMap.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: jlibeps 0.1, https://sourceforge.net/projects/jlibeps/
%%Title: LaTeXDrawPicture
%%CreationDate: Sat Nov 24 22:15:18 CST 2018
%%BoundingBox: 0 0 56 56
%%DocumentData: Clean7Bit
%%DocumentProcessColors: Black
%%ColorUsage: Color
%%Origin: 0 0
%%Pages: 1
%%Page: 1 1
%%EndComments

gsave
-0.0 56.0 translate
1.0 setlinewidth
10.0 setmiterlimit
0 setlinejoin
2 setlinecap
[ ] 0 setdash
gsave
100 100 8 [1.7638888888888888 0.0 0.0 -1.7638888888888888 0.0 0.0]
1.0 1.0 1.0 setrgbcolor
newpath
0.0 -0.0 moveto
56.692913 -0.0 lineto
56.692913 -56.692913 lineto
0.0 -56.692913 lineto
0.0 -0.0 lineto
closepath
fill
newpath
0.0 0.0 0.0 setrgbcolor
{currentfile 3 100 mul string readhexstring pop} bind
false 3 colorimage
2f43373044382f43382e42372a3e352a3e352b3e382b3e3a2a3d39293c38283b37
273a36283835273832273832263731263633263633263633263633253534253534
253534253534263635273736283838293938283b35283b35293d342a3e352e4237
33473c384c403b5041405544465b4a4d624f4f64514c614e4b614c4e644f546751
576a4e4e5f3f4353364252354b5b3e55654a58684d58684d5464495c6c525f6f55
5a695254634c52614a4e5d464759433d4f3f2b4031283d2e2c4132273c2d283c30
32463a384c41475b50384d4431463d374c433a4f4631463d283d36253a312b4135
2d433632463a354b3e344a3d304737314838354c3a3e55433d54423b523e39503c
39503c3a513d3b523e3c543e38503a3a523a3c543e3e563e405842405840405840
40584031453933473b31453a2c4035263a31283c332a3e352b3e38293c36283b35
283b35283b37283835283835273734263633253532253532253532253532253532
2535322535322636332737342838352a3a392b3b38263933283c33293d32293d31
2e4334354a3b3b503f3c513e3a503b3d533e3e543f3f5540445a454b614c4f6550
50634d4d5f4757674d57674c5262474d5d4245553a4b5b406070555a6a4f5c6c4f
5c6c4f5c6c4f5c6c4f5c6c4f57674a51614650624c3f503e2b3c2c394a3a283a2a
293b2d2f413337493d44564a465a4f44584f3b4f46354a413449402f443d283d36
2a3e352c403530413732463b364a3f394d41384d3e364b3c384f3d374e3c3b523e
425945425b453c553f364f39334c363c543e3e56404057434058423f56423e5640
4058424159432e42363145393044392d4136283c332a3e352b3f362b3f36293d34
273b32273a34273a34283835273734273734263633263633263633273734273734
2838352838352838352838352939362a3a372c3c392c3d37293d342a3e332f4337
354a3b3a4f3e3e5340425843445a434a6049455b44465c454d634c50664f4e644d
506651586b5551634b58675056664c55654b55654b4e5e444d5d4259694e5e6e51
5d6d505d6e4e5f70506172526071515f704e5f6f525c6b54505f4c404f3c4a5847
3748363546362f40302e3e3130423435473b374b40364a4132473e31463d31463f
30453e2d3e362f403832433b35463c35493e364a3e364b3c364b3c364d3b354c3a
374e3a3c533f3e57413d56403e583f425c434057433e55413d54403e5541415844
425945425a444058422c40342e42362e42372e42372a3e352c40372d41382c4037
293d34263a31253832253832283835273734273734273734273734283835283835
2939362b3b382a3a372a3a372a3a372b3b382c3c392d3d3a2d3e382e42392c4035
2f4337394e3f405544415643475d484f654e4e644d455c42475e44536a50556b54
4d634c4e644f5b6e58596b535b6d5357694f586a505f7157586a5050634753664a
5e71535a6d4f5b6e506073556073535c6f4f5e715165785a5e6e545e6d58576651
5f6e5b4f604d4d5e4c344734293b2b243628283a2e2c40353044392f433a2e4239
30453c364b4230413932433b35463c36473d33473c32463a34493a384d3e334a38
344b39384f3b3d54403d56403c553f405a414761484259453d544039503c3b523e
405743445b47425a443f57412f43372e42362d41362d41362c40372e42392e4239
2c4037293d34263a31243731243731273734273734273734273734283835293936
2a3a372a3a372a3a372a3a372a3a372a3a372a3a372b3b382c3c392c3d3732463d
2b3f332b3f33354a3b3c51403e543f465c47526851465d43445b41485f4550674d
5268514f654e506651576d565a6c545c6e5457694f57694f5f71575b6d53506347
5063475d7052586b4d5a6d4f5f72545d7050566949576a4a5f72545a6a4f637359
63725b68776061735d667764445743394c392f41312c3e302a3e322d41362c4035
2a3e352d423935494035463e35463e36473d35463c2f43372e42363348393b5041
314836364d3b3e5541435a463f584239523c3852393d56403f56423b523e384f3b
39503c3d54404057434058423e564034483c2f43372b3f342b3f342d41382e4239
2e42392d4138293d34263a31243731243731273734273734273734273734283835
2939362a3a372a3a372838352838352838352838352838352939362a3a372b3c36
3044392d41352f4337384d3e3e53423f5540455b464d634c445b414c634751684c
4e65494f664c556c52566c5553695255674f5a6c5254664c52644a576a4e54674b
4d60444f62465a6d4f586b4d5a6d4f6073555f7254586b4d576a4a5b6e4e5a6d4f
6275595f71575c6e545e705870826a5366505669554457443b4d3d3045362c4034
2a3e32293d322c4035304439394a4037483e35463c34453b2e42362c4034334839
3d5243344b39384f3d3e55414158443b543e344d37334c3637503a3a513d3b523e
3b523e3b523e3c533f3d54403f5741415943364a3e2f43372a3e33293d322b3f36
2d41382e42392d41382a3e35273b32263933263933283835273734273734273734
2737342838352838352939362636332636332636332737342838352939362b3b38
2c3d372c4035314637394e3f405544465b48475d48465c45465d43475e42536a4e
566d514c63474a6147536a50556b544d644a566a4f5d6f55596b5153654b576a4e
56694d52654954674b596c4e596c4e5c6f516073556275576174565e71515b6e4e
6275556376585a6d4f4c5f435164486a7c6252664d687b655265514c5f4c3d5241
2f4435283d2e2a3e322d41352c40353a4b4135463c35463c37483e32463a2d4135
3146373a4f4039503e374e3c384f3b39503c364f3a334c36364f393c553f384f3b
3b523e3d54403e55413d54403d54403f5741425a4434483c2d4135283c312a3e33
293d342b3f362d41382d41382b3f36293d34283b35283b35283933273832273832
263731263731263731273832273832273832273832273832293a342a3b352c3d37
2e3f392f40382a3e3234493a3a4f403c5140415643495f4a4a6049445b414a6145
51684b536a4d4d64474a61454e654951684e4f664c596d526074585b6f53566a4e
5c70545d7155566a4e566a4e586c505b6f53596e4f576c4d5c71526277585e7354
5469485c6f4f5e7151576c4b495e3f4d624360745843573c63775e586b555d705c
5366533b4d3d2c3e2e2e40323143352e403436483c32443835473b3c4e423a4e42
32463a2f443533483939503e354c3a354c3a374e3a37503b37503b39523d3d5641
364d39374e3a39503c3b523e3d54403e55413d553f3c543e3145392a3e32273b30
2b3f34283c332a3e352c40372c40372b3f362a3e352a3d372a3d37283933283933
273832263731253630253630253630253630283933283933293a342b3c362d3e38
2f403a31423c32433b2b3f33344938354a392e4330344a35455b444c6349465d41
4e65484e654850674a52694c4f664a4e654952694f5a715555694d5b6f53566a4e
53674b5c70545e725654684c506448596d515c7054566b4c4d62435267485e7354
596e4f495e3f4e61415569465a6f4e51664554694a5d725334482c54684d5b6f56
6a7d676578644659462f422f2f422f3244342e40323244382f413535473b415347
40544835493d2d42332d4233364d3b344b39364d3b3d54423e57423b543f38513c
38513c334a36314834314834364d393c533f3d544039513b344c362f43372c4034
293d32293d322a3e352a3e352a3e352a3e35293d34283c33263933263933283933
283933283933283933273832273832263731253630293a34293a34293a34293a34
2b3c362d3e382f403a31423a3a4f40364b3a364b3a3e5340465c474a60494d6448
50674a51684b506848526a4a546c4c50674a4b62454e6549566d515b6f53586d4e
54694a52674852674854694a55694d566a4e566a4e566a4e55694d53674b566a4e
596d51566a4e5166474d62415368475166455368474e63444f6445566a4e43573c
465a3f5b6f56697c665d705c4255413144303142303647373244362e4034334537
3e50423b50412f44352a3f302f44353a513f3b5240384f3d344b39354e3b3c5542
3c554238513e374e3a384f3b39503c384f3b364d39364d3939513b3b533d2d4135
293d31263a2f25392e283c33293d34293d34293d34293d34293d34283b35273a34
283933283933293a34293a34283933273832273832263731293a34293a34293a34
2a3b352b3c362e3f3930413b3142383247383045323449363e543f465c45496046
4d6448516949546c4c526a4a546c4c556d4d52694c4d64474f664a546b4e576c4d
5a6f505d72535e73545b7051586d4e55694d54684c52664a54684c53674b53674b
576b4f5c70545b6f53566a4e485d3e495e3f465b3c4f644550654652664a5c7054
4d6145586c515e725762765d5d7158556852495c463b4d3730412e2d3f3135473b
36483a3244363348393b5041394e3f2f4435314836334a38324937314836344d3a
3a53403c554238513e364d39384f3b3a513d39503c374e3a374e3a39513b3b533d
3044382b3f33283c31283c31273b32283c33283c33293d34293d34293d34293c36
293c36293a32293a32293a322a3b33293a32293a32283931273830293a32293a32
2a3b332a3b332c3d352f403831423a3243392f4435314633394e3b435944485e47
4960444c6346516949546c4c536b49536b49566e4c566e4e536b4b536a4d556c4f
566e4e5a72505e76565f77575b7353576f4f556d4d546c4c4d64474e65484e6548
4e654852694d576e52556c5050674b4e6548475e4141583b4c63464b62454a6145
566a4f4d61465d71565c70555b6d535d6f5560725a5b6d55495b43374933304232
3446383244362f41333348393e53443b5041304536314838334a3a344b3b354c3c
37503d3d56433e57443b5441374e3a39503c3a513d3b523e3a513d39503c3a523c
3b533d32463a2d41352a3e332a3e33283c33283c33293d34293d34293d34293d34
283b35283b35293a322a3b332a3b332a3b332a3b332a3b33293a32293a322a3b33
2a3b332a3b332b3c342d3e3630413932433b34453b344938384e394258434c624b
4e654b4b62464c6346516949526a48526a48536b49566e4c5971515a7252597053
5870505c74525a7250566e4e546c4c536b4b556d4d5870505a72524f66494f6649
4d64474a61444c63474e65494b6246455c4052694f4a614742593f4d644a496046
42593d52664b506449576b505a6e535c6e545b6d535c6e545c6f53586b4f51634b
4053403345372e403236483a394e3f34493a304536324738344b3b364d3d374e3e
3950403a53403c55423d56433c554239503c3b523e3c533f3d54403d54403d5440
3d553f3d553f2f43372a3e32273b30283c312a3e352a3e352a3e352a3e35293d34
283c33273a34263933293a322a3b332a3b332b3c342b3c342a3b332a3b332a3b33
2b3c342b3c342b3c342c3d352e3f3731423a34453d35463c364b3a3c523d465c47
4f654e51684e4e65494f6649526a4a546c4a546c4a546c4a566e4c58704e5a7250
5a72525870505e7654576f4d4f67454d6543506848556d4d5971515b7353546b4e
536a4d50674b4c63474c63474d6448485f4341583e465e46425a444157404d634c
485e47445b415a6e555d7158596d525a6e53586b4f53664a56664b5d6d50637356
62745a566955455747384a3a3749393348372d42312e4334364b3c314838324939
354c3c384f3f3850403951413a52423b54413d54403d54403e55413f5642405743
4158444159434058423145392b3f33293d322b3f342b3f362b3f362a3e352a3e35
293d34273b32263933253832283931293a322a3b332a3b332b3c342a3b332a3b33
2a3b332b3c342b3c342c3d352d3e362f403832433b35463e37493d354a39394f3a
4258414c634951684c50674a526a4a556d4b566e4c58704e576f4d546c4a546c4a
576f4d576f4f566e4c58704e556d4b526a48526a48546c4c566e4e576f4f566e4e
586f52576e51546b4f50674b50674b51684c4d6448465d43405743415844415643
4c624d485e49485e475d705a5d71585c705554684d4b5e42475a3c5060435b6c4c
5f7050596c5060715e5e70604e6050354737283d2c2f4433384d3e384d3e304737
304737334a3a384f3f3951413951413d5545415a474057453f56423e55413f5642
415844435a46435b45435b4534483c2d41352b3f342d4136293d34293d342a3e35
2a3e35293d34283c33273a34273a34283931283931293a322a3b332a3b332a3b33
2a3b332a3b332b3c342c3d352c3d352e3f3730413933443c36473f384a3e394e3d
394f3a3e543d485f454f664a51684b526a4a546c4a526a48576f4b576f4b526a46
506846546c4a59714f59714f536b49566e4a58704e566e4c526a48506846516949
546c4c566d50566d5052694d4e65494e65494f664a4b6248445a43445b49455c4c
415848485f4d485d4a4b614c596c564d614855674d5163494a5d41485b3d516144
5a6b4b5b6c4c5467495a6b586173635a6c5c4254442e43322f4433374c3b3a4f3e
324939314838344b3b384f3f3850403850403c5444435c494158463e55413c533f
3c533f3f5642425945445c46445c4632463a2b3f33283c312a3e33273b32283c33
293d34293d34293d34293d34293c36293c36273830273830283931293a322a3b33
2a3b332a3b33293a322c3d352c3d352d3e362e3f3731423a34453d374840384a3e
4156433d533c3f553e485f454f664a51684b516949526a484b6341526a48546c4a
4f67454e6644556d4b5d755360785651694558704c5b7351556d4b4a6240465e3c
4d6545566e4e536a4d52694c4e6549496044485f43475e4242593d3b513a445948
445b4b3e5342455a49495e4b5167525a6d594558424c5e4653654b586a50576a4e
56694d5a6d4f6070535e715550624c526552596c595669564154412a3f2c2b402f
3b503f34493a304737314838344b3b324a3c30483a344c3e3c54444059463d5641
39523d39523d3d5440415844435b45445c4636483c3143372f40363041372c3d33
2c3d332d3e362c3d352c3d352b3c342a3b33293a322a3b332a3b33293a32293a32
293a322a3b332a3b332b3c34293a3030413734453b324339304137304137304137
2f4135374a363e52393f533a43573c51654a55694d53674b576c4d5a6f505c7152
5e73545d725354694a4e6344556a4b6176555e74505d734f546948586d4c5f7453
4f6443475c3b5b704f536849485d3e576b4f4c60443f533743573b4054384e6249
4659453a4f3c3c4f3c405340425541495c484d604c455844485b4551644e4e614b
475a444d604a54684f586a5260725a5d6f593f513b4d5f495c6f59677a66425541
354835263b2a384d3e3c514233493c374d40364e4131493c3a5245374f41385342
3e5946405c463a564039523d3d5641415a45425b4636483c3244382f4036304137
2c3d332c3d332c3d352c3d352c3d352c3d352b3c342b3c342b3c342b3c342b3c34
2b3c342b3c342c3d352c3d352d3e3628392f2e3f3532433931423831423836473d
3b4c423d4f4140533f45594042563b475b4055694e5a6e53586c505a6e52516549
54684c5a6f505b705154694a4c61424d624354694a485d3c5e7450596e4d485d3c
506544596e4d566b4a556a49506546485d3e5165494a5e42475b3f485c403e5236
4b5f444b5e4842554140533f3e513d394c383f523e4659454356424255414a5d49
4659454255414a5d494f624e4f624e5366504b5d454a5c444759415c6e56556751
5f725c4a5d49394c393648383b5041384d3e3d5346354b3f284033344b413b5346
3853423c59453f5b453b574139553f3d5943445d48455e4936483c3244382f4135
2f41352b3c322b3c322c3d332c3d332c3d352c3d352c3d352c3d352d3e362d3e36
2c3d352c3d352d3e362e3f372e3f352f40362f403633443a3345392f41352f4135
36483c3d4f43405242435640475b4044583d4a5e43586c515c7055596d515d7155
54684c566a4e596e4f5b7051576c4d5166475065465368494358375d72515b7051
475c3d4b60415c71525e7354586d4e43573b495d4151654a51654a5b6f5452664b
3b4f3443573c46594341543e43564041543e384b353a4d3741543e40533d41543e
485b4544574142553f495c464b5e48475a44495c464759414c5c4248583e54664c
4f6149697b655e6f5c4e614e4c5f4c394e3d24392a32463a4155493c5245374d41
273f313752413c57443e59463c57443e5742425b46465f4a48614c34463a314337
2f41352e40342b3c322b3c322b3c322c3d332c3d352d3e362d3e362e3f372d3e36
2d3e362d3e362d3e362e3f372f403630413730413730413734463a34463a304236
2f413536483c3e504441534342553f495d424b5f4451654a5b6f545a6e53586c50
6074585c70545a6e52586d4e576c4d566b4c576c4d596e4f5c715252674854694a
556a4b54694a52674850654654694a5e725645593d53674c51654a51654a607459
55694e42563b4f634a485c434558424b5e484c5f4941543e3e513b3d503a364933
3a4d3742553f40533d3f523c465943475a444659434d5f4757674d46563c4e5e44
4a5a4059685153654d60725c586956495a474e614e415343394e3d36483a334839
3e5344384f3f39523f3a55423c57443c57443e5742415a45455e4947604b314335
3042342e40342d3f332c3d332c3d332b3c322b3c322c3d332d3e342e3f372f4038
2d3e362d3e362d3e362d3e362e3f352f40363041373143372a3c3030423634463a
33453736483a3d4f41455749485a4a4457414e624755694e5a6e535d715555694d
52664a5d7155566b4c556a4b536849526748546948576c4b5a6f4e5b70515a6f50
4e62465064485b6f5355694d485c404d61455d715653674c5f735a4f634a4a5e45
576b5250644b50644b667a615a6e5553674e5569505569504c6047485c4344583f
394d343549303d51383d51383d513841553c42563d465a4153654d5d6d534d5b41
52604646563b4f5f454b5a435b6a5354634e4a59445f705d5566533e513e2f402e
3346334658484055443a513f39523f3b54413d56433f5642405743425945445b47
2f41333042342f41352e40342e3f352d3e342c3d332b3c322c3d332d3e342e3f37
2f40382d3e362d3e362d3e362e3f372f403630413731433732443831433737493b
3b4d3f3a4c3e3b4d3f41534346584a485b4844583f4e624753674c586c51576b4f
4b5f43465a3e52664a4d6243526748556a4b566b4c576c4b596e4d586d4c556a4b
5a6e5253674b576b4f5a6e5252664a516549566a4f54684d4c60475b6f5651654c
54684f5b6f5650644b5467515f725c60745b576b52566a51566a5152664d576b52
5b6f56566a514d614851654c4c6047485c43485c4342563d42563d4f614755654a
5d6b51515f454c5a403a4a3056664c56664c4d5c454d5c455e6d5651604b3c4e38
3446303a4c3642534030432f384f3b364f3c39503e3d54403e55413e55413f5642
4359442f41333143353244383143372f41352e40342d3e342b3c322b3c322c3d33
2d3e342e3f352f40382f40382f403630413731423832433933453934463a3a4c3e
3f51434052443c4e3e3a4c3c3f523f4355454558444759414a5d414b5e42516448
56694d4d6044485b3d5265474e614355684a596c4c576a4a566949586b4b576a4a
55684a5a6d5153654b586a50586a504f614753654b566850485a424456404f614b
4d5f495c6e585f715b51634d5465524c5e48586c5352664b54684d566a4f54684d
5c7055687c61697d6265795e62765b596d52566a4f586c51506449475b404d5f45
56664b5c6b4e546346546346404e3456644a56644a515f464452395f6d5465735c
5b6a5343523b3140293a4932384a34374d38344b37374c393d523f4055423f5540
41574246594530423432443634463a3345393143372f41352d3e342c3d332b3c32
2c3d332d3e342e3f3530413930413931423831423832433934463a35473b36483a
37493b3b4d3d3c4e3e384b38394c393f523e4659464a5d474d5f454a5d41475a3e
5164485d7054596c5055684a5e7153516446576a4c576a4a5063434d6040506343
55684856694b5a6d51485a404c5e4454664c495b4145573d45573f3a4c344e604a
4b5d4740523c4e604a4f614b495b455869564c5e4852664d52664b596d525a6e53
52664b55694e60745963775c62765b5c705553674c586c5165795e60745954684d
55674d6171564f5e415a694c56654859674d46543a55634959674d5f6d53627056
616f55707e646a7a5f506045425237314329374a34334934354b363d533e435642
435640445741485b45354737314333314335334537384a3c3547393244382e4034
2b3d312b3d312b3c322b3c322b3c322c3d3330413733443a3143372e4034304236
36483a3143333b4e3b425542465945485b4740533d40533f4e614b4d5f45526549
485b3f475a3e596c4e56694b475a3c4a5d3f586b4b596c4c5b6e4e5c6f4f5a6e4b
576b48576b48586b4b576a4e57694f52644a485a403f51373f5137485a4251634b
40523c3b4d3745574151634d4a5c4641533d41523f42543e374b32455940586c53
5c70574a5e453a4e3542563d576b525b6f565a6e55586c53576b52566a51586c53
5b6f565f71576272575c6c5167775c6a7a5f5a684e59674d66755869785b677659
69785b6b7a5d6c7b5e6c7b5e6a795c6776596474594b5d4542553f3b4e38394c36
384a34384a3240523a4a5c4436483834463636483a384a3c3345373143352f4135
2e40342e40342f413531423833443a32433932433934453b35473b3244382e4032
3042343648382d402d374a363e513d4457414b5e4846594346594352664d506347
586b4f53664a54674b6275576275575a6d4f617456596c4c5b6e4e5d70505d7050
5c704d5a6e4b5a6e4b5b6e4e586b4f596b5156684e4f614746583e43553b475941
4c5e464557413e503a47594350624c485a4440523c41523f41533d3f523c44583f
4c60474d614841553c394d3444583f586c534c60474c60474b5f464c60474f634a
5569505b6f565f735a6173595c6c515d6d5262725765755a6c7a606e7d6068775a
69785b6a795c6c7b5e6e7d5e707f6072816272816271816474866c6b7d65617359
586a504f61474a5a404c5c42516146374939364838374939394b3b324436304234
2f41352e40342f413531433734463a36483c35463c34453b35473b36483c34463a
3143353446383a4c3c304330384b373d503c4457414e614b4c60474a5e4553674c
4a5d415464475363465363465a6a4d58684b5465455a6b4b5b6c4c5e6f4f5f704e
5f704e5e6f4d5d6e4c5e6f4d5e6f4f5d6d505e6e535d6d525a6a4f5464494f5f44
4c5c424b5b4147563f3f4e3746553e4d5c4546553e41503942513c40523c41543e
3e513b3f523c41543e3e513b3b4e3844574150634d42553f42553f42553f445741
495c4650634d576a545b6f565a6c5466785e65775d5c6e545d7054627257647459
67775c6d7d606d7d606d7e5e6d7e5e6f7e5f71805f7382617483647282656e7e63
6b7b606a7a5f68785d69785b6d7c5f738265374939354737344636354737354739
3345373143372f41352f413530423631433733453933443a31423832443834463a
344638334537384a3a3e513e394c3840533d41543e465a4151654c5064494b5f44
4f634755654859694c59694c58684b57674a5262454b5c3c4a5b3b5b6c4c5e6f4f
5f704e5d6e4c5b6c4a5c6d4b5c6d4b5b6c4a5e6e515e6e535e6e535e6e535d6d52
59694e54644951614744543a3c4b3441503947563f4150393e4d364150393e503a
3e503a394c36394c383f523c43564242553f415440435640445743435640435642
455842485b474b5e484d604c4d604a4e614b65796060745b4e624751634955684c
576a4e6474596474576474576677576778586a79586c7b5a6d7c5b6e7d5c718262
7081617081617081616f7e5f6f7e5f718061748362384a3a364838344636344636
37493b3547393244363042342e40322f41333042363143373243392f4036304236
3244383345373345373749393c4f3c3f523e465943465943495d4452664b52664a
4c60444d61455565485363465666495a6a4d596a4a5566464e5f3f4556365d6e4c
6172506172505c6d4b5a6b475c6d495d6e4a5b6c4a5b6c4c5a6a4d5a6a4d5b6b4e
5d6d505d6d505a6a4d58684d4a5a3f42523844543a47573d4050363f4f35415137
3b4d353d4e3b394c38394c3940533f45584545584442554240533f465946465945
465946475a46495c49475a464356433f523e4359424e644d415740374e344d6148
5d71565b6f545e71554e6143516446586b4b5f72526677556a7b596c7d596d7e5a
74836276856477866576856475836274825f7583607583603b4d3d3a4c3c394b3b
384a3a37493b35473933453731433530423431433533453935473b35463c324339
31433734463a344638334535344636384b373e513d475a44485c43495d4252664a
53674b4e62464e62464e5e4149593c51614459694c5a6b4b5d6e4e5d6e4e526343
5f704e6475536475535d6e4c5b6c4860714d61724e5d6e4a58694757684857674a
58684b5a6a4d5b6b4e5b6b4e5b6b4e58684d5060454f5f454e5e4446563c44543a
44543a3c4e364253403f523f3d503d3e513e405340435643465946495c49425542
415441425542455845475a474558453f523f384d3a39513b3f573f3b533b374d36
43594250674d586c515b6f544c5f43506345576a4a5d7050657654677856687955
6879556979556f7f5b7484607686617987647d8b67808e6a7f8e673e513e3d503d
3c4e3e3b4d3d394b3b37493935473933453733453734463836483c37493d36473d
33443a33453937493d384a3c364838364838394c383b4e3a475a44495d44485c41
5064485165494c61424d62435b6b4e5464475c6c4f6171545b6c4c617252687959
6172525c6d4b6374526374525d6e4c5c6d4962734f65765261724e5b6c4a5c6d4b
5c6d4d5c6d4d5b6c4c5b6c4c5b6c4c5c6d4d5f6f5257674a57674c56664b4e5e43
4d5d424d5d4242543c4354414557474456464052423b4d3d3e5040485a4a506252
3f51413d4f3f3d4f3f3f51414355454456464052423b503d384f3b3a533d425b45
435b433a523a3c543a485f434c634755694d576c4d5a6f4e5d7251617552627653
6377526576526f7f5a76846079876377865f75835f77865f79855f7581593e513d
3d503d3b4e3b3a4d3a3e50403c4e3e394b3b36483a35473935473936483a37493d
34463a32443834463a394b3d3c4e403b4d3d3c4f3c3e513d3c4f39495d444b5f44
485c414c60444c6044495c3e4a5d3f6070535666495b6b4e59694c4859394b5c3c
5869495364445869475f704e60714f5a6b495a6b4962734f657654627351617250
627351657455627353606f505c6d4d5c6b4c5c6d4d5f6e5157674a59684b58684b
5462485464475563494b5b413f513b4758454c5d4a4657443d4e3b3d4e3c475846
5263514253413e4f3d3b4c3c3d4e3e415242445545445545405242435845334a36
384f3b425a443e564041574042593f374e3255694e566a4e596e4f5c7152617454
647757687b5b6b7c5a697955717f5c76846075835f7684607a89627d89637a8660
3e513b3c4f3b384b373548343c4f3c3c4f3c3c4f3c3b4d3d3a4c3c384a3a374939
36483a384d3e3247362d42312e43303c4f3c495c484a5d4945584242543e495b43
4d5f454d5f454e61454f62464c5c414454375666494657374c5d3d6273535d6e4e
445535495a3a6677575869495d6e4e6071515c6d4d5465455162405869495f7050
5665465e6d4e6673556776576471535f6e4f5f6c4e5f6e4f5e6b4d606f505f6c4e
5968495c694d606f505c694d505f424c5a404c5c424a5a4046563c425238415039
4655404b5a454b5a4742513e3b49383d4b3a404e3f414f40414f404051413b4d3d
364b3a384d3c3d523f3f5441425541485b4750634d5a6d573a4e3533472c4e6247
64785d697d6165795d6174566673556c7757727d5d7681617883617984627a8563
7b87633d503a3b4e38374a363346323a4d393a4d393a4d3a3a4d3a394b3b374939
3648383547373c51403a4f3e374c39354a373d503c4659454a5d47485b45576951
566850506248495b414c5c415060455060454c5c3f4d5e3e4a5b3b5162425c6d4d
5a6b4b4e5f3f5061415e6f4f6071516374546273535c6d4d546545506141536444
5768485966485b684a5f6c4e626f51637052606d4f5c694b5865475f6c4e5e6b4d
5b684a5966485b684a5c694b586547525f4157664958674a5766495362454e5c42
4c5a404f5d4453614a4f5d46525f4b53604e4e5b49414e3d3a4736404d3c4b5948
4455433e513e3c4f3c3f523f4255424457434a5d4950634d46594340533d44583f
53674e5c7057596d545a6e5365785c6774586d785a727d5f7681637883637a8565
7c87657e8a663d503a3c4f39384b373548343a4d393a4d393b4e3b3b4e3b3b4d3d
3a4c3c384a3a374939374c39394e3b3b4e3b384b383a4d39415440465943475a44
4a5c444b5d454c5e444d5f4552624755654a5363484e5e414e5f3f5566445c6d4b
5d6e4c5e6f4d60714f5f704e5c6d4b6172506273516172505f704e5d6e4c5d6e4c
5f704e6172505d6b4a5a68475967465d6b4a6371506371505b6948536140566443
5361405462415a68475f6d4c5e6c4b5d6b4a5d6a4c5e6d505f6e51606f525d6c4f
5a684e59674d5a684e5d6b525b6950606e5763715a5d6a564e5b4943503e495644
54635048594641523f3d4e3b40513e455643495b454d5f4951634b42543c50624a
52644c53654d596b5154664c55674d6a7a5f69765a6e795b727d5d758060788363
7b86667e8967808c683f523c3f523c3d503c3b4e3a3c4f3b3d503c3e513e3f523f
3e50403d4f3f3c4e3e3b4d3d314633354a37394c39374a373a4d39415440475a44
485b453e503844563e4c5e445062485363485464495464495464475768465e6f4b
6172505f704c6273516879556778565f704c60714f5e6f4b5e6f4d60714d647553
677854687957687756606e4d5c6a495b69485f6d4c6573526674535f6d4c586645
57654452603f556342606e4d657352616f4e606e4d6371505a694a5c6b4e5f6e51
606f525f6e51606e54616f5563715769775d6472596270576371586270595d6b54
5b69525c6a5355644d4c5e4648574045573f4a5942485a4249593f44563c4f5f45
5d6f5554634c4b5d435e6e545d6f555a6a5069795e6a775b6f7a5a727d5d747f5f
7681617984627c88647f8b673f523c3f523c3d503c3d503c3c4f3b3d503c3f523f
4053404053403e513e3c4f3c3b4e3b374a373a4d3a3a4d3a3b4e3b40533f485b47
4c5e484b5d4752644c54664e57674d5363494d5d424d5d425666495f705061714d
60704b5f6f4b60704b63734f65755064745063734e66765262724d5f6f4b5f6f4a
62724e63734e60704c5c6c485f6d4c5f6d4c606e4d637150667453667453637150
606e4d6472515f6d4c606e4d6775546876555f6d4c5b69485e6c4b5867485b6a4b
5e6d4e606f506170516170536271546372556b7a5d6371575f6d536472586a785e
69775d647258616f556776596171545b694f55654a5260464c5c414351373a4a2f
4b593f5b6b505260474b5b40616f556474595e6c5369775d6b785a6f7a5a727d5d
747f5d75805e7782607a86627c88643d503a3c4f393b4e3a3b4e3a3a4d393b4e3a
3d503d3f523f3e513e3c4f3c394c39384b38394c393c4f3c3d503d3e513d425541
485b454b5d47495b434f614954664c5b6b515a6a4f5464494f5f445565485f7050
68785462724d60704b64744f65755064744f64744f6878536b7b5667775263734e
63734e65755064744f60704b5c6c47606e4b62704f647251647251647251647251
64725164725167755463715062704f64725162704f5f6d4c5e6c4b606e4d5e6d4e
5f6e4f606f50617051627152627152627152627152657455647354657455677657
6574556271526372536776576877566877566675566271525f6e4f5b6a4b536243
4a593a3c4b2e4f5e415362455361475e6c525e6c525c6a5069765c6c77596e7957
727d5b747f5d75805e77835f7985617b87613a4d393a4d393c4f3b3e513d3b4e3a
3c4f3b3e513d3f523e3e513d3b4e3a384b373649353649353d503c425541415440
435441485a444d5f494e6048404f3846563c5161475b6b505e6c525a694c59684b
5c6b4c65755065754e66764f6777506777506777506878516a7a536b7b54697952
6777506979526b7b546c7c556a7a53687853667451667451667451667451657350
64724f64724f64724f62704d616f4c5c6a475664415664415d6b4864724f677554
637253637253637253647354657453667554667554667554667554667554687756
687756647352606f4e6372516a7a5663714d6876526a78556977546977566a7857
68765562704f4c593b505d3f55624459664a5a674b59664a5e6b4f677458697454
6d7856727d5b76825e7884607985617b87637d8963394c383b4e3a40533f435642
3d503c3e513d40533f41544040533f3d503c394c38374a363346323f523e495c48
495c48485a444d5f4955674f5b6d5549593f45553b47573c5161465a694c5c6b4e
5f6e516372535a6a4563734c67775063734c62724b67775068785164744d6b7b54
6a7a536979526a7a536b7b546b7b546979526777506d7b586b7956697754687653
68765367755265735063714e66745164724f5a68454b5936495734566441616f4c
63714e6372516271526271526473526776556978576b7a596b7b576d7d59677753
6474506777536a7a566979556979556a7a5566754e6c7b546e7d566b7955697753
6b79566b79566876536d7b5a5b69485461435764465764465b684c626f53647153
6772506b7753727e5a77835f7a86627c88627e8a64808c663b4e3a3a4d393c4f3b
3f523e3c4f3b4356424659454154403d503c3c4f3b3a4d39374a363a4b384a5b48
47594343553f51634d55675154634c5e6d564e5e444d5d43515f455a684e637255
66755866735564725164724e68775069785166754e66754e69785168775065744d
6b7a536a79526a79526a79526a79526c7b546e7d566f7e576f7d5a697754677552
69775468765362704d606e4b63714e69775462704d5d6b48616f4c677552657350
5967444c5a3759684761704f65745363734f64745069795568785460704c6a7a56
6b7b566b7b566a7a5567775266765167775268785163724b66724a69754d6b7751
6d79536f7b576f7b576f7b57727d5b717c5a6f7a5a6c7757687353677254697456
6a75556b77536d79536f7b55737f5976825c7a86607c88627e8a623a4d39384b37
374a36394c383c4f3b4255414558444154403e513d3e513d3e513d3c4f3b3b4c39
495a4745574141533d4d5f4951634b52614a5b6b515d6d535464495462485e6d50
6271545e6d50626f516b795863714d66754e66754e64734c65744d697851697851
67764f6978516978516877506877506978516b7a536c7b546d7b576d7b57697754
67755269775468765364724f62704d6573506a785567755264724f657350667451
6573505f6d4a5a68454f5f3b4e5e3a54644060704c6676526676526878546e7e5a
6878536979546a7a556979546777526676516676516777506877506a764e6a764e
6b774f6d79536f7b55717d59727e5a6d78566e79576f7a586e79596e79596e7959
717c5c737e5e727e5a737f5974805a77835d79855f7b87617d89617e8a623a4d3a
394c393a4d393e513d3c4f3b42554144574142553f3f523c40533d42553f42553f
3e503a485a4445574143553f4d5c4551604952614a5a6a505361484b593f505e44
62715469765a616e50626f516f7d5c65735068765267755164724e64724e687652
6977536876526775516775516775516775516775516876526977536a78546c7a56
6977536977536a785469775365734f65734f6775516775516977536a7854687652
65734f64724e65734f6775515a6a454d5d3850603b63734e6676515a6a455b6b46
6b7b5662724e6575516777536878546777536676526676526676516b7a536a7952
6877506877506978516b7a536f7d59717f5b72805c74825e76846076846174825f
74825f7583607684617a86607a865e7b875f7d89617e8a627e8a627e8a627e8a62
384b38394c393e513d4558443d503c41544043564042553f40533d40533d435640
45584243553f4759434759434759434e5d4652614a56664c5c6c524d5b4147553b
49583b566548606d4f626f516572546b79586977546a785468765363714d63714e
66745068765366745065735065734f65735065734f667451677551677552677551
6b79556b79556b79556a785468765266745066745067755164724e6775516a7854
6977536775516674506977536c7a566c7c575d6d485b6b4666765163734e54643f
53633e60704b5b6b475e6e4a62724e647450657453657453667554677753697753
68775067755166754e6775516876526a78546c7a566f7d5972805c75835f778561
7785617684607684617785617e8a627f8b63808c64818d65828e66828e66818d65
818d65394c39374a373b4e3a4255413e513d40533f42553f43564040543b3f533a
42563d465a4144564045543f4958434c5b464d5c4551604959674e5c6a515d6b51
59674d505d4149563a515e40616e50667453616f4e657050677250657050626d4b
626d4d677250697454687351667151677250677252677250687353687351687353
6873516a78546c7a566c7a566a785467755165734f66745066745063714d65734f
6876526b79556d7b576d7b576c7a566b79556a7a5365754e62724b64744d62724d
5d6d485d6d4960704c5665445968475d6c4b606f4e627152637253657455677657
6474506575506676526676516777536777526676516676515c6c4760704b677752
6c7c5770805b72825b75856077865f7c88607e8b60808d62828f64849166849166
8491668390654053403b4e3b3a4d393d503c3d503c3f523e42553f44574143573e
40543b42563d475b42465540404f3a4857424f5e494b5a434e5d4657654c57654c
57654b606f52606d515865495d6a4c6b785a6775545664435d68485f6a4a606b4b
5f6a4a616c4c677252697454687353677252677252687353697454697454687353
6873536772526775526b79556d7b5769775365734f667450677551677551667450
6674506876526c7a56707e5a717f5b6d7b576a785465754e69795268785162724b
62724d66765166765262724e5867465a69485d6c4d5e6d4e5f6e4f617053647356
6675586372516474506675546777536878546777536777536676515c6c4760704b
6575506979526c7c556e7e5770805971825876855a7a875c7d8a5f808d62839065
8491668491668390653f523f3a4d3a3c4f3b4154403c4f3b3d503c42553f475a44
475b4243573e4559404b5f46495843404f3a4a594253624b4b5a434c5b4455634a
515f4648553b59664a6572566673556976586d7a5c6974545d68485e694b626d4f
636e50626d4f646f516974566a75576873556873556974566a75576a75576a7557
69745668735568735362704d6876526b795567755164724e6775516a78546a7854
6775516674506775516977536b79556d7b576c7a566b79556b7b546f80566e7e57
68785166765169795467775362724e5f6e4d606f50606f525f6e515e6d505f6d53
627056647258617252627351627353637452637452647551657652667753667852
697b556b7d556c7e566b7d556a7c526b7d536d7e5471805576835779865a7d8a5e
808d62818e63818e63808d623344323245313b4c394457433a4d393b4e3842553f
495c464a5e45465a41485c434f61494c5e4643523b4e5d465867504d5c454c5c42
5462494f5d434f5c405865475f6c4e606b4b5d6848606b4b6973516f7a58677252
6876556b76566775546873536977566a75556573526974566876556b7658697756
6b76586875576974566674535d6b4a65735069775466745164724f6876536c7a57
6c7a5765735066745065734f64724e64724e6575506977536a7a53708059708157
7080596e7e576d7d566c7c576a7a55697955667554657453637253606f505e6d50
5e6d50606f526372556170515f70505e6f4f5d6e4e5e6f4d617250647551667753
647551677953697b556a7c566a7c546b7d556c7e566f80566f7e53738055778459
7b885d7e8b607e8b607e8a627e8b603d4c393c4e3843523d4557413f513b43553d
44563e44563e485a424e60484e60484a5c444759414f61475062484f61474f5f45
48583d4d5c3f5e6d4e5d6a4c626d4d646f4d636d4b616b48616b48676e4c6a7451
6c7a5768785466745164745066745166765265735062724e667453657551687655
6777536876556776556775546673554f5c3e5e684d697358697358667355677456
6876556775546a79586f7f5b70805c6b7b576b7b576e7f5b6c7c5763734c6d7d56
71805775845b78875e78875e75845d7180596e7c586d7b5769775364724f62704d
62704d63714e62704d5f6e4d5d6c4b576645586746606f4e6372515e6d4c5e6d4c
6574536877566676526575516676526979556c7c586d7d596d7d586f7e57737f57
75815977835b79855d7a865e7b87617c88603d4c373c4b363d4c373e4d383c4e36
42543c475941485a424a5c444e60484e60484b5d454c604552664b53654b526549
5464494d5d40505f405f6c4e5d6848606b49656f4d66704d676f4a68704b6e7450
717954707e5a6d7d586b7b566b7b566d7d586d7d586b7b566979556979556a7a56
6a7a566a7a566979556878546676526674535862475c664b5d674e586247536044
515e404c593b4653355a69485e6d4c62724e6575516879556c7d596a7c56667651
6c7b546c7b526c7b526d7c536e7d54707f5673825b74835c73825b707f586d7b57
6b795569775365734f606e4a5d6b4860704c5766455564435e6d4c64735261704f
61704f6473526675546473526372516574536776556a79586b7a596b7b57707e5a
737f5975815b76825c77835d77835d79855f7a8660404f3a3f4e393d4c353a4932
3b4d3543553d4b5d434d5f454d5f454e60464e60464d5f454f614754664c53664a
52654958684d546447556445616e505f6a4a636e4c6872506b75526d74526e7553
727a55737d5875815b72815a72815a72815a73825b72815a7180596f7d596b7955
6b79556b79556a785468765266745063714d62704d697456677254656f54646f51
657052646f515a6749505e3d5866455866455c6c48647450697955687854677753
6777526c7b546b7a516978516877506978516c7b546e7c58707e5a75835f75835f
75836074825f717f5c6c7a57657350606e4b6474505969455464405c6c48647450
64745062724e63734f65755164745063734f6575516777536a7a566a7a566a7a56
6e7c58707e5a707e5a707e5a6f7d59707e5a72805c74825e45543f46553e44533c
41503941533b485a404e60464f61474d5f454c5e444e60465062484d5f45526549
5164485164465b6b4e5c6b4c5b684a62704f6570506974526e7855707a57727957
727957737b56737d5874805a72815a72815a73825b72815a7180596f7e576e7d56
6f7e576f7e576f7d596d7c556c7a5669785166754e65734f646f4f646f4f657050
6873536c77576c77576472515d6b4a6472515e6c4b5d6d496474506575515f6f4b
5d6d4961714d5e6d46606f4863724b66754e687750687750687652687652707e5a
717f5b74825f76846176846173815e6f7d5a6b79566b795661714d5b6b475e6e4a
62724e61714d60704c61714d6676526575516575516676526979556a7a566b7b57
6a7a566a7a566b7b566d7b586b7b566a78556979546c7a576e7e5945543d495841
49584147573d4c5c424f5f455262485262474e5e434d5d4250604555654a526247
58684d56664b5666495f6e51606f505e6b4d62704f6974546b76546f7956727c59
757c5a757c5a767e59757f5a748058748058758159748058737f57727e56717d55
717d557a865e7a865e7b87617a865e79855f77835b7581597480586b7552697351
66704e626c4a5e69475b66445c67455e6947697754606e4b5c6a47606e4b606e4d
5a68475867465d6d4952603c57633f5b6743606c4864704c67734f687351697452
6c77556e7957717c5c737e5e7580607580607580607482616f7d5a6b7956677552
657350606e4b5d6b485e6c49616f4c6573506573506573506674516876536a7855
6977546777536676526879556b7a59697a566776556677536a79586c7d5943523b
45543d48583e48583e5262485262475262475363485161464f5f4252624758684b
58684d6070535e6e515c6b4c6170516271525f6d4c62704f6873516974526d7754
707a57757c5a777e5c79815c7a825d77825a76825a77835b76825a758159758159
77835b79865b818d65818e63828e66828f64818e63808d627f8c617e8b607f8964
7a845f727c5767714c5c664156623e5c684466714f687351616f4c5f6d4a616f4c
63715063715065735268765366714f65714d636f4b626e4a626e4a64704c677250
6873516a75536c77556d78586e79596e79596f7a5a727d5d747f5f707e5b707e5b
6f7d5a69775462704d5e6c495f6d4a62704d616f4c616f4c616f4c63714e657350
65735064724f62724e60714f657654697a5a697a586677576576546879596c7d5b
42513a45543d49593f4c5c42546248515f45526046566548576649556445566548
5a694a5665486170516170515e6b4d637052647251646f4f6873536a75536a7553
6c76536e7855737a58767d5b787f5d79815c77825a79845a7a855b7a855b7a855b
7d885e828d63869166879268879267889369889368879267869166848f64838e63
858d64828a637d855e737e566671495c66415c6641626e4a64704c66724e677250
6873516b76546e7c596f7d5c6c7a57747f5d727e5a6f7b576b7753687351677250
66714f65704e6772526974546b76566b76566a75576a75576c77596d7858707e5b
707e5b6e7c596b79566775526573506573506573505f6d4a5f6d4a5f6d4a616f4c
63714e63714e62704d5f6e4d5667475a6d4d6174566376566174565f7252627557
66795945543d48583e4e5e445363485260464f5e415160435867485b6a4b596847
5966485a694a4e5b3d5c694b5f6c4e5c6a4962704f6573526772526c77576e7957
6d78566d77546d7754717856737a58747b59757d5877825a78835979845a7a855b
7c875d818c628893688e996e8f9a6f8f9a6f8f9a6f8f9b6d8e9a6c8c986a8a9668
8995678d966b8d956c8f976e8c946b7f875e69744c5e69415c6641616b46687450
6a76526873516b7654707b596e795763714e66724e6975516c78546f7b576f7a58
6b7654677250646f4d636e4e6671516a75556b76566974566873556974566a7555
707b596d7b586b79566a78556c7a576d7b586a7855677552606e4b606e4b606e4b
62704d64724f64724f62704d606f4e4c5d3d5265475b6e505d70525b6e505a6d4f
5d705261745646563c4a5a404e5c43505e445766495766475865475b69485d6b4a
5f6d4a606b4b5d6b4a5c67475a65455d6848646f4f67725265704e66714f6a7553
6e78566d77556d77546d77546e78556f7956707755707853757d56737b52737b52
78805780885f8a926990996e929b709aa37697a073939c6f919a6d919a6d919a6b
90996a8f986b8d94688b92688b92688f966c92996f8d956c838b627a825b717952
6c76516c76516f7956737d5a737f5b6e7a5668745068724f6a74516d77546f7956
707a576f79566e78566e7856697351687250677051666f506770516871526a7354
6a75556873516874506874506975516a76526c78546f7b57707c58687450697551
6975516a76526a76526a76526a765267755262735356694b4c5f414a5d3f526547
5b6e505f725460735548583e4c5c41505e445362455867485867465a68475c6a47
626d4b636e4c636e4c626d4b606b495e6949616c4c6772506a7553687351687351
6c77556c76546d77556f7956717b58717b58707a576f76546d7550717952717950
727a517880578189608890678d956c8f986d929b70919a6d90996c919a6d929b6c
939c6d919a6b90996a90976b8e95698e956b91986e949b71949b7190976e8b936a
7f875e7b835c757d56717b56717b56727c57707a556e7a54717b56717b56727c59
727c59717b58707a57707a576f79576e78566c76546a7452687152677051687152
68715269735168745068745067734f67734f6874506975516b77536c78546c7854
6c78546d79556e7a566f7b576f7b576e7a566c7a57687959617456596c4e546749
536648576a4c5c6f515f72544a5a404f5f445462485665485a67495a68475d6848
606b49656f4d67714e68724f67714e66704e656f4d6872506c76536e78556d7754
6d77546f79566d77546e78556e78556e78556e78556e78556d77546f76546e7651
717751767c567d835d858b658a91688d946b8e956b8f966c8c93698a91658a9165
8b93648d95668e96658d956690966a90966a90966a91976b93986f949b71979e74
989f7591986e8a926981896079815a757d56727d55737e56758058768159758058
737d58727c57707a556e78536d77526c7653707a576f79566d77546b75536a7452
6973516a74526a74526a765269754f68744e67734d67734d68744e69754f69754f
6d79536e7a546f7b55707c56717d57727e58727e58707e5a6d7c5d6d7d606a7a5d
6272555b6b4e59694c5e6e516474574c5c415161465665485968495a68475a6845
5e6947626e4a67714e6a744f6a744f6a744f6a74516a74526c76536f7956707a57
707a57707a57707a57717b586f79566c765369735068724f6a74516e7855737a58
707652757b577d835f858b658c926c8f956f8f956f8e956c8f966d8a9167838a5e
7e85597e865781895a838b5a858d5e888e628a90648b91658b91658b90678d9269
92996f969d73979e74949b718d966b858e637e875c7a835878835879845a79845a
78835977825a768159747f57727d556f79546d77526e78536e78536d77546c7653
6d77546d77546e78566f79566e78536c78526b77516a76506a76506a76506b7751
6c78526d79536d79536e7a54707c56717d57717d57717d57717d596f7e5d708161
7180636b7c5c6574576273536776596b7c5c4e5e435363485766495a694a5b6948
5d6846606a48636d4a6a724d6d754e6d754e6d75506d74526e7553707755717856
727957737a58737a58727957707a57707a576f79566d77546b75526b75526e7855
727957757b597d8160878b6a909471959976969a7593977292976f8b9068888d64
83895d80865a7f85577f85577f85577e84567d805581835b85875f868860848960
868b628b916590966a91986c939a6e949b6f91986c8a9366848d607f885b7d8659
80895e7f885d7f875e8189608189607f875e7a825b767e57737b54727a53727a55
727a55727a55727a55727957707a556f79546e78536d77526d77526d77526e7853
6f7954707a556e78536f7954707a55717b56727c57727c57727c57717d59748261
728160727f616f7e5d6e7b5d6d7c5b6e7b5d6e7d5c50604554644758674a5a6948
5e69495f6a48616b48656f4a6b734c6e764f6f77506e764f6c744f707755717856
717856727957757c5a757c5a7279576b75526f7956737d5a747e5b717b586d7754
6c76536e7553797f5d8286658d9170969a79999d7c979b78949875919570838860
858a62888d648c92668c9266898f6183895b7e8458787a527c7e5680825a82845c
81865d83885f878d618a90648990648d9566929a6b959d6e939c6d8d9765868f60
818a5b80895c7f885d7f885d818a5f838c61828a617e865d7a82597a82597a825b
79815a777f58767e57747c57737b56727a55707a55707a556f79546e78536e7853
6f7954707a55717b56727c57727c57737d58747e59747e59747e59737d58737d5a
79846274826172805f717f5e738160738160707e5d6e7c5b5363485666495a694c
5b6a49626d4d626d4b646e4b67714c6d754e70785171784f7177516d734f717753
727a55717954737b56777f5a777e5c737a586b72506e75536f79566e78556a7451
67714e6872506c7352797e5e8285668e9172969a79989c7b9498759094718d916c
858a62888d658c916891976b92986c90966a8a9062868c6081835b81835c81835b
80825a80825a81835b81875b82885c868c5e888e608b9364919968959d6c939b68
8d956488905f818a5d7e875a7b84577c85587f885b818a5f7f885d7c855a7f885d
7f875e7e865d7d855c7b835a79815a777f58767e57757f5a747e59737d58717b56
717b56717b56717b56727c57747e59747e59757f5a757f5a757f5a747e59737d58
737d5a76815f747f5f737e5e737e5e758060758060747f5f737e5e57654b59684b
5c694b5d6b4a646f4d656f4c66704b6b734e6f7750727852737a517279506d734d
717952737b54727a55747c5778805b79805e757c5a6d74526c735169704e636a48
5e6543606746676e4d6e7554777c5c8085658d91709399779599789096728c906d
888e688f936e8c936a8c91698c936a8e936a8e956b8f946b8e936a8b9067878c63
82875e7d82597d7f577a8054797f53797f53868c5e858b5d868c5c8c9262939a67
969d6a9299668e9464899162838a5e7d84587c83577f865a838a5e848b5f838a5e
81885e81885e81885e80895e81885e7f885d7f865d7d855c7d855e7c845f7a825d
78805b767e59747e59767e59747e59747e59747e59747e59747e59737d58727c57
717b56717b56707b59717c5a717c5a727d5b747f5d75805e7782607883635a6749
5c6a495f6a4a5f6947656f4d69704e6b734e6d734f6e744e70744f727651737a51
737b52727d53747f5576815979815a788059757d58727a55777d5b767c5a787d5d
767b5b6d725264694b666b4d6e7353757b577880597f8561838b66878d69868e67
868c66838b64848a64868e678c926c8e966f9096728e96718d936f8d936d8e956b
8f966a8f966a8c9367868c607f8559797f53767c4e7b7e517f82558588598a8d5e
8e916292956697996a999b6c999a6e919268878a5f83865b85885d86895e83895d
818759848a5e83895d82885c838a5e858b5d848c5d848a5c81885c7f865d7f855f
7f855f7f855f7f855f7e865f8086607f8760777f58777f58777f58777f58758058
747f57747f57747e5975815b717d59717d5974805c74805c6f7b576d7b57707e5b
5d6848606b4b616b49616b49686f4d6a714f6e74506f755170744f727651747853
757b55777f567883597a855b79845a777f58747c55747c57757d58717755727856
7479597479596f72536a6d506e7154777a5b7a805a7a82597b82597a82597a805a
777f58757b55737b54787e587a825d7f8561818964848a66848b69858b69848c67
858d648891648b92668c93678b9266899064898f638a906283865984875a87885c
888a5b8b8d5e9193649a996b9e9d719e9d719b997096976d94956b93946a919268
8b8e6186895c86895c86895c858b5d858b5d848a5a848a5a83895983895b858a62
8589648589648589648389638187617f855f7e845e7c845d7b835c7b835c7a825b
77825a768159768159758058737f59707c566f7b55727e58727e586f7b556d7b57
717f5b5f6a4a616c4c636d4b626c4a69704e6c7351707652727854737752757954
797b56797d587d835d808861828a637e865f777f58727a53757b57787e5a787e5a
787e5a787c5b767a597175546d7051717455787c5b80845f7e855b7d8259798056
787d55757c53747951737a51737850737953767a55777d577a7e597a805c7b7f5c
7a805c7d845b81885e858c628990668d926991976b979a6f999c718f92678d9063
8b8c60898a5e8b8a5e908f6397966a9c9b6f9e9d719e9d719b9c70999a6e96976b
9192668c8d618a8b5f878a5d898c5f8a8d60898c5f83895b81875981875983895d
8489618589648589648589648389638288628086607e845e7f87607e865f7d855e
7c845d7b835c7a825b77825a768159737d58707a556e7a546f7b556f7b556e7a54
6e7c58717f5b606b4b636e4e646e4c646e4c6b72506e7553737955757b57777b56
797d587c7e597c805b838963828a638189627d855e788059757d56777d59797f5b
7d835f7c825e7b7f5c777b58747855737754777b5a7d7e5c80825b80835881835b
82855a83855d83855d83855d83855d7c7e577a7c55787a53787a53787a55787a55
777954747853777b567a815880855d858a61888d648b906791936b93966b95986d
94976c93946a8f90648f8e628f8e629291659594689e9d719e9d6f999a6e95966a
9192668e8f638e8f638f9064888b5e8b8e618d90638b8e6183895d7f855980865a
83885f7e835b7e825d7e825d7f835e7e845e7f855f8086608086607f87607f8760
7e865f7d855e7c845d7c845d79845c79845c757f5a727c576f7b556d79536c7852
6d79536c7a566f7d59626b4c656e4f686f4e676e4d6e7452717755777b587a7e5b
7d7f5a7f815c80825b80845f868c688288647d835f7c825e7d835f7d835f7d815e
7b7f5c777b56777b56797b56787a557a7c577f815c848661888862808157838458
88895f8c8d618e8f658e8f658c8d638a8b6181825a7e7f577b7c54797a52797953
78785276765075754f747651767a557e805b82845d84865f858760878761888961
8f906892936b98966f99976e97956c95936a9391689291659e9d6f9e9d6d9e9d6f
9c9b6d99986a97966894956995966a898c618d90658f92678c8f6485875f81835b
80855c8388607e825d7c805b7b7f5a7a7e597a7e597d815c7f855f818761808660
8086607f876080886180886180886180886180886178825d77815c737d586f7954
6c78526c78526d79556d7955646d4e67714f6a71506a714f707654747a567a7e5b
7d815c81835e83856084865f868863878b688187657c82607c825e828663848865
8185627d815c787c577b7d587a7c557a7c557e805985865e898a628a885f8f8e62
9392649a976a9d9c6e9e9b7098976b9390658e8d61858259817f567e7b527c7a51
7e7a547d7b527c785278764f73734f7678537b7d587e805b80825d82825c84845e
85855f85855f8b8c6495936c9b99729d9b749c9a719a986f98976b9998689c9b6b
a1a070a4a373a3a2749e9d6f95966a9091658b8e638d90658e90688b8d65878961
83855d81865e82875f8387628185607e825d7c805b7c805b7d815c7e845e808660
828862828862828a63828a63838b64838b64848c65848c657b85607b856077815c
717b566d79536e7a546d79556b77536770516a74526d74536d7452717755757b57
7c805d80845f848661868861878962888a65868a69838766818564828665868765
87886686886384866182845f84845e83845c82835986875d8f8d64908e658c8b5f
9e9b6ea2a070a8a475aaa878a9a578a3a0739c986b9794678f8a608a875c878258
85825787825a858257817c547c78527676527878567979577b7b577d7d59827f5c
8784618b896386845e8b896392906a98966f9b99729d9b749f9d76a09f739c9a6a
9e9c6ba0a06ea5a573a6a575a1a0709597688e8f638e8f658e8f658c8e668b8d65
888a63868861848661838560858762858762858762858762828661828661828661
828661828862828862828862828862818962828a63828a63828a637b85607c8661
7a845f747e59717b56727c57707c586c78546973516d7755707755707755727854
767c587d815c828661868861878962898b648a8c67878868878869888969888969
87886687886688886489896382825c85865e88865d8a895d9190649b9a6e9d9c70
999669a19d6da4a070aba476ada97aaea779a8a475a59e729f9b6e9d966a979366
948d63908b61918a608c875d888157807b537c79567979577a77567976557a7754
7f7c598784618c89668c8a648e8c66918f6994926c97956e9b9972a09e77a3a276
a7a575a4a26fa2a270a3a371a6a575a3a2729c9b6d9395668f90668d8e648c8d65
8a8c648a8c65888a638587628385607f815c82845f858762898b66888c67878b66
8589648387628086608086607f855f7f855f7e865f7d855e7d855e7d855e7c845f
7d87627b856076805b737d58757f5a727e5a6d795569704f6d7453707654707654
757956777b587d7f5a81835e85855f8787618889618989638c8c6a8b8a6b8a896a
8988698888668888668a87648a88628c8a638a885f8b885f8f8c619693689d9a6d
a19e71a39f70a9a373aaa472ada576ada777aea677aba575a9a173a7a072a79f71
a19a6c9b9267948d6192895e8f885c8e855a8c845d827e5b83805f837e5e7e7959
7b77547d7956837f5c8783608a86618d8964908c67938f6a96926c98946e9b9771
9c996e9f9d6da19f6ca09e6da09e6da4a272a7a676a1a072979668918f668f9066
8d8e668b8c6489896386866084866183856085856185856182845f82845f838560
848661848863868a6580845f7f835e7d835d7d835d7d835d7e845e7f855f7f8760
7e86617d85607b835e79815c757f5a747e59747e5b737d5a69704f6e7553727856
7379557b7f5c7d815c82845f8688618a8a648d8d678e8f678e8e688c8c6a8b8a6b
8b8a6b8c89688b88678a87648987618a86608a875e8b885d8e8b609390639a9669
9f9b6ea39f70a6a070a9a172aba372aea677b0a879b0a879aea677aca476aaa274
a69e70a39b6d9e956a9a9166978e63948b6091885d8d865c8e88648e89698d8767
878360827c5a7e7a577e7a577f7b56817d58827e5984805b87835d8b8761908c66
94906a9794699997679b99689c9a699e9c6ba2a070a6a474a09f7198976b918f66
908e658c8d658a8b6389896388886286886386886384846083835f81835e81835e
81835e838560838762858964848863838762818761818761808660808660808660
8086608088637f87627d85607b835e77815c76805b757f5c757f5c6a714f707755
757b59767c587a7e5b7c805b81835e8587608989638b8c648e8c658e8c668e8b68
8f8c6b8f8c6b908c698f8b688d89648b87628b86608580588782588a855b8e8a5d
958e629c9567a39c6ea8a272a59d6ea8a06fada576b0a879b2aa7bb0a879ada577
aba375a29a6ca0986a9f966b9e956a9e956a9c9368999065978e65978f6b96906e
9a917097916f968d6c908a668d87638d876386805c85805a837f5984805a88845e
8d8a61928f669592679995669b97689c9a6a9e9c6ca19e71a3a0739f9c7199966b
929067918f668d8e668b8c648a8b638a8b638a8a648b8b65858561858561848460
848460838560858762868863888a65878b66878b66868a65868a65848a64828862
8187618086608389658288647f87627e86617c845f7b835e77815e77815e6b7250
727957777d597a805c797d587b7f5a80825b83855e878860898a628c8a638c8a63
908d6a928e6b938f6c94906b928e69908c668f8a648d88608c875d8b865c8b8458
8982568a83558f885a9891639f986a9f9768a39b6aa9a172aea677b0a879aea677
aba375a8a0729e96689d95679d94699f966ba1986da39a6fa39a6fa299709a906d
9a91709f9675a59d79a79f7ba39b77a098749d987298936d95906a928e68928f66
93906796936a98956c99966b9c986b9e9a6b9f9c6fa19e71a29f72a29f729f9c71
9c996e97956c95936a9192688f90668d8e668d8e668d8e668e8e688b8b678a8a66
898965898965888a65898b668a8c678b8d68858964868a65878b66878b66858b65
848a64828862818761848a668389658189648088637e86617c845f79836078825f
6e7452757b597b7f5c7d815e80825d82845f8686608989638d8b648f8d66908e65
908e6794906b96906c97916d98936d97926c95906a958d68938b64999268989167
968d62938a5f91885d92895e948c5e978f619b93649f9768a49c6da9a172aba375
a9a173a69e70a49c6ea1986d9f966b9d94699d9469a0976ea39a71a59c73a69d76
9b916d998f6c9d9370a79d79aca27ea8a07ba39b76a39b74a29d75a09b739f9a72
9f9a709f9c719f9c719d9a6f9b986d9b966c9c986b9f9a70a19c72a19e73a09d72
a09d72a29f749e9d719c9b6f9a996d97966a95936a94926992936991926a8f8f69
8f8f6b8e8e6a8e8e6a8d8d698d8d698c8e698c8e69848661858762858964858964
868a65858964838762838762848a66848a668389658288648088637d85607b8260
7a815f717755767c5a7b7f5c7d815e82845f84865f8888628b8b658f8d66918f68
92906792906796916b96916b97926c98936d98936d97926a989069989069948d63
968f659d9469a39a6fa79e73a69d72a39b6da0986a9a92649d9566a29a6ba59d6e
a79f71a59d6fa29a6ca0986aa59c71a1986d9d94699b92679c936a9e956ca0976e
a198719b8e6b968966978d69a49a76ada37fada47daaa27baca47da49c75a09b71
9f9a70a09b71a19e73a19e739e9b709b986d9792689893699b966c9e996f9e9b70
9e9b70a29f74a8a57aa4a377a4a377a2a175a09f739e9d719b9a6e97986c96976d
93936d93936f92926e90906c8f8f6b8d8d698b8d688a8c67858762858762848863
858964858964858964858964858964858b67858b67858b67848a668189647f8762
7d84627b8260737957787e5c7b7f5c7c805d81835e83855e8787618a8b638e8c65
8f8d66908e65908e6595906895906896916996916999916a9a926b9a926b9a9369
90875e928960978e63a1986daca076b0a47aaca076a79c6f9e9668a0986aa29a6c
a59d6fa59d6fa39b6da1986d9f966ba0976c9e956a9b92699a91689b92699c936a
9c936c9c936c9d916b948862938761a0946ea9a079aba27baca37cb0a97fa9a278
a59e749f9a709f9b6e9f9c6fa09d709d9a6d9a976c9c976d9b966e9c976f9e9971
9c976f9c976fa29f74aba87da9a67ba9a67ba9a87ca8a77ba6a577a3a2749fa172
9d9e729b99739a977496967294947092926e8f8f6b8d8d698c8c688a8c678a8c67
878b66878b66868a65868a65878b66878b66878d69878d69878d69878d69858b67
8288647f86647d8462757b59797d5c7b7f5c7b7f5c8185608587608789628b8c64
908e67918f68918f66928f66948f67948f67968e67968e6798906999916a9b936c
9c946d9b926b958c6591885f948b629e926aa2966ea0946c9b8f67a3976da39a6f
a69a70a59c71a59c71a39a6fa1986f9f966d988f66988f68988f689a906c9c926e
9c946f9c926f9a926ea29875958b678f8561978d699e94709e94709e956ea29972
b6ad86aea77da7a076a19c72a19c72a09d709f9b6e9d986ea6a179a59d76a49c75
a39b749c976f99946ca09b73aaa77caaa77eaba87dacaa81adac80abaa7ea9a87c
a6a579a3a178a09e779f9d779d9b759b997398967094926c92906a8e8e6891916b
8e90698c8e678b8d668a8c658a8c658a8c65898e66898d688a8e698a8e69898f69
878d67848a668288647f8664727351757956797d5a7c805d838762878c648e9069
8e8e688d8b648b89628e8b62918e659e967198906b918763a59b779d936faaa07c
a29874a09672a298749c926e9187649a906d877d5a9b916e9b916e9b8e6b9c906a
afa37ba39570a59973a29572aa9d7a968c699d93709d93708a7f5f9b9271a09778
948b6c9b9575988f72867f629b9678a09b7b8f8a6aa09a7a989270a198779b916e
978d6aa19773a69c78a79d79b0a8819e966f9a956b958e64a39c729e956e9a906c
aea480a49a7699916c9a956f98936db1ac84b8b48eb6b38ab4b08ab2af86aba87f
a4a178a4a178a9a67d9b97719d9973a09c76a09c769e9a749b97719a9670999770
96946d93946c92936b9091698e8f678c8d658b8c64898b638c8e678c8e678c8e67
8a8f678a8f67888e68888e6a878f6a7778567b7c5a7e825f80845f828862848961
878962898a628c8a638e8c6593906797926a938b66a39975a39975aba17da19773
ada380a89e7baca27f9d93709f94749a8f6f8f8464a499799f94749b9072998e6e
a79a77a598759183609487659083619d906e958a6a9e9373988d6f93886aa1987b
968d7081775c847d6191876c9b94789b977a999677948f71a49f81a19b7ba39a7b
958a6aa297779e916f9f92708e84618e8460968e69a49c75a59d76938b64a89e7a
9c8f6c9c8f6c9d936fa39975a49c7798906b95906a9f9a74a4a07aafab85b7b38d
b3af89a8a47ea09c769f9b75aaa57da6a179a09b739c976f9b966e9d98709e9b72
a09d7499976e98966d97956c95936a9391689290678f90668f90668f90688f9068
8d8f678d8f678c8e67898e66898d68878d697a7b597e7f5d818560838762878b66
888d658b8d668e8f6793916a96936a9a956d9c976f9e9671ada581aba37fb2aa86
ada5819f9675887f5e9188679289689a91729d9475807758b9b0919b9273948b6e
8f84668a805d8a805d9083619d92729287679287678a7f5f877c5c918668877c5e
857a5e81765a8e83679b9275968b6f9c9376aca5886e6949948e6eaea586786f50
897e60958a6a8578587669499689679a906da399769a926e948c67a19c769b936e
978d699b8e6c968c69a39976a89e7ba39b77a49c789c9672aba581a8a27ea59f7b
a39d799f9b769f9b76a6a27dafab85a5a078a39e76a19c74a19c74a29d75a49f77
a4a178a4a178a09d749f9c739b997099976e97956c96946b96946b97956c929369
91926891926a8f91698e90698a8f67898d68878d677a7b597f805e80845f838762
868b638d8f6893946c97956e98956c97946b99946c9b9670a29c78aba583a59f7d
a9a3819c96746d67474f49296862424c4528544d306b6447615a3daaa386a0997d
a8a1859d96798c836489805f8f86678d84657970517c7352837a5b7c7153726749
7b70527b705473684c887d619e9377ada286d5caacbcb3946d6445a09577aba082
6f61448c7e619d90707f7252473a1a6a5d3d776c4cb0a585a198778a846288825e
8c8662908663a19472998e6ea59b78a39878968c69a299789c94709b92719a9470
9d9775a09a769e98769b97729d9976a39f7aa19c76a29d75a39e76a19c74a09b73
a19c74a3a077a6a37aa6a37aa4a1789f9d749c9a719a986f98966d98966d98966d
95966c95966c95966e94956d91936b8f916a8d8f688a8e697b7c5a80815f838560
85876284865f8b8b65909169929069908d64928d659b936ca09b75a4a07daba686
9a9575807b5b6d68484742243e391b5e593b605b3e585336625d405954376f6a4d
6c664c6c664c504a305d583b696446888164958e719992759f9979979073797051
918869a2997ab0a587bfb496e4d6b9dbcdb0a89a7da09373a095758b80609f9272
8d80608e7f609e8f708a7b5c8e7f608b7c5f7e70535a4f31a3987aa9a081b4ae8e
8f8a6a817c5c867d5e8f846484795b9388689b9072978c6ca3987a968d6c92896a
968d6c9e9576a39d7ba39d7d9f99779f9979a39d7ba69e79a8a07ba59d789e9671
948f6995906a9e9973a8a37da8a47ea6a27ca39f799f9b759b997298966f97956e
96946b99976e9a996d98996f98996f97986e94966e91936b8e936b7f8060838462
868863888a638c8c668f8d668f8d668e8a648f8a62969169a69e77afa985bfbc9b
aaa98b7d795c4a492b524e3152513358543957563a5753384e4c33545037514f36
504c335b59405f5b424442295352364c4b2f5450355955387773568e896c969173
817a5d92896cafa687beb395ada284a496798a7d5d6e6141837453897a598b7c5b
998a6b8372548f7e60907f617a694b79684a7c6d50695b3e41361a675e41716a4e
ada88ba7a386b6b193867d608e83678a7f638e836790856991866a988d7194896d
968b6f988f729d9477a2997c9f9679979073958e71989272968e6a9d9570a39b76
a39b769b967098936d9b9670a09b75a7a37da6a27ca39f79a09c769c9a7398966f
96946d94926b98966d99986c9b99709a9b719a9b7198996f96976f94966e808161
8485638888648a8a6496946e93916a918d67938e669a956da59d76afa782b2ac88
b9b69787876b5a593d3a3a1e52513557573b5f5d4453533946442b4f4f37504e37
47472f514f385b5b43605e4758584044442c3f3f2548462d4c4a31636148585439
544f3250492c847b5e887f628d82648e80639d8e6f9687687566477565448b7b5a
8575539888678e7b5b8572547865477d694e6c5b3f9181677d6f54766a50645a3f
514b3169654a6f6e529b977c90896f91876c968c7190866b91856b988c7295876d
95876d92846a9c9076afa389bcb297b8ae93a79d82958e728d8669988f6e9b936f
9e9672a09874a098749f97739c96729b9571a49e7aa49e7aa39f7aa19d789f9b76
9b977297956f95936c96936a97966a9a996d9c9b6f9d9b729a9b71999a70979a6f
80815f8585618888628b896297956e938f69938e6699946ca69e77ada580aba37e
a4a07d7f7e6050503648482e4c4c325353393939214b4b335e5e4643432b5b5a45
55543f3b3a2555543f51503b504f3b565842484a344b4d355a5c44616149707058
5452396460458782659b947890876a897e6087795c998a6b9e8f70877756837352
7a67468b7857867353766343857053624f3169553a7b6a5079694f4a3c22655941
564f35615b434f4d343f3f25615f46706a5262583f6e644b7d735aa89c84cec2aa
c0b19ab7a891c5b69fc9baa3d3c4addaceb6dbcfb7d6ccb3d4cdb3d7d0b4bdb495
ada58199916d8d85618d8561958d699b95719f9975a19b77a29c78a29e79a29e79
a09c779d997498967096946d93906795926799966b9b9a6e9d9b729d9b729c9a71
999a708989678c89668e8c66928e689c9872908b639f9a74a6a17b9e9973bcb692
aca682847f5f58573b43452d3e402854563e4a4c3453553f4e503a484a34484a34
4749344345304c4e393d3f2a4a4c374b4c3a4d4f3a494c373c40295f634c43452d
5c5e4657573d8a866d7c765c6f684c62593c665b3da1937668593a8c7d5e908160
80704f7a6747837050836e4f826d4e5a4729917e605c482d4b3a2097876e6e624a
493f26554f3776715b64624b53533b5d5d45514d344d452e635842887d6790846e
766752a4937fab9a86c3b29e7c6b57665742a498828b7f69776c567d755e6f684c
a59c7d877c5ca79c7c9e9373a299788c8362aba28199906fa09a78a49e7ca59f7d
aca684a8a481a09c799995729e9a7597926c948f67918c64908d6495926998966d
9b99729a9b738a87648b87628e8a64948f678c875fa39e76a5a07a9b9571b3ad89
a09c796963435956374c4c324a4c3446483051533b4749335456404d4f39484a34
494b36464833454732484a353d3e2c4344324647354447345a5d48434832595d46
5c60495f614b5a5a4267654c4f4b324741273a3317776e51857a5c8072556a5b3c
9283647b6c4b7666458f7c5c7f6c4c412e10604d2f7160445b4a307a6a519d8e77
7e725a4237214a442c605b4554543c4c4e385e5e4665604a5e5840a199827d725c
796d577768537f6e5a8d7b677c6a5664523e7867538e7f6a6e624c6b5f49796e58
3a3017564b2d665b3b877c5c948969a89f7eaca382b0a7869f9675938d6b9b9573
9e9876a09a78a6a27faaa683a09c79938f6c98936d959068928d67928d65948f69
96926c98946e97956e8b87618b865e908b639890699b936cb2aa83a09b75b2ac88
c2bd9d9b98793d381b4541263c3c244d4f39484a34494b3542442e4e503a434530
42442f47493442442f474836464735414230424331494a384548355457423c412b
494e386a6e575456405959415250373d39205f593f564f33574d326b6044564b2f
8173568e8063837455796a4b8574569281636b5a3e4130146b5a4087765ca6967d
867760796e582a220d3d38224b49344948334b4d37595b434e4c35716b53827a63
8176606e624c6b5a4685735f7e69568f7a67715f4b8f7d698b7a665e4f3a493d27
7a6f59655b425a4f33877c5e7a6f516a5f41786d4fa19678ada485c9c0a1b3aa8b
938a6b969070a39d7d9f9979a19b7baba5859b957399916d968e69938b678f8a64
908a66908c67908c678f8d678d88608f885e958e649d966cb3ab8498906bc0ba96
a19d7ac9c6a76362445251355250373b3b234e503a454731484a344648324b4d37
3a3c2740422d46483340422d47483643443240412f3d3e2c4445333f402e454833
353a24464b3562655045473150523c5a5a424e4c334642295e583e6c654b5b5136
493f2471664a83785c85775a9385689d8f7295876a8a7c618070569f8f758e7e65
9788718c806a8c816b332d174f4a34504e394a4c364a4e374c4e36504e354a462d
605a427f745e5b4f3988776355402d7f6a578d786575604d8a756292816d70614c
41351f52473161573e64593d7d7254726749918668a297798b8062766d4ebdb495
cbc2a3bdb495918b6b837d5db2ac8caaa484999373a7a1819b927199916d978e6d
958d69938d6b938d69928c68918d68938c62968d629c9368a49b72a79f78aea681
aaa482928d6d6a694b4e4e343f3f2763624d4a4a3251513944442c50503853523d
51503b3c3b2646453048473344432f4645314544303b3a283a39273b3a28343523
484b363c412b50543d4f533c4547314e503a66664e55533a444027514b315e583e
585137635c42786e536f654a7a6f535f5438685d41aea387b7ab91beb096aea086
ad9e8783775f928771888069352f1953513a4e4e3651533b5a5e475658405c5c42
4e4a2f5c563c82785f65563f7d6d5637220d5f4934826c578f7a6588735e887660
84745d74685051472e554b32766b4fa99b80897e62655a3e766b4f8f846883785c
8f8468a59c7faaa184bbb295a2997c979073928b6ea8a1849e98789e95769f9474
9e95769e95749d94759a94729a94729a96739a91669e956aa59c71aca378afa87e
b2ad878f8b68484526504f334a4c343e402b494b3652513c4b4b333d3d254f4f37
51503b51503b3f3e2945442f42412d44432f42412d4e4d393c3b2946453341402e
3f402e474a353c412b4f533c3f432c50523c4f513b62624a48483059573e413d24
403a22595339817a606f684e3730164b44287770546f684cb6af93c9bfa4796f54
82785db7ab939e947b9c947d7a745c3a351f514f3845452d4e5038686c55676951
4c4c325d593e605a40796f568879626f5d4765503b5a442f816b569c867189745f
7a685275654e7b6f57655941887e6377694e887a5f8e83679f94788a7f637a6f53
766b4f978c7080775a675e419a9174b0a78aa7a0838e876aa19a7d8d86699b9072
9c91739d94759e95769d94759d94759b95759c9674a2966ca99e71afa477b2a97e
b1aa808a855f5a553541402249492f6466504b4e3b3e412e4d4c3745432c3b3922
4a483145432c514f3848463143412c3e3b284643303d3a275855423c392654513e
4744334b4a3842442f40442d4e523b42462f595b434a4c3452523a4848302e2c15
2f2d14736f566561489d977f3d371f1a14003e381e5a543a8a846a958f75dad3b9
cfc8aee0d9bfb4a993b4ac95aca48d76705858533d66644d48483045472f63674e
5f6247555539433f226a6548584e3391836998866e806c54846e577057416d5740
79654d75634b65553c574b31594d338b816657492e74664b8e8065ab9d826e6347
908569958a6e908569746b4e645b3e4a41245d5437cfc8abb7b0938c856890896c
968b6f998e729d92769e93779c93769b92759a93769b9575a59971ada47bb3aa81
b5ad86a19975312d0a57543545442860604840422d717260494a384a483345432c
403e2748462f3d3b2454533e53523d43422d3f3e2a49483439382459584431301c
4e4d393938263e3f2d4447324f543d5a5f485357405d5f4943432b45432c56543d
312c165b56407a745e827c648b836e756d58463e298a846ebdb8a4c1bca8c2bda9
ebe4d1f2ead5ece4cfc8c0abaaa28d776f5a403a244e493365634c48483041432b
60624a5a5d42727155615d423e381e544a2f94866c8f7f6699856d88725b968069
69533c79654d6e5c446b5b42665a42786c54887c647a6c527d6f5576684e92866c
43391e948a6f827b5f443d215d583b5a5538726d50504b2e6b66499a9679cec9ac
a19c7f998f749c9277a0967ba1977c9e977b9d96799d967a9d987aaca27fa9a07f
b2ac8ca6a183635e41413d2264624947452e5957424f4d384f4c39534e3b5a5541
433e2a42402b4e4c37484732464833484b363f422d474c3630351f424731585d47
42453231342140412f484b38373f2839432b535b444c513a4b4d3766644f65604c
49422f29210c5f5440403521675c48a297859f9482968b796a6353a59e94f2eee5
eae3d9ebe2d9eee4daf9efe3e5d9cbbeb2a23a2e1e423a274f49334e493345432a
4d4d335151374242286e6c536b674e7c765e92886f8e82687d6d5488775d432f16
7a664d98876d7a68506c5c4365563f6256407f735d675b459687746c5d4a978875
5d523e625a4549442e59574076765e4b4d354a4c34686a5250523a5a5c44666850
84846ccdcbb2cbc5adb1aa909993798e886eb1ab919b9679918b719f9b7eaea586
bbb4978c866c605c434e4c3538361f5d5b464d4b365a554156513d514a37544d3a
524d39443f2b49473252513c49483441442f4447323e432d4f57403a422b3b432c
434b343e432f3f4430494c39474c38414b3328321a454d364f543e44432e5a5843
655e4b5045314f422f5d503d5a4d3a9b8e7ba19483b6a998b0a392544b3c5e574d
fcf7f1e5ded6e9e0d9e3d9d0dbd1c7e0d4c8c3b7a9938777625a476b654f6c6751
3a381f3c3c225b5b3f4b4b316d6852645e48433b24837960a0947ca6987e9a8a70
8f7e649b8a70ab9a806151385040276d5e49ab9f89988d796b5e4b8070605a4a3a
7f7261938876514a3756543f53523d5456405c60495b6049575c455459424b4f38
6c705963675082846ccec9b3dcd8bfcac6ad8e8a718a866b8c886d9b977ca09c81
bdb4958e876a645e443e3a214a48313f3d2659574255533e524d3957523e4d4731
524c3648432f45402c4e4c3754533e4847333c3f2a3e412c3d422c4d553e4b533c
464b353e432d3f422d484b364d4f3a484b364f5740444c35393e28343722514f3a
6c67534f4732392e1a564936544530a3947fb0a18cc6b7a4d0c1acb7a893655a46
272010e4ded0e0dacae4ddcdf6eddef2e9d8e5dac8d2c7b57f7762645c476e6850
635f4637351c44442a5e5e44404026544f3956503a372f1872684fa89c8456482e
a8987ea39379a5947aad9c8254442b76664d83745f5f533d857a66928773908372
7d705f8b806e847c69504b3735331e43422d4c4e386c7059646851656952393d26
42442e494b356668525e5e4673715abebca3b4b299adab9287866a504f33818064
6b6a4e
grestore
grestore
showpage

%%EOF

%%EndDocument
 @endspecial -568 1061 a
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 39.83366 -94.74768 } PutCoor PutBegin  end
 -568
1061 a -801 1294 a @beginspecial 0 @llx 0 @lly 56 @urx
56 @ury 560 @rwi @setspecial
%%BeginDocument: /media/krell/Kiki/patchysLibrary/Documents/Thesis/so_nauticalChart.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: jlibeps 0.1, https://sourceforge.net/projects/jlibeps/
%%Title: LaTeXDrawPicture
%%CreationDate: Sat Nov 24 22:15:27 CST 2018
%%BoundingBox: 0 0 56 56
%%DocumentData: Clean7Bit
%%DocumentProcessColors: Black
%%ColorUsage: Color
%%Origin: 0 0
%%Pages: 1
%%Page: 1 1
%%EndComments

gsave
-0.0 56.0 translate
1.0 setlinewidth
10.0 setmiterlimit
0 setlinejoin
2 setlinecap
[ ] 0 setdash
gsave
100 100 8 [1.7638888888888888 0.0 0.0 -1.7638888888888888 0.0 0.0]
1.0 1.0 1.0 setrgbcolor
newpath
0.0 -0.0 moveto
56.692913 -0.0 lineto
56.692913 -56.692913 lineto
0.0 -56.692913 lineto
0.0 -0.0 lineto
closepath
fill
newpath
0.0 0.0 0.0 setrgbcolor
{currentfile 3 100 mul string readhexstring pop} bind
false 3 colorimage
fefefefcfcfcc7c7c7d4d4d4bbbbbbfcfcfcffffffffffffffffffffffffffffff
fffffffffffffefffffffffed0d6d7ddeef7daebf3d8eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2e2f3fb929fa4acbcc19da6aedaebf3
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3dbeaf3d9e9f2d9ebf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
dbebf5c9d7dccfdfe4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2ffffffffffffc4c4c4f2f2f2b1b1b1f6f6f6ffffffffffffffffffffffff
fffffffffffffffffffffffffefefeefeeeac0cfd6d9ebf3daeaf1d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf4cedce2c0cfd4c8d4db
d8e9f1daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf2dbecf4dcedf5dcedf5daebf3
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2daecf5b9c6c8ddeef5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2fefefeffffffe3e3e3cacacacdcdcdfcfcfcffffffffffffffffff
fffffffffffffffffffefffefffefefffefffffffeeef0f3d5e5eedaeaf3d9eaf2
daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2daeaf3d9eaf2d9eaf3daeaf1d9eaf2d9eaf2d9eaf1d9eaf1d7eaf3daecf5
daeaf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d4e5edafbdc4becdd4949fa6
e2f3fbd9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9ebf3c3ced2dceef7d9eaf2d9eaf2dcedf6cfdfe7d9eaf3d9eaf2
d9eaf2d9eaf2d9eaf2ffffffffffffffffffffffffffffffffffffffffffffffff
fdfdfdd7d7d7e0e0e0fffffffdfdfdfffffffffffffffffffafafbd0d8d9d9eef8
d9eaf2d8e9f1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2daebf3daeaf1daecf2d9ebf4d7ebf4dcedf6e0eef7ddecf6d8ebf3daecf4
d8e9f1daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3aebcc2c7d8de
a4b2b8deeff7d8e9f1daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d8e9f1c5d3d7dbedf4d9eaf2daebf3beced58d989ec7d5dc
d9eaf2d9eaf2d9eaf2d9eaf2ffffffffffffffffffffffffffffffffffffffffff
fffffff0f0f0dfdfdf858585f0f0f0fefefefffffffffffffffffffefdfef6f7f7
d5e0e4daebf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daebf3d8eaf2d7e9f2cfdee5ced8ddd8dfe1e5e7e6e6e8e8e2e1e3e5e6e7e7e9e9
d3d8dcd7e8eedaeaf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3cadae2
b9c6ccc0ced7dcedf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2daebf3daebf3d9eaf2d3e4ead1e0e4d9eaf3d9eaf2d9eaf2d1dee69ba4aa
cfe0e6d9eaf2d9eaf2d9eaf2d9eaf2fffffffffffffffffffffffffffffffefefe
fdfdfdffffffcacaca959595c9c9c9ffffffffffffffffffffffffffffffffffff
fffffffbfbfbccd3d4deedf6d9e9f3d7eaf1d9eaf3daebf3dbecf4d9eaf2d9ebf4
d8e9f0d1e1e8dbe5e9daddddf4f3f3fffffffffffffffffffffffffefefefefefe
fdfdfdfefefcc5cbcbdbeef7d8e9f1dbecf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9ecf3d2e3eacedde3cbdde3d8ebf2d3e1e8d5e2e8d9eaf2d9eaf2d9eaf2cfe0e7
a4b0b8d2e0e7d9eaf2d9eaf2d9eaf2d9eaf2ffffffffffffffffffffffffffffff
fdfdfdfefefec3c3c3a8a8a8aaaaaae9e9e9ffffffffffffffffffffffffffffff
fffffffffffffffffffeffffecf0efcfd7dbd4e2e8c8d6dfcadae0d6e1e5d1dbdd
e8f0f3eceeeef1f2f0fefefefffefffffffffefefeffffffffffffffffffffffff
f4f4f4e4e4e4f2f2f2fdfdfdcacfd2daeaf2d9eaf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d8e6ef9ba7af9ca6ad9fabb3d8e8f1cfe0e8dbebf4d9eaf2d9eaf2d9eaf2
d8eaf1daecf3daebf3d9eaf2d9eaf2d9eaf2d9eaf2ffffffffffffffffffffffff
fffffffefefeedededbcbcbcd2d2d2dcdcdcffffffffffffffffffffffffffffff
fffffffffffffffffffefffefdfdfefffffdfffffffdfffdfbfbf9fcfcfcffffff
fffffffffefcfffefffefffefffffefefdfdfefefefefefefefefeffffffffffff
e0e0e08f8f8fd3d3d3979694ffffffeef0f0d4e4ead9eaf4d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2dfedf6adbbc3a2abb3adb8c0d9ebf3c1cbced9e9f2d9eaf2d9eaf2
d9eaf2dbeaf3d9ebf3dbe9f2d9eaf2d9eaf2d9eaf2d9eaf2ffffffffffffffffff
fffffffffffffefefefffffff3f3f3ddddddfffffffefefeffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffff999999d2d2d29a9a9afcfcfcf8f8f8d0dbdedcecf5d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2daebf3d5e6eed0dfe7cedee5daebf2d3e5ead8e9f1daebf4
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2ffffffffffff
fffffffffffffffffff1f1f19e9e9ee9e9e9fffffffefefefefefeffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffefefefcfcfce0e0e0f3f3f3fefefeffffffd1d4d7dbeff5d9eaf2
daebf3daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf3d9e9f1c0ced4dbecf4d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2ffffff
fffffffffffffefefef3f3f39c9c9c9d9d9dedededffffffffffffffffffffffff
fffffffefefefffffff1f1f1f7f7f7cacacafefefeffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffd6d8d5d9ebf1
dcebf4b7c6cbcadce1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf2d7e9f1d6e4ecd9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
ffffffffffffffffffffffffcececeadadadc9c9c9f7f7f7ffffffffffffffffff
fffffffffffffdfdfdfefefe9d9d9dcfcfcfc2c2c2a3a3a3ffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8e8e6
cedde3dff2f98e9aa0949ca4def0f8d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dcecf4c9d8dfd9e8f0
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2fffffffffffff9f9f9a8a8a8fdfdfdd9d9d9fffffffdfdfdffffffffffff
fffffffffffffffffffdfdfdffffffbebebec3c3c3dadadaa8a8a8ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
f4f2f0c6d2d9e0f1f995a2a8abb6bddcedf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2deeef7c2cdd2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2fefefefefefefbfbfb9f9f9fb9b9b9fefefeffffffffffffffffff
fffffffffffffffffffffffffefefefffffffbfbfbfcfcfce2e2e2fefefeffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffff6f7f3bac5c7d9ebf3d6e7efd9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3c4d3d8
dbecf5daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2fdfdfde4e4e48f8f8fffffffebebebffffffffffffffffff
fffffffffffffffffffffffffffffffffffffdfdfdfefefefdfdfdfefefefefefe
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffff6f6f2bbc5c8daebf4d8e9f1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1d9eaf2
cad8dcdbebf4daecf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2efefefc0c0c0ececece9e9e9ffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fefefeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffff8f6f4b9c5c8daebf3daebf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3
cedee4d7e7efd9eaf2daeaf1d9eaf2d9eaf2d9eaf2d9e9f2d9eaf2d9ebf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2fefefee8e8e8cdcdcdfffffffefefeffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffff6f5f4bbc8cadaebf4d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
ddedf5b8c7cddaecf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf2dbecf4
d8e9f1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2bcbcbcf2f2f2fcfcfcfdfdfdfefefe
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffff4f3f2c8d6d8d9ebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daebf3cedde4daeaf1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf2d8eaf2d4e3ec
b0c1c9dcedf5d9eaf2d9eaf2d9eaf2d9eaf2dbecf4afafafecececfdfdfdffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffe7e7e5cfdde4d9ebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf3daebf4d8eaf2ddeef5dbeaf2d9eaf4
d8e9f0d2e2ebcedce3d8e9f2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf2
c6d5dd919aa0d0dfe7d8e9f2d9eaf2d9eaf2daebf3c4d3d9cfcfcffcfcfcfefefe
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffdee0e0d5e6eed9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daecf3b9c8cf95a2a996a2a89cabb2dbedf4
daebf3dbeaf2d3e1e7d8e8f0daebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf3
d9ecf4acbac17e8a90d8e9f1daebf2d9eaf2d9eaf2daebf4b4c1befffffff9f9f9
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffd0d5d6ddeef7d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf2e4f2f9838d92bbc7ca9aa6ad
dbeaf2d8eaf2d4e0e8c3d3d7daecf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf1dcedf5ddecf4daecf4d9ebf1daeaf2d9eaf3d2e2e8cfdbd0d6d6d6
7b7b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffefefefffffffbfbfaced7d9daedf4
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf3b8c8cfa3b0b6
b9c7cedaebf3d9eaf1d2dee4daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9e9f1dcedf4acbab7d6e2d5
e9e9e98b8b8bffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffefefefefefeecededd4e2e8
d7eaf3daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf4daebf3
ddeef5dbedf5daebf3ccdae1d2e2eadaeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf4bac9cbcfdaca
d5e1d4f2f2f2d2d2d2ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffcfdfcfffffdcacfd2
d8eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9ebf4d1e2eadaebf3d7e8f0d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf3d9eaf1d9eaf3cadae0ccd7cd
d4e2d1d5e1d3fffffffffffffefefeffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdfe1df
d1dde5dbecf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2dae9f1bdc9cdd8e9f2daebf3daebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d8e9f1d9eaf2d9eaf2d9eaf2d9eaf1d9eaf2e0f1faa7b4b4
d6e2d2d5e2d6d5e1d3fdfdfdfefefeffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffcfcfcfffffffffffffffffffffffffffffffffffffcfbfb
cbd1d2daecf7d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2daebf3d1e1e9d8eaf3daebf3daebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d8e9f1daebf3d0e0e7d9eaf2d9eaf2daebf3dbecf3b5c6cd
dce6dbd6e2d7d5e1d0d5e1d4c9c9c9f8f8f8fefefeffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fefefefefefeaaaaaae8e8e8bdbdbdcececefffffffffffffffffffdfdfdffffff
ecececd5e3ecdbebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2dbeaf2dbebf4c9d7dbcad8dcdaeaf5d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daeaf1dfeff9788187ccd9e1d9ecf3d9eaf3d2e2ea
b3c0bbd8e4d6d5e1d3d6e2d4c0cac0bfbfbffdfdfcffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffefefeffffffccccccf5f5f5b5b5b5c4c4c4fffffffffffffefefeffffff
ffffffc2caccdbecf4d8eaf1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d7eaf2d8eaf1d0dce2dceef5d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d7e8f0d9e8f06a7378cad7dedaedf7
d6e4ebd7e3d6d5e1d4d5e1d3d7e3d55c6057d3e1e5d2d8d8d6d8d4fffffefffeff
fdfdfefefefefefefefffffffffffffffffffffffffffffffffffffcfcfcf5f5f5
eaeaeafffffffefefeffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffefefeffffffe9e9e9efefefbcbcbcecececfffffffffffffefffe
feffffdddeddd5e6eed9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2dbecf4dbeaf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1d8e9f2daeaf5d9e8f2
daecf4d9eaf2d8e9f1d9eaf3dcebf4c8d5dbd6e6eed8e9f2daedf6dfeef7d9ebf4
daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf3dcebf37e888c
cad8e0b8c6c2d5e0d4d5e1d3d5e1d3d5e1d461655cd8ebf5daecf5d4e5eccfd7db
e6e8e6fdfcfcfdfdfdfdfdfdfffffffffffffffffffffffffffffff9f9f9a6a6a6
cfcfcf979797f9f9f9ffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffefefeffffffffffffffffffffffffffffffffffff
fefefdfbfbfbccd5d8dbedf5daebf3daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2def0f7a1adb4c6d4dcdaebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf3d4e4ecb2c1c7
dceef5d9eaf2d9eaf2d9eaf2daebf3d4e5ecd4e5ebdaebf4daeaf2aeb9be9facb3
d6e7efdaebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf3
d7e9f1727d7ea8b2a9d6e5d4d5e1d3d5e1d3ced9cc949683d9ebf4daeaf3daeaf2
d8ebf3d8e8efc4c6c7fffffffdfdfdffffffffffffffffffffffffffffffffffff
c9c9c9b9b9b9cacacaf4f4f4fefefeffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffefefefffffffefefefdfdfdfffffffefefeffffff
fffffffffefff3f3f4d3e3ecd9eaf2daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2e3f6fd5a6266acb7bedbecf4d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dcecf5c1cfd5
9ea1a3b2c0c7dbebf4d8e9f1daebf3c4d3dbd2dfe6d8eaf3d9eaf2daebf3dceff8
8f989bd2e3ead9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf3d3e2ead4dfda848983c4cfc3d5e1d2d5e1d3ccd7ca9b9f8ad9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2dbedf3d2d6d6ffffffffffffffffffffffffffffffffffff
fffffff9f9f9f2f2f2e0e0e0fffffffefefeffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffc8ceced9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2e0f0f9939da2b8c6cedbecf4
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf3
cbdae06c767bcfdde5d9eaf2dbebf5cbdae0daebf2d9ebf3d9eaf2d9ebf3dbeaf2
aeb9c2b2c0c5d8e8efd8e9f2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf2daedf5
a7b5b9d8ebf3c6d4dacedacbd5e0d47f857eb0b9aed8e5d6a9b3a8b6b59ed9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9ecf4d2d7d8fffffeffffffffffffffffffffffff
fffffffdfdfdfefefefffffffefefefefefefefefeffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffdededdd1e1e7d9ecf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf2d9eaf2d9ebf4
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d8e9f1daeaf2e1f0f7d7e9f2dceaf3ccdee4d3dfe5d7e9f1d9eaf2d9eaf2daeaf2
daeaf2d9eaf2daeaf2daeaf2daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf3
dbecf490989bd6e7efcad9d1d4e0d1d6e3d3dde8da889089cbd3c9545748fdfed6
d8eaf3daebf4d9e9f1daeaf2daebf4d9ebf3cdd1d2fffefeffffffffffffffffff
fffffffffffffefefefffffffffffffefefeffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffdfdfdfdfdfccfd9dcdaedf5daeaf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3
d9eaf1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d7e9f2d9ebf4c6d2d8d4e5eddaebf3d9eaf3d9eaf2d9eaf2
d9eaf2d9eaf2daeaf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2def0f9a2aeb8bdcbcccddacbd6e2d4d5e1d3d5e1d3d5e2d3697069aead94
ffffd9dbebf3d9e9f1daeaf4d9e9f2d6e1e7cbd0d2fffffffdfdfcffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffefee2e5e7d5e3ead7e8f0d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1d8e9f1c6d2d8dbedf5d8e9f1daebf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d8ebf2d8e9f1d9e7f0d4e1d9d4e0d3d5e1d3d5e1d3d5e1d3d8e5d69da79a
a7a78effffd9cedce3c7d2d5d1d8dae8ebedf1f2f0fefffdfbfdfcfdfdfdffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffafaf8c8d1d6daebf3daebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2deeef6bdcbd1daeaf4daebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9ebf3dbecf4bbc8cfcfdaccd6e2d5d5e1d3d5e1d3d5e1d3d6e1d4
c5cfc3868771ffffdaf6f5f5ffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffefefefefefec8cdcfdeeff4d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9ebf2daecf4c0d0d5dcecf4d8eaf1d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3daebf3dcedf5dbecf3d9ebf2
d9e9f3dae9f2daeaf1d9ebf2ddedf6becbc7d5e0d1cbd5c8d5e1d3d6e2d4d6e2d4
d6e3d5cad3c982836dffffdbfffffffffffffefefeffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffefefeffffffecececd3e0e6d7ebf5d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2ddedf3b8c7cdd7e9f1d8eaf1d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf2d3e4eb959fa6bfcdd4
c7d6dfdcedf6ddeef6daebf4d9eaf3d3e1eacbd6cbd9e4d8bbc5bcb5bfb4afbaae
dce6dad4e1d3d1dbd1757661ffffdbffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffefefefbfafac7ced1d9eaf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daeaf1d9eaf2d8eaf2d9eaf3dbecf5d8eaf2c4d2d9deedf3d9ebf4d9eaf4dfeff7
d8eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daecf4bfcfd5838a8f
9da5ab949ea58f9a9e89969bc8d5ddd9ecf4aab8bcd3ddced7e3d4c0ccbdacb7ac
bfc9bda2aca1cad6c89ea69ca0a08affffdaffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffed2d6d7dbebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
dbebf5d8eaf5d8ebf5dbebf5dceaf0b7c5cbd5e3ead9eaf2d9eaf2daebf4c5d5dc
889296e0f2fad8e9f1d9eaf2d9eaf2daebf3daebf3d9eaf2daebf3d9ebf3d2e0e8
c5d5ddc9d7e0c2ced6acb8bdabb9c0cddde6d9e9f1d1ddd6d5e1d2d5e1d3d5e1d3
d5dfd2d3dfd1d5e2d6c9d2c75c5f57ffffdcfeffd7ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffedf0efd5e2e8d9ebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
dbebf4cedce2cfdce1c9d5dac9d6dbcbdbe1daeaf2dbebf3d9eaf2d9eaf2dbeaf4
cadce2788185e6f8fed8e9f1daebf3daebf3dbecf4d6e8f0d9eaf2daebf3b5c3c9
99a5aae4f7ffdaecf5daebf3dcedf6ddeef7dcecf5c3d1d6ccd8cdd5e2d2d5e1d3
d5e1d3d4e1d1d5e0d582897f92927ef9f8d3fcfed5feffd7ffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffefdfdfcfcfcffffffc1c9ccd9ebf3d9ebf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbe9f2d9eaf2
d8ebf1bbc4c5daeaf5daebf2daeaf2dcebf1daeaf4dbebf2d9eaf4d9eaf2d9eaf2
daecf5b7c4cc778187e6f7ffd8e9f1d9eaf2daebf3c3d1d899a3aaddeef6d9ebf2
dbe9f4deeef4788087d3e6ecd7ebf2dbebf3dae9f0daebf3bec9c1d7e4d3d4e1d1
d6e1d2d5e1d2dbe4da5e615be4e5c3fdfed5fdfed7fcfcd4feffd7ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffefefefcfcfad1d4d4d7eaf2d8ebf3daeaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d1e0e8d3e1e9d0e1e9a2b1b9e8f7ffe7f6ffdef0f6d9ecf3d9e8f1d9eaf2
d9eaf2d8eaf1dcedf5ddedf4d8e9f1daebf3daeaf2d9eaf4d4e5eca4b1b7ddf0f7
daebf3daeaf2d8e9f0b7c6cda5b1b8a3adb5e0f2f9d4e5edb8c3c2dbe8d8d4e0d2
d7e3d5cfdace848d857a7c6de5e5c5fffed9fafad4cbceaef4f5d3feffd7ffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffe6e9e9d3e3ecd9ebf1daeaf2
daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d8ebf2dbebf3d2dee6d5e7f1a4aeb29fa9af4d5356000000889097c8d8e0dbecf4
d9eaf2d9eaf2dbebf3d7e7f0daebf4d9eaf2d9eaf2d9eaf2d7e9f2daebf5dbeaf2
d7eaf2dbeaf2d9ebf2daebf3d9ebf4b3c3c9bdcbcd8a9599dbecf3d3dfd3d5e1d2
d5e2d4c5d0c155574de4e3c6ffffddfcfdd6fefed6d7d7b600000080806cffffda
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffefefefffefde4e6e5d1dee5d9eaf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d2e2e9d3e3ebbbc9ce7c888f4c5051000000676f71838690
ddf1f9d8e9f3d9ebf3dcebf4dbebf4d9ebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daebf4d7e9f3d9eaf2d9eaf2d8e9f1ddeef6a3b0b4dde8dfb5bcb1d5e3d5d6e2d4
dceadb9ea69d767869f3f4d0ffffd9feffd7feffd7ffffda9d9c85000000ededce
ffffd9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffefffffffefce8ebeacedce3daebf3d9ebf4
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2dbecf4d9eaf2c3cfd4ddeff8e3f5fcc7d7dbb0bbbf53595b
acb8bed5e4eddbebf5d5e6ed949ea389959bd7e8efd9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d0e0e7c5d4dbd7e9f2d9e9f1dbecf4cbdbe1d0ddd1d3e0cfd8e5d5c7d1c6
a5ada2888d8291907bffffe1fdfed4fbfbd7feffd7feffd7ffffe048474034362d
ffffe5ebeac7ffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffeeeeeefffffff5f5f5fefefeffffffffffffffffffffffff
fffffffffffffffffffffffffefefefffffffeffffeeeceecad9ddd9ebf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8ebf2d8e9f3
d9eaf2daebf3d9ebf4d3e3eaa8b4bbb8c7cccfdde0d9e7ead6e5eccee0e7a8b3bc
a4b4b8d9ebf2b3c1c8ccd8dfd9e9ef9da9ac929fa4bccad2dceaf0d6e8f0dbeaf4
d9eaf2daebf3bac9d1b8c3c7c8d7e0daecf4d3e2ebbcc6bed5e0d2dce8d7a0a9a2
46473bd5d4baf4f5ceffffd9feffd7feffd7feffd7feffd7feffd7ffffd8ececc9
eaeac7ffffdbb5b39bffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffe6e6e6abababcecece969696ffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffefefef8f8f8c9d2d4dbeef6d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf3daebf3dbecf4d9eaf2d9eaf2d9eaf2d9eaf2daebf3daebf3dbecf4
d2e0e7cedde3daebf2d9eaf2cadce2d8e4ea839094c0c6c8565e639faaad839095
d9e7efdceef5d9eaf1ddedf5becfd7a8b7becedce3a1adb5939da4848f91bac8cf
cfe0e7d8e9f1dcedf5adb9bea2afb5d8eaf2d6e5eeb1bfb5d8e4d6deeade8b928c
6d6d5df9f9d7dbdcb9ffffd9feffd7feffd7feffd7feffd7feffd7feffd7feffd7
fefed7ffffd8ffffd9a6a890ffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffb7b7b7c2c2c2888888ffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffd0d2d3d6eaf2dde8f4
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d2e3ea8f9ca193a0a5dbecf4d9eaf2d9eaf2d9eaf2dbecf4ccdbe3
c1ccd1d6e5ead8e5ebbfced4d3e4ebd4e4ec939ea4bac8cd9fadb4acb5b9afbdc3
c5d3dbd3e4ebdcedf9dbebf2d9ebf4d9eaf2daebf4cad8e1acbbc2d0e1e8becad3
8e969eabb8bed9eaf2d9eaf2d7e7eed6e8efe2f0f59ca69dd8e3d4d5e6d6515851
9a9c88efeecdadb094a7a78cffffdbfeffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd6feffd6ffffd8a9aa91ffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffefefef9f9f9fffffff8f8f8fefefeffffff
fffffffffffffffffffffffffffffffffffffffffffffffedee0dfd0dfe7d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d4e4ec9faaaf859096dbecf4d9eaf2d9eaf2d9ebf3c9d8df
cedce1dcedf6d9eaf2d9ebf3d9eaf3cbd9ddbfccd4afbdc3c2cfd7b5c3cbb4c1c7
b4c4ca9dacb3a1acb1b0bbc2a5b2b8b6c5cbdbecf4d8e9f1d9ecf3d3e4ebb7c7ce
b8c5cdc5d3dabdcbd3daebf3daebf3dbedf6d1dfe1b9c4b9dde9dadde9db818780
a8a994fdfdd7a5a48d918f7afafbd6feffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7fdfed8f8f9d3b9b89fffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffdfdfdfefefefefefefdfdfd
fffffffffffffffffffffffffffffffffffffffffffffffff5f6f5d5e0e6daecf5
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daeaf2aebdc4c9d9e0daebf4d9eaf2d9eaf3c9d9de
d6e2e8d8eaf5d9eaf2d9eaf2d9e9f1daebf2d8eaf4bfcacdd7dfe16d777a6c767b
b6c0c2afbac0b0bbc1858f94ccd7db858f9489959ad9eaf3dbecf4dbebf3d8e9f1
d9eaf2d6e6eb91a0a7e4f2f9dbecf5d9eaf3bbc8cdbfcbbfd5dfd1d6e2d4b4bbb2
626355fefcd29c9886a9a792ffffddfcfdd6feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7fdfed7fdfdd6dcdbbfd8d8baffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffefefe
fffffffffffffffffffffffffffffffffffffefefdffffffffffffdde4e6d8eaf1
d8e9f2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dcecf4daecf4daeaf2dbedf5c3d0d5
cedde3d9ebf4daeaf1d9e9f2d7e8f0aebbc2bccbd1daecf4d4e7eeacbac1bfcbd1
a5b1b7bec9cfb9c7cfbeced6c5d4dbdbecf3d6e6edd2e3ebd7e8f0dbedf6dbebf3
daebf3d9ebf2d9ebf3deeef5bac8d0adbcc4cedbdec8d2c7d6e2d4d4e2d2d2dfd1
3c3e3bfafad8b5b29d9d9c87fcfdd6fdfed7fefed7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7fdfed7ffffd8c8c8aedfe0bfffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffd6d2cee6ebeddaeaf1
d9ecf3dbebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf4d0dddf
cedce4dbecf4d9eaf2daebf2d9eaf2d0e0e9d9e5ed8e9ca3ddedf4d9eaf2d8e9f1
d9ebf2ddeff7dceff6d8eaf1d8e9f1d8e9f1d9eaf2d9eaf2d9eaf2daebf5bdc9d0
c3d3dadaebf3d9eaf2d9eaf2d9eaf2d9ebf3e2f2f99da8a4c7d0c6d5e2d4d5e2d4
787e77b1b398b5b59b918f78ffffe6feffd6feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7fefed6ffffe29e9e85b0b095ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffdfdcdaeaebeab6bdbf
daebf3d9e9f4d9eaf1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3c9d5da
cadae0d9eaf2daebf3d9eaf3d9eaf2d9ebf5ccdbe16b747ab3c0c9d9ebf5dbe9f2
daebf3d8ebf3d9ecf5d9e9f1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf3
c3d2d6c2d1d8daebf3d9eaf2d9eaf2d9eaf2dbebf4b4c1c4dce5d9bfcabcb0baaf
4a4b47c6c6aaa4a18d9a9a84f8f8d4fdfdd4feffd8feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7ffffd8b7b79ddcdcbebfbea6ffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffdfdfdfefefeeae8e6c0c7c9
cedce2daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf2d5e4eb
c6d3daddecf4d8eaf4daebf2d8e9f0dbecf7d8e9f2ddeff8eafcffe2f4fadbecf3
daebf5dcedf6d9e9f2dbe9f3d9e9f3d9eaf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9ebf3d0e0e8cddee6d9eaf2d9eaf2d9eaf2daeaf3d6e6efc0d0c6d7e2d5d7e6d5
656860d6d6b6d2d2b390917deeeec6ffffd8feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7fafad4b1b095e2e2c4e3e2c0
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffefefefefdfdd6dce1
deebf4daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbebf2
b6c5cbdaebf3d9eaf2d9eaf1dbecf4e8f7ff7d8b89d2ded9b5c1bdadbab8a8b6b5
9daba9bdcbca8b989ac9d6dad1e0e7deeef6daebf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d8e9f1d9eaf2d9eaf2d9eaf2d9eaf2daebf3deeef7c6d7d8d2ddcfd5e1d5
494c48e1e2bef5f4d1606055e9e9c8fdfdd8feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7ffffd8d6d5b7ececcb999881
fdfdd5ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffefeeeeeef
d4e1e8d9eaf3d8eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf3d9eaf2daebf3
bbc9cfe0eff6d9e8f3daecf2def1f7b8c3c5c2cfc1e2ecdcd5e1d3d9e5d6dae5d7
dbe7d9dbe6d8dae5d6d8e3d4d7e2d0b9c4b5c0cac2bdcbccd8e7eedbecf5daebf4
dbecf4dcecf5ddedf5daecf3dcedf6daebf3d3e4ecd0e1e9b4bfc2c6d1c6dfebdb
757971dadbbcefefcc848472d1d3b7ffffd9fcfdd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7fefed6feffd7f6f7d19b9a83b5b397
dddbbffefed6ffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
c5ced2daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf3d8e9f1
d3e3ead3e1e6d9eaf3d9ebf2dcecf598a5a2dbe7dbd4e0d2d6e2d5d5e1d3d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d6e2d4d5e1d3ccd9c7c3cfc5bbc7bf
c3cfccbdc9c5acb7b3acb6b3bbc5c2919a94c2cac2b4bdb4d0decfd5e1d1d8e4d3
9aa39a8c8b79f7f7d2a9a794c0bfa6fdfdd7fdfdd7feffd8feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7fdfed7fefed78e8d79f2f2cd
b9b6a3ffffd6feffd7ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
cad0cfdaeaf1d9eaf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf2
dbecf4c7d6dad7e6efd8ebf4d9ebf2cadae1d1dccfd5e2d1d5e1d3d5e1d1d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d6e2d4d6e2d3d7e3d5
d2decfc8d4c5d0dcccd2decfd1ddcfd4dfd1d7e4d6d7e4d5d7e5d4d6e2d4d5e2d3
d4dfd354564efdfddbadac959e9c88fefedafdfdd6fefed8feffd6feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd6e0e1c3d9d9bc
a5a78dcacbadffffd9feffd7ffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffefefefdfffe
f1f2f3d1dcdfdaebf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9ebf3e1eff6b8c4c8daebf3d9eaf2deeef8b4c1bfd4e0d3d5e1d3d5e1d3d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d7e2d3
d8e5d3969894cdceaebdbca68d8b75ffffddfbfbd6feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7fcfdd6fdfdd7ffffe09c9a81
e4e3c5292b26000000f6f6d6ffffd7ffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffefefd
ffffffcbd1d2d8eaf3d9eaf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2dbecf4c7d3d9d3e2e8d9eaf2d9eaf2deeef5b5c2bdd7e4d4d5e1d3d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d6e2d4d5e1d3d5e1d3d5e1d3d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3
d9e6d889918a9ea087dbdaba787765f0f0cefeffd5fdfed5feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd6ffffd99f9d84
e2e2c2b8b79a2c2b26898a78ffffdbfeffd7ffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffdbdeded3e3ead8ebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2dbebf3bdc9cddeeef7d9eaf2d9eaf2dbecf6bcc8c7d5e1d4d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d2ddd0d2ded0d5e1d3d5e1d3d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3
d6e2d49fa99d9c9c87e8e6c5706f5eecebccfeffd9fbfcd4feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7fcfdd4eaeac9
d3d3b7d0ceb3e7e6c4ffffdbfeffd7fdfdd9feffd7ffffffffffffffffffffffff
fffffffffffffffffffffffffefefefdfdfdfdfdfdfefefefdfdfdffffffffffff
fffffff7f7f7d0d9dbdbedf6d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d8ebf3ccdce4c1d0d8c6d6ddd1e2ead9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d8e9f1c4ced2daecf5d9eaf2d9eaf2d8eaf1cad7dbcfdacd
d5e2d2d7e3d4d5e1d3d5e1d3d5e1d3d4e1d3cedacc565c54787e75d5e3d2d5e1d2
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d4e1d3
d9e6d75f655f9b9c88ffffd9b6b79ccfceb2ffffd9feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7fdfed7ffffde
b0ae97e5e5c8a4a38afeffd8feffd7feffd7feffd7feffd7ffffffffffffffffff
fffffffffffffffffffffffffffffffefefeecececf9f9f9e9e9e9f8f8f8ffffff
ffffffffffffdde1e0d6e6edd9eaf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9ebf4c8d5ddb0bcc4c5d3dacedde4d8eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d3e2ead3e2e7d8e9f2d9eaf2d9eaf2d9ebf3dcedf6
b9c6c4d3dfd2d4e0d2d5e1d3d5e1d3d5e1d3d5e2d4d6e3d4bec7bbb3bdb1d6e4d3
d6e2d5d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3
cedcc86f7271afae94ffffdcfcfdd5ffffdcfefedafcfdd5feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7ffffd8
d4d3b6bcbba29c9b82ffffe1fefed7feffd7feffd7feffd7feffd7ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffcacacaddddddaeaeaecccccc
fefefffffdfef2f1eebfcdd4d9ebf3d9ebf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2cfdfe7b6c7cfd1e2e9cfe0e8d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9ebf2dae9f2d8eaf3d0dce2d4e2e9d9eaf3d9eaf2d9eaf2d9eaf2
d9eaf1daebf3cbd5dab9c4b8dbe6d8d5e1d4d6e2d4d5e1d3d5e1d3d6e2d4d6e2d4
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d4e0d2
d9e5d4565957dadbbaffffdbfeffd7feffd8feffd7fefed7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7fdfdd6ffffd7
f1f1cdb1af97e9e8c6dfdec0feffd8feffd6feffd7feffd7feffd7feffd7ffffff
ffffffffffffffffffffffffffffffffffffffffffffffffdededed9d9d9c9c9c9
bebebefffffffdfcfccad1d2dceff7d9e9f1dbeaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3dcedf5daebf3daebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d8eaf1daebf2ddedf6bbc8ccdaebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9edf5deecf0b4c0b6d2decfd4e2d2d5e1d3d5e1d3d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3
d4e2d2d5e3d55e6055ffffe6fefed7feffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7fdfcd6
ffffdac6c7aaf1f1d0a5a38bfdfdd8fefed7feffd6feffd7feffd7feffd7feffd7
fffffffffffffffffffffffffffffffffffffffffffffffffdfdfdfcfcfcfcfcfc
f8f8f8fdfcfdfdfdfdedeeedd2e3ead9eaf3d8e9f1daebf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d8eaf4d9ecf3c6d3dcd0dde1d7ebf4dbebf1d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daeaf2d9eaf2d9e8f1c2cfc8d2ddced6e1d4d5e1d3
d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3
d4e1d2e1f0df676c65c0c0a8ffffd6fdfed9feffd7feffd7feffd7feffd7feffd7
feffd7ffffd9ffffdafeffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7
fdfdd7f0f0cd9e9d879e9b86fbfadafeffd5feffd6feffd7feffd7feffd7feffd7
feffd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffc9d0d2d9e9f4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf0d9eaf4c2ccd1dbedf6d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf3c0cdcbc9d4c7
d5e3d4d7e3d5cfdaccd5e1d4d4e2d1d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3d4e1d3
dbe7d7b4bdb362665bcccbaeffffdafeffd7feffd7feffd7feffd7feffd6fdfdd7
ffffd6cbcbadb8b7a2b5b59cd6d5b6eeefcdffffd8fefed8fefed7feffd7feffd7
feffd7fbfcd89e9e83eeeecfd5d4b6feffd9feffd7feffd7feffd7feffd7feffd7
feffd7feffd7ffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffe8e9e7cbdae2daecf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbebf1d1e2e9d2e0e7d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d7e9f0dbebf3
ccd8d4cfdccdd3e0d3c6d0c5b9c4bad6e2d3d5e1d3d5e1d3d5e1d3d5e1d3d5e1d3
d7e4d5b6c0b6535344ffffdcfcfcd6feffd8feffd7feffd7feffd7feffd7feffd7
fdfed7cdceb2cfd0b3e9ebc6bfc09df7f7d89c9a85c3c3a5fbfcd5fdfed5feffd7
feffd7ffffd8d1d2b0e3e3c6a2a186f5f5d2fefed5feffd7feffd7feffd7feffd7
feffd7feffd7feffd7ffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffdfefefffefec8cdcbdeeff9d8eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf5ccd8dcd6e6eed9eaf2
daecf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daebf3d8e8efabb7b0d7e3d5d7e4d5b7c2b6afb8add6e1d5d6e2d4d5e1d3d5e1d3
d5e1d3d5e0d4484c47ffffe3fdffd7feffd8feffd7feffd7feffd7fdfed6fdfdd7
ffffdabbbc9db6b69db4b398c3c2a8f6f7d5bebea2bebea0d3d2b7b9b89fc0bfa3
ffffdaffffd9fcfcd7a1a18ab8b99ddedebeffffd9feffd8feffd7feffd7feffd7
feffd7feffd7feffd7feffd7ffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffdfffff7f6f3d2dfe3d9ebf3dbebf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2ddeef6c0ccd0dbebf2
d9eaf2cedce4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d8eaf2d1ddddd3e0d1d6e2d4d4e0d2cbd7c9a9b3a8d2ded1d5e1d3
d5e1d3d5e1d3c0cbbe9b9b8bffffd9feffd7feffd7feffd7feffd7feffd7fefed7
feffd7e7e8c5b1b09bd6d7b5d7d7bcffffd9fefed8fdfdd5ffffe2a7a68dceccb0
e4e4c78e8d7adee0bf95967ff4f4d2c1c0a7ffffd9feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7ffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffe9e9ebd4e5eddae9f0d9ebf5d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2cedde3ccd9df
dbebf4c6d6de8f9ba0dff0f9d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9ebf2d1e0e6d2ded1d5e1d3d5e1d3d6e2d4d5e1d3a8b2a7
d9e5d7d5e1d3d5e1d3b0bab0c6c5adfefed7feffd7feffd7feffd7feffd7feffd7
fcfdd6ffffdf888670d3d4b49f9e88fefed8fefed8fdfdd6fefed8fdfdd6ffffda
e9e9c7c3c1a6ccccaedbdbbce6e7c4c3c1a5eff0cafdfdd9feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7ffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffefefcc4cbcedaebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daecf4bdc6cb
ddf2f7dbedf5a5b0b85e686ae5f6fed9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2daeaf3daecf3d8eaf1d3e3ebd1ddcfd6e2d4d5e1d3d6e2d4d5e1d3
d2dfd0939e90dae6d8d6e4d5a0a99fd0cfadfdfed7feffd7feffd7feffd7feffd7
feffd7ffffda868571edeecb8e8d79ffffe2feffd7feffd7feffd7feffd7feffd7
feffd7feffd7ffffdbd3d2b4a8a78ed2d1b2bcbaa3ffffd9fdffd4feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffd2d5d6d7e6edd9eaf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf4d9e9f1
c6d2d7dbedf5d8eaf2dbecf6d9e9f1daecf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2dae9f2d8ebf2d9ecf2d2e2eac3cec3d7e3d5d6e2d4d5e1d3
d3dfd1d7e3d5d4e0d2d5e1d3dae6d7858b82dfdebdfcfdd8feffd7feffd7feffd7
feffd7feffd7dad9b9d3d3b3aead94eff0d2fbfcd2feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7ffffd9f9f9d4dddcc0fdfed7fefed8fdfed5feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7ffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffaf9f8cbd4d6daecf6d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf4
d3e3e9d3e1e7d9eaf3d9eaf3d9ebf2d9e9f2dae9f2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daecf4c7d5ddccdde2d8e8f0d3dfd5d0ddcebfcbbd
d8e4d6d6e2d4d4e0d2d4e3d4d6e2d4dbe6d8595b4efdfdd7ffffd8feffd7feffd7
feffd6feffd8f8f9d29b9983bfbea7bbbaa0ffffd7fefed9fefed6fefed8feffd7
feffd8feffd8fdfed6feffd7feffd7fbfcd6feffd7fdfed7fcfcd6fdfed9feffd6
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7ffffffffffff
fffffffffffffffffffffffffffffffffffffdfefeffffffe5e6e8d8e7eed7e9f3
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d7eaf2d3e2e7d2e2e9d8e9f1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf4d0dce3c8d8ded9e9f2d0dcd2d5e2d2
b9c3b7bcc6bbd6e2d4d6e2d4d3e1d1d9e4d5697068cac9afffffd8fefed7feffd7
feffd7ffffdafcfcd483836feeeed2b5b49bffffdbfeffd7feffd7fefed7fefed4
ffffe3ffffe2fdfdd6fefedafeffd7feffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7ffffff
fffffffffffffffffffffffffffffffffffffffffffefefefafaf9c1cacfd9ebf2
daebf4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2dcecf3c4d2d8d7e7efd9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf2d4e4ebd0e1e8d0e0e9c1ccc2
d7e3d4dde8dba5afa4d4e0d2d5e0d2d5e2d4d7e3d4484a44ffffe7fcfcd7feffd7
feffd7feffd7ffffdca9a692eaebc8999882f4f5d0fefed7feffd7feffd7ffffdd
c4c3a76067636d7478969984ffffdefeffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7
fffffffffffffffffffffffffffffffefefefefefefefefefefffec6c8cadcf1f9
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2daebf3d9eaf2d9eaf2daebf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2dbecf4c3cfd3d9ebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9e9f2
d6e3d9d5e1d3d6e1d3bec8bbc5d1c5d3e0d2d6e2d5ccdac8707065ffffdffeffd7
feffd7fdfddaffffd69d9b84d0cfb1878571fdfcdaffffd6fdfdd8fdfdd5ffffdb
b4b39c40484cd9eaf2dbecf695a1a7767765feffd9fefed4feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7
feffd7fffffffffffffffffffffffffffffffdfdfdfefefeffffffe3e5e6d4e4e9
d9e9f3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2dbecf4c4d0d4daebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1
d3e3ecbecbc0d6e3d2d5e0d37f888060655f757c74838b83696f68d4d4b5ffffd8
feffd7feffd6ffffdacbcbb0d1d0b3b0af98e2e1beffffdbfefed7ffffd8f2f2cd
707264899196e3f4fddaebf3d9eaf1e1f2fca4b1b67b7f73ffffddffffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd7fffffffffffffffffffffffffffffffefefefefefde6e5e5cad8dc
daeaf5d9ebf1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daebf3d5e5eddaebf3d5e5eddaebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2dbecf4c5d1d5daebf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daebf3d6e7f0cad7ccd4e0d3b1bcaeccd6ca7e8171fcfad8e0dfbdffffdfffffd7
feffd7feffd7ffffd8deddbd929179bcb9a5bcbb9cffffdafdfed5fefed7eeefcb
4a4d47cddce6daedf5d9eaf2d8eaf3daebf4daebf1dbecf5c2cfd7494b46e9eac7
ffffd8feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7fffffffffffffffffffefefefdfdfdffffffe6e8e7cfdbde
dbecf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf48e999fd0dfe6858e93e3f4fcd9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dcecf4c5d1d5daebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2dae9f2d2e4ebc2cec5d0dbcecbd6cad9e5d74d524bdfdfc1ffffd9feffd7
feffd7fcfcd6fdfed7eff0cca8a792e1e1c2c1c1a8ffffdbfcfed6fdfdd6ffffe6
5f6056c3d1d8daebf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf2daecf5d4e4ed
646b6b999983ffffdefcfdd6fdfdd7fdfed9feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7fffffffffffffffffffefefefcfcfcd7dcddcbd8de
d9ebf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbedf49faab1d1e1e894a0a6e2f3fc
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dcecf4c5d1d5daebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2daebf3d5e8f0c2cfc9d8e4d5d5e2d2d6e3d4c1cac05f6151ffffdb
feffd7feffd7fefed8fdfeda9d9b83e3e5bf8f8d7bfdfdd8ffffd6fefed6ffffd7
b1b1985c646cdbedf7daecf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf3
d9eaf4e6f7ff828b918c8f82f0f1cdffffd7fdfed7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7fefefeffffffffffffe8e9e4c8d3d3d7e8f0
d9ebf3daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d5e5edd9eaf2d3e4ec
daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbedf5c4d0d4daebf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9ebf2daebf4def0f9d9ebf2bfcbcdccd8cbd4e2d6d5e1d2e6f0e4555749
fffddbfeffd6fdfcdadde0bf888676efeec89b9982fffedefbfcd6fdfdd8ffffd8
f8f9d24d514cdcecf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf1daebf3c0cfd76f7777797968ffffe5ffffd7fffed7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7fffdfef2f2f3dadeddd0dee5dcecf8
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf5c3cfd3daebf3
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d1dfe596a1a5d4e4eccfe1e9bfccc2d5e1d3cfdccc7d857c
888775ffffdaf0f1cdadae90b3b197dfdfbfa4a38ef7f7d3fcfdd4fefed8fdfed5
ffffdaabaa92a0a7b1dcedf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daebf3daebf3e3f4feb0c1c65c5d5cd5d6b7ffffde
feffd7feffd7feffd7feffd7feffd7feffd7feffd7ced0d1d6e3e8d6eaf3daeaf2
d9e9f0d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbedf5c3cfd3
daebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d8ebf2d8eaf288949ad9eaf1daebf3d0dfdfd6dfd3808a83
b8b7a0fbfcd3ffffd6e3e4c49d9e8ba5a692eeefcafbfad4fcfcd7fefedafdfed6
ffffd8dddbbb484f53dceff3dbeaf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf2d9eaf2daeaf2daeaf1d7e8f1656d70
787864ffffdbfeffd7feffd7feffd7feffd7feffd7feffd7d9ebf4daebf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2ddeef6
c0ccd0daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2daebf5c0ced69aa6abd3e1e9d9eaf3d3e4ebc2cfc1
d7e1d561655fcbcbacffffd8ffffdfffffdeffffdcffffd7feffd7feffd7feffd7
fdfed8ebebc9595a5ae0f3fbd9eaf2d9ebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf1
e5f6ffb6c3cc6a706eadae94ffffdafdfcd6fdfdd7feffd8feffd7daebf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
dfeff8bfcbcfdaebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daeaf3d8e9f0d9eaf1daeaf2d9eaf2d9eaf2
d3e1ded7e3d3d0dad148483affffdd979582e8e7c8feffd7feffd7feffd7feffd7
feffd7ffffdf717266c7d7dedbecf4d8e9f1daebf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daeaf2ddebf4d9e8f1daeff8979da58f917dffffdcfefed6fdfdd5feffd7d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1d9eaf2daebf3d9eaf2d9eaf2daebf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2def2f9bdc7cbdaebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf1daebf3d8eaf2d9eaf2d9eaf2
dbebf5becbd1d8e3d4cdd7cc565748ffffd7acaa96e6e6c2feffd7feffd7feffd7
feffd8ffffd99895807e8a90dceef4d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d8e9f1daebf2d8e9f1def0f895a1a874776bfaf9d6fefed8fdfed7
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf2d8e9f1dbecf4d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf3ddf3f9bcc6cadaebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9ebf3c9d8e0b2bfb2ccd6cc676859ffffdc9f9d8ee6e6cafeffd7feffd7
feffd7fbfbd5f2f2cf505751e6f8ffdaebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2bfcdd85c5e56f7f7d3
fdfed7d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2e0f1f9d5e7efc7d9e1daebf4dbebf3
d8eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf3def4fabcc6c9daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daebf3dcedf6d9ecf1dfeefabecac1d1dbd2454738f8f9d38b8a76e6e6c4feffd7
feffd7feffd7fffed7c5c4acb0bcc2d9ebf4dae9f3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1d9eaf2dcecf4c6d6dd
696f6ae9e9c4d9eaf2d9eaf2d9eaf2d9eaf2daebf3aebcc4838b8fb1bdc38d959c
dceef7d9e9f1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d8e7efc4cfd4daebf3d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9ebf3c7d6dca7b5badcedf5d8eaf1bfced654595f4b4d41f7f7d2999888e7e7c3
feffd7feffd7feffd7fdfed7d4d5b8929a96cedde8deeef7daebf3d8e9f1daebf4
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3
d9eaf2becdd4b3b29ed9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbeaf1878f97a1adb5
cddbe2d9eaf2d9eaf1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3d9eaf2daebf3daebf3daebf3d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d7e7eec5d0d4daebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2daecf4becbd19ba7a9dcedf6dbecf4d8e9f1edfcff4e5147feffdcb1b09a
e8e8c8feffd7feffd7feffd7fdfed7fcfdd4dedebd8e8f7f43494bd7e6ecd9ebf5
daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2c3d3da9b9d89d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8eaf3d1dfe6
c1d1d9c7d7dfdbecf4d8e9f0d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2cfdfe7bfcdd4bdcdd4c1d0d8
daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d4e3eac8d4d8daebf3d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2dfeef7a6b2bb949fa7e3f5fcd9eaf2daebf3ecfeff5e6460e2e3c1
898877ebebc6feffd7feffd7feffd6fdfdd7fdfed6fdffd8ffffddfefed8585a54
ccdbe3d9ebf2d8e9f1daeaf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d8eaf2afbbc3b3b299d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1e3f1f9879096b3bdc3
a1acb4d8e9f1d9eaf2d9eaf2d9eaf2d9eaf2d9eaf3c7d7dcd1e1e6d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf1d7e8f0d7e8f0d9eaf2d9eaf2c6d6dd566064363633
e9e9c794927eedeecafeffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7
e9eac94d504bdef0fadaecf5d9e9f0d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d8e9f2e3f6fd74797ae7e9c3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf2deeef69fabb0
a4b1b7a6b3bbdaebf3d9eaf2d9eaf2d9eaf2d9eaf2daebf3becdd2d7e6ebd9eaf3
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2ddeef6daebf3d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9e9f2daebf3d9eaf2d9eaf2daebf3e4f5fa
5c615edfdfbf979782f2f2cefeffd7feffd7feffd7feffd7feffd7feffd7feffd7
feffd7fdfdd6f8f7d5696c5fa0adb3e3f6ffdcedf5d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2dbebf4d7e9f249483dffffdbd9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf4b7c3c6dff0f7
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d2e2ea98a6aad0e0e7d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3
e7f9ff505350f3f3cf999682f7f6d0feffd7feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7ffffd8979a803f4647aab8bfdfeff7d9eaf2d9eaf3
d8e9f3dbebf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2dcecf3969fa7909078ffffdad9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2daebf3c0cccf
dbecf5d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ebf3cfdfe7a5b1b6cddde4d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1d8e9f1
cadae2848d92535547e5e4c57d796dfdfed5feffd7feffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7ffffdbf9f8d4a1a189868877878b80
8488857e8689dfeff7d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dcedf7545a5ef6f5d3ffffd7d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1
c8d4d9ddedf6d9eaf1d9eaf2d9eaf2d9eaf2d9eaf2dbebf4a9b4bd899097cedee5
d9eaf2daebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2dbecf498a4a9717061dfdebd9a987fffffdcfeffd7feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd6fffed7fdfcd8fcfdd6ffffd8
ffffdafefcd64e5048e6f7ffd9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9ecf3555958ffffe3feffd7d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d8e9f1
d5e5edcedcdfdbebf6d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2dbecf4dcedf5
d9ebf3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
daebf3d9eaf2d5e5edbac6cc636050efefceb0af96ffffd9feffd7feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd9
fdfdd6ffffde8f8e7c9da8adddeff8d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2ddeef6696f76d2d2b2ffffd8
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2cfdfe6d4e2ebd9eaf1daeaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2daebf3b9c9d05d666c625f51bfbfa7868573ffffd9feffd7feffd7
feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7feffd7
fcfdd6ffffdacfceb1596165ddf0f8d8e9f3d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2
d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2d9eaf2deeef752595ff2f2d3
ffffd7
grestore
grestore
showpage

%%EOF

%%EndDocument
 @endspecial -568 1061 a
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 39.238 -39.97606 } PutCoor PutBegin  end
 -568
1061 a -780 1081 a Fc(w)o(ater)19 b(currents)-568 1061
y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 40.02034 -131.59393 } PutCoor PutBegin  end
 -568 1061 a -809 1078 a Fc(na)o(vigation)h
(chart)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 40.2474 101.71846 } PutCoor PutBegin  end
 -568 1061
a -751 1078 a Fc(aerial)e(image)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.79666
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
119.50143 161.327 96.73915 161.327 96.73915 138.56471 79.66776 138.56471
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 6.06036 2.0  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.79666 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.79666
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
119.50143 -66.29494 96.73915 -66.29494 96.73915 -9.38945 79.66776 -9.38945
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 6.06036 2.0  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.79666 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.79666
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
119.50143 -83.36632 96.73915 -83.36632 96.73915 -100.43814 79.66776
-100.43814   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 6.06036 2.0
 CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def
4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.79666 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.56917 SLW 0  setgray   0. true 79.66776 81.65923
0.0 64.58784 .5 Frame  gsave 0.87058 0.98823 0.89019  setrgbcolor 
1. .setopacityalpha  fill  grestore gsave 0.56917 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -568 1061 a
tx@Dict begin { 37.21094 73.26572 } PutCoor PutBegin  end
 -568
1061 a -766 1078 a Fc(entity)h(history)-568 1061 y
tx@Dict begin  PutEnd  end
 -568
1061 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED
mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto
0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.79666
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 6.06036 2.0 CLW mul add dup 2 div /w ED mul dup
/h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L
w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
119.50143 98.73105 96.73915 98.73105 96.73915 70.2783 79.66776 70.2783
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 6.06036 2.0  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.79666 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -568 1061
a
tx@Dict begin { 220.86867 -17.92535 } PutCoor PutBegin  end
 -568 1061 a -953 1076 a Fa(selected)g(tar)o(gets,)f(re)n(w)o(ards)h
(grid)-568 1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -568 1061 a
tx@Dict begin { 258.84416 -120.35498 } PutCoor PutBegin  end
 -568 1061 a
-947 1076 a Fa(path:)k(sequence)c(of)e(w)o(aypoints)-568
1061 y
tx@Dict begin  PutEnd  end
 -568 1061 a -595 2698 a
 currentpoint currentpoint translate 1 1 div 1 1 div scale neg exch
neg exch translate
 -595 2698 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
